
Mutual  Exclusion 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002a84  00002b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003bc  0080006c  0080006c  00002b24  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00002b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00003274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003360  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035a5  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c38  00000000  00000000  00006a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001435  00000000  00000000  0000769d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b8c  00000000  00000000  00008ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000154f  00000000  00000000  00009660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040d3  00000000  00000000  0000abaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000ec82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 32       	cpi	r26, 0x28	; 40
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <main>
      8a:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:



void DIO_vsetPINDir(char portname,char pinnumber,char direction)
{
	switch(portname)
      92:	82 34       	cpi	r24, 0x42	; 66
      94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPINDir+0x58>
      96:	83 34       	cpi	r24, 0x43	; 67
      98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPINDir+0x10>
      9a:	81 34       	cpi	r24, 0x41	; 65
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPINDir+0xe>
      9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPINDir+0x104>
      a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPINDir+0x1e>
      a2:	83 34       	cpi	r24, 0x43	; 67
      a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
      a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPINDir+0x92>
      a8:	84 34       	cpi	r24, 0x44	; 68
      aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0x1c>
      ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPINDir+0x104>
      ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPINDir+0xcc>
	{
		
	
	case 'A':
	if(direction==1)
      b0:	41 30       	cpi	r20, 0x01	; 1
      b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPINDir+0x3c>
	{
		DDRA|=(1<<pinnumber);
      b4:	2a b3       	in	r18, 0x1a	; 26
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	ac 01       	movw	r20, r24
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPINDir+0x30>
      be:	44 0f       	add	r20, r20
      c0:	55 1f       	adc	r21, r21
      c2:	6a 95       	dec	r22
      c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPINDir+0x2c>
      c6:	ba 01       	movw	r22, r20
      c8:	62 2b       	or	r22, r18
      ca:	6a bb       	out	0x1a, r22	; 26
      cc:	08 95       	ret
	}
	else
	{
		DDRA&=(~(1<<pinnumber));
      ce:	2a b3       	in	r18, 0x1a	; 26
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	ac 01       	movw	r20, r24
      d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x4a>
      d8:	44 0f       	add	r20, r20
      da:	55 1f       	adc	r21, r21
      dc:	6a 95       	dec	r22
      de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x46>
      e0:	ba 01       	movw	r22, r20
      e2:	60 95       	com	r22
      e4:	62 23       	and	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
	}
	break;
	case 'B':
	if(direction==1)
      ea:	41 30       	cpi	r20, 0x01	; 1
      ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPINDir+0x76>
	{
		DDRB|=(1<<pinnumber);
      ee:	27 b3       	in	r18, 0x17	; 23
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	ac 01       	movw	r20, r24
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPINDir+0x6a>
      f8:	44 0f       	add	r20, r20
      fa:	55 1f       	adc	r21, r21
      fc:	6a 95       	dec	r22
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPINDir+0x66>
     100:	ba 01       	movw	r22, r20
     102:	62 2b       	or	r22, r18
     104:	67 bb       	out	0x17, r22	; 23
     106:	08 95       	ret
	}
	else
	{
		DDRB&=(~(1<<pinnumber));
     108:	27 b3       	in	r18, 0x17	; 23
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	ac 01       	movw	r20, r24
     110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x84>
     112:	44 0f       	add	r20, r20
     114:	55 1f       	adc	r21, r21
     116:	6a 95       	dec	r22
     118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x80>
     11a:	ba 01       	movw	r22, r20
     11c:	60 95       	com	r22
     11e:	62 23       	and	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
	}
	break;
	case 'C':
	if(direction==1)
     124:	41 30       	cpi	r20, 0x01	; 1
     126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPINDir+0xb0>
	{
		DDRC|=(1<<pinnumber);
     128:	24 b3       	in	r18, 0x14	; 20
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	ac 01       	movw	r20, r24
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0xa4>
     132:	44 0f       	add	r20, r20
     134:	55 1f       	adc	r21, r21
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0xa0>
     13a:	ba 01       	movw	r22, r20
     13c:	62 2b       	or	r22, r18
     13e:	64 bb       	out	0x14, r22	; 20
     140:	08 95       	ret
	}
	else
	{
		DDRC&=(~(1<<pinnumber));
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	ac 01       	movw	r20, r24
     14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
     14c:	44 0f       	add	r20, r20
     14e:	55 1f       	adc	r21, r21
     150:	6a 95       	dec	r22
     152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
     154:	ba 01       	movw	r22, r20
     156:	60 95       	com	r22
     158:	62 23       	and	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
	}
	break;
	case 'D':
	if(direction==1)
     15e:	41 30       	cpi	r20, 0x01	; 1
     160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPINDir+0xea>
	{
		DDRD|=(1<<pinnumber);
     162:	21 b3       	in	r18, 0x11	; 17
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	ac 01       	movw	r20, r24
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPINDir+0xde>
     16c:	44 0f       	add	r20, r20
     16e:	55 1f       	adc	r21, r21
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPINDir+0xda>
     174:	ba 01       	movw	r22, r20
     176:	62 2b       	or	r22, r18
     178:	61 bb       	out	0x11, r22	; 17
     17a:	08 95       	ret
	}
	else
	{
		DDRD&=(~(1<<pinnumber));
     17c:	21 b3       	in	r18, 0x11	; 17
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	ac 01       	movw	r20, r24
     184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xf8>
     186:	44 0f       	add	r20, r20
     188:	55 1f       	adc	r21, r21
     18a:	6a 95       	dec	r22
     18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xf4>
     18e:	ba 01       	movw	r22, r20
     190:	60 95       	com	r22
     192:	62 23       	and	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret

00000198 <DIO_write>:
}


void DIO_write(char portname,char pinnumber,char outputvalue)
{
	switch(portname)
     198:	82 34       	cpi	r24, 0x42	; 66
     19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
     19c:	83 34       	cpi	r24, 0x43	; 67
     19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
     1a0:	81 34       	cpi	r24, 0x41	; 65
     1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
     1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
     1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
     1a8:	83 34       	cpi	r24, 0x43	; 67
     1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
     1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
     1ae:	84 34       	cpi	r24, 0x44	; 68
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
     1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
     1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
	{
		case 'A' :
		
			if(outputvalue==1)
     1b6:	41 30       	cpi	r20, 0x01	; 1
     1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
			{
				PORTA|=(1<<pinnumber);
     1ba:	2b b3       	in	r18, 0x1b	; 27
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	ac 01       	movw	r20, r24
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
     1c4:	44 0f       	add	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	6a 95       	dec	r22
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
     1cc:	ba 01       	movw	r22, r20
     1ce:	62 2b       	or	r22, r18
     1d0:	6b bb       	out	0x1b, r22	; 27
     1d2:	08 95       	ret
			}
			else
			{
				PORTA&=(~(1<<pinnumber));
     1d4:	2b b3       	in	r18, 0x1b	; 27
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	ac 01       	movw	r20, r24
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
     1de:	44 0f       	add	r20, r20
     1e0:	55 1f       	adc	r21, r21
     1e2:	6a 95       	dec	r22
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
     1e6:	ba 01       	movw	r22, r20
     1e8:	60 95       	com	r22
     1ea:	62 23       	and	r22, r18
     1ec:	6b bb       	out	0x1b, r22	; 27
     1ee:	08 95       	ret
			}
			break ;
			case 'B':
			
			if(outputvalue==1)
     1f0:	41 30       	cpi	r20, 0x01	; 1
     1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
			{
				PORTB|=(1<<pinnumber);
     1f4:	28 b3       	in	r18, 0x18	; 24
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	ac 01       	movw	r20, r24
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
     206:	ba 01       	movw	r22, r20
     208:	62 2b       	or	r22, r18
     20a:	68 bb       	out	0x18, r22	; 24
     20c:	08 95       	ret
			}
			else
			{
				PORTB&=(~(1<<pinnumber));
     20e:	28 b3       	in	r18, 0x18	; 24
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	ac 01       	movw	r20, r24
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
     218:	44 0f       	add	r20, r20
     21a:	55 1f       	adc	r21, r21
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
     220:	ba 01       	movw	r22, r20
     222:	60 95       	com	r22
     224:	62 23       	and	r22, r18
     226:	68 bb       	out	0x18, r22	; 24
     228:	08 95       	ret
			}
			break ;
			case 'C' :
			
			if(outputvalue==1)
     22a:	41 30       	cpi	r20, 0x01	; 1
     22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
			{
				PORTC|=(1<<pinnumber);
     22e:	25 b3       	in	r18, 0x15	; 21
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	ac 01       	movw	r20, r24
     236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
     240:	ba 01       	movw	r22, r20
     242:	62 2b       	or	r22, r18
     244:	65 bb       	out	0x15, r22	; 21
     246:	08 95       	ret
			}
			else
			{
				PORTC&=(~(1<<pinnumber));
     248:	25 b3       	in	r18, 0x15	; 21
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	ac 01       	movw	r20, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	6a 95       	dec	r22
     258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
     25a:	ba 01       	movw	r22, r20
     25c:	60 95       	com	r22
     25e:	62 23       	and	r22, r18
     260:	65 bb       	out	0x15, r22	; 21
     262:	08 95       	ret
			}
			break ;
		case 'D':
		
		if(outputvalue==1)
     264:	41 30       	cpi	r20, 0x01	; 1
     266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
		{
			PORTD|=(1<<pinnumber);
     268:	22 b3       	in	r18, 0x12	; 18
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	ac 01       	movw	r20, r24
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
     272:	44 0f       	add	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
     27a:	ba 01       	movw	r22, r20
     27c:	62 2b       	or	r22, r18
     27e:	62 bb       	out	0x12, r22	; 18
     280:	08 95       	ret
		}
		else
	{
			PORTD&=(~(1<<pinnumber));
     282:	22 b3       	in	r18, 0x12	; 18
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	ac 01       	movw	r20, r24
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
     28c:	44 0f       	add	r20, r20
     28e:	55 1f       	adc	r21, r21
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
     294:	ba 01       	movw	r22, r20
     296:	60 95       	com	r22
     298:	62 23       	and	r22, r18
     29a:	62 bb       	out	0x12, r22	; 18
     29c:	08 95       	ret

0000029e <DIO_u8read>:


char DIO_u8read(char portname,char pinnumber)
{
	char x ;
	switch(portname)
     29e:	82 34       	cpi	r24, 0x42	; 66
     2a0:	f9 f0       	breq	.+62     	; 0x2e0 <DIO_u8read+0x42>
     2a2:	83 34       	cpi	r24, 0x43	; 67
     2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_u8read+0x10>
     2a6:	81 34       	cpi	r24, 0x41	; 65
     2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8read+0xe>
     2aa:	52 c0       	rjmp	.+164    	; 0x350 <DIO_u8read+0xb2>
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_u8read+0x1c>
     2ae:	83 34       	cpi	r24, 0x43	; 67
     2b0:	51 f1       	breq	.+84     	; 0x306 <DIO_u8read+0x68>
     2b2:	84 34       	cpi	r24, 0x44	; 68
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_u8read+0x1a>
     2b6:	4c c0       	rjmp	.+152    	; 0x350 <DIO_u8read+0xb2>
     2b8:	39 c0       	rjmp	.+114    	; 0x32c <DIO_u8read+0x8e>
	{
		case 'A' :
		x=((PINA&(1<<pinnumber))>>pinnumber);
     2ba:	29 b3       	in	r18, 0x19	; 25
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	06 2e       	mov	r0, r22
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x2a>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	0a 94       	dec	r0
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x26>
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	82 23       	and	r24, r18
     2d0:	93 23       	and	r25, r19
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8read+0x3a>
     2d4:	95 95       	asr	r25
     2d6:	87 95       	ror	r24
     2d8:	6a 95       	dec	r22
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8read+0x36>
     2dc:	98 2f       	mov	r25, r24
		break;
     2de:	38 c0       	rjmp	.+112    	; 0x350 <DIO_u8read+0xb2>
		
	case 'B' :
	x=((PINB&(1<<pinnumber))>>pinnumber) ;
     2e0:	26 b3       	in	r18, 0x16	; 22
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	06 2e       	mov	r0, r22
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_u8read+0x50>
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_u8read+0x4c>
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	82 23       	and	r24, r18
     2f6:	93 23       	and	r25, r19
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_u8read+0x60>
     2fa:	95 95       	asr	r25
     2fc:	87 95       	ror	r24
     2fe:	6a 95       	dec	r22
     300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_u8read+0x5c>
     302:	98 2f       	mov	r25, r24
	break;
     304:	25 c0       	rjmp	.+74     	; 0x350 <DIO_u8read+0xb2>
	
	case 'C' :
	x=((PINC&(1<<pinnumber))>>pinnumber) ;
     306:	23 b3       	in	r18, 0x13	; 19
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	06 2e       	mov	r0, r22
     30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8read+0x76>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8read+0x72>
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	82 23       	and	r24, r18
     31c:	93 23       	and	r25, r19
     31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_u8read+0x86>
     320:	95 95       	asr	r25
     322:	87 95       	ror	r24
     324:	6a 95       	dec	r22
     326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_u8read+0x82>
     328:	98 2f       	mov	r25, r24
	break;
     32a:	12 c0       	rjmp	.+36     	; 0x350 <DIO_u8read+0xb2>
	
	case 'D' :
	x=((PIND&(1<<pinnumber))>>pinnumber) ;
     32c:	20 b3       	in	r18, 0x10	; 16
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	06 2e       	mov	r0, r22
     334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_u8read+0x9c>
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	0a 94       	dec	r0
     33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_u8read+0x98>
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	82 23       	and	r24, r18
     342:	93 23       	and	r25, r19
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_u8read+0xac>
     346:	95 95       	asr	r25
     348:	87 95       	ror	r24
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_u8read+0xa8>
     34e:	98 2f       	mov	r25, r24
	break;
	default: break;
}
return x ;
}
     350:	89 2f       	mov	r24, r25
     352:	08 95       	ret

00000354 <DIO_toggle>:
void DIO_toggle(char portname,char pinnumber)
{
	switch(portname)
     354:	82 34       	cpi	r24, 0x42	; 66
     356:	b9 f0       	breq	.+46     	; 0x386 <DIO_toggle+0x32>
     358:	83 34       	cpi	r24, 0x43	; 67
     35a:	18 f4       	brcc	.+6      	; 0x362 <DIO_toggle+0xe>
     35c:	81 34       	cpi	r24, 0x41	; 65
     35e:	c9 f5       	brne	.+114    	; 0x3d2 <DIO_toggle+0x7e>
     360:	05 c0       	rjmp	.+10     	; 0x36c <DIO_toggle+0x18>
     362:	83 34       	cpi	r24, 0x43	; 67
     364:	e9 f0       	breq	.+58     	; 0x3a0 <DIO_toggle+0x4c>
     366:	84 34       	cpi	r24, 0x44	; 68
     368:	a1 f5       	brne	.+104    	; 0x3d2 <DIO_toggle+0x7e>
     36a:	27 c0       	rjmp	.+78     	; 0x3ba <DIO_toggle+0x66>
	{
		case 'A':
		PORTA^=(1<<pinnumber);
     36c:	2b b3       	in	r18, 0x1b	; 27
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	ac 01       	movw	r20, r24
     374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_toggle+0x26>
     376:	44 0f       	add	r20, r20
     378:	55 1f       	adc	r21, r21
     37a:	6a 95       	dec	r22
     37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_toggle+0x22>
     37e:	ba 01       	movw	r22, r20
     380:	62 27       	eor	r22, r18
     382:	6b bb       	out	0x1b, r22	; 27
		break;
     384:	08 95       	ret
		case 'B':
		PORTB^=(1<<pinnumber);
     386:	28 b3       	in	r18, 0x18	; 24
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	ac 01       	movw	r20, r24
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_toggle+0x40>
     390:	44 0f       	add	r20, r20
     392:	55 1f       	adc	r21, r21
     394:	6a 95       	dec	r22
     396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_toggle+0x3c>
     398:	ba 01       	movw	r22, r20
     39a:	62 27       	eor	r22, r18
     39c:	68 bb       	out	0x18, r22	; 24
		break;
     39e:	08 95       	ret
		case 'C':
		PORTC^=(1<<pinnumber);
     3a0:	25 b3       	in	r18, 0x15	; 21
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	ac 01       	movw	r20, r24
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_toggle+0x5a>
     3aa:	44 0f       	add	r20, r20
     3ac:	55 1f       	adc	r21, r21
     3ae:	6a 95       	dec	r22
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_toggle+0x56>
     3b2:	ba 01       	movw	r22, r20
     3b4:	62 27       	eor	r22, r18
     3b6:	65 bb       	out	0x15, r22	; 21
		break;
     3b8:	08 95       	ret
		case 'D':
		PORTD^=(1<<pinnumber);
     3ba:	22 b3       	in	r18, 0x12	; 18
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	ac 01       	movw	r20, r24
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_toggle+0x74>
     3c4:	44 0f       	add	r20, r20
     3c6:	55 1f       	adc	r21, r21
     3c8:	6a 95       	dec	r22
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_toggle+0x70>
     3cc:	ba 01       	movw	r22, r20
     3ce:	62 27       	eor	r22, r18
     3d0:	62 bb       	out	0x12, r22	; 18
     3d2:	08 95       	ret

000003d4 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(char portname,char portvalue)
{
	switch(portname)
     3d4:	82 34       	cpi	r24, 0x42	; 66
     3d6:	61 f0       	breq	.+24     	; 0x3f0 <DIO_write_port+0x1c>
     3d8:	83 34       	cpi	r24, 0x43	; 67
     3da:	18 f4       	brcc	.+6      	; 0x3e2 <DIO_write_port+0xe>
     3dc:	81 34       	cpi	r24, 0x41	; 65
     3de:	69 f4       	brne	.+26     	; 0x3fa <DIO_write_port+0x26>
     3e0:	05 c0       	rjmp	.+10     	; 0x3ec <DIO_write_port+0x18>
     3e2:	83 34       	cpi	r24, 0x43	; 67
     3e4:	39 f0       	breq	.+14     	; 0x3f4 <DIO_write_port+0x20>
     3e6:	84 34       	cpi	r24, 0x44	; 68
     3e8:	41 f4       	brne	.+16     	; 0x3fa <DIO_write_port+0x26>
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue;
     3ec:	6b bb       	out	0x1b, r22	; 27
		break ;
     3ee:	08 95       	ret
		case 'B':
		PORTB=portvalue;
     3f0:	68 bb       	out	0x18, r22	; 24
		break ;
     3f2:	08 95       	ret
		case 'C' :
		PORTC=portvalue;
     3f4:	65 bb       	out	0x15, r22	; 21
		break ;
     3f6:	08 95       	ret
		case 'D':
		PORTD=portvalue;
     3f8:	62 bb       	out	0x12, r22	; 18
     3fa:	08 95       	ret

000003fc <dio_write_highnibble>:
		default: break ;
	}
}
void dio_write_highnibble(char portname,char value)
{
		switch(portname)
     3fc:	82 34       	cpi	r24, 0x42	; 66
     3fe:	79 f0       	breq	.+30     	; 0x41e <dio_write_highnibble+0x22>
     400:	83 34       	cpi	r24, 0x43	; 67
     402:	18 f4       	brcc	.+6      	; 0x40a <dio_write_highnibble+0xe>
     404:	81 34       	cpi	r24, 0x41	; 65
     406:	c9 f4       	brne	.+50     	; 0x43a <dio_write_highnibble+0x3e>
     408:	05 c0       	rjmp	.+10     	; 0x414 <dio_write_highnibble+0x18>
     40a:	83 34       	cpi	r24, 0x43	; 67
     40c:	69 f0       	breq	.+26     	; 0x428 <dio_write_highnibble+0x2c>
     40e:	84 34       	cpi	r24, 0x44	; 68
     410:	a1 f4       	brne	.+40     	; 0x43a <dio_write_highnibble+0x3e>
     412:	0f c0       	rjmp	.+30     	; 0x432 <dio_write_highnibble+0x36>
		{
			case 'A' :
			PORTA|=(value&0xf0);
     414:	8b b3       	in	r24, 0x1b	; 27
     416:	60 7f       	andi	r22, 0xF0	; 240
     418:	68 2b       	or	r22, r24
     41a:	6b bb       	out	0x1b, r22	; 27
			break ;
     41c:	08 95       	ret
			case 'B':
			PORTB|=(value&0xf0);
     41e:	88 b3       	in	r24, 0x18	; 24
     420:	60 7f       	andi	r22, 0xF0	; 240
     422:	68 2b       	or	r22, r24
     424:	68 bb       	out	0x18, r22	; 24
			break ;
     426:	08 95       	ret
			case 'C' :
			PORTC|=(value&0xf0);
     428:	85 b3       	in	r24, 0x15	; 21
     42a:	60 7f       	andi	r22, 0xF0	; 240
     42c:	68 2b       	or	r22, r24
     42e:	65 bb       	out	0x15, r22	; 21
			break ;
     430:	08 95       	ret
			case 'D':
			PORTD|=(value&0xf0);
     432:	82 b3       	in	r24, 0x12	; 18
     434:	60 7f       	andi	r22, 0xF0	; 240
     436:	68 2b       	or	r22, r24
     438:	62 bb       	out	0x12, r22	; 18
     43a:	08 95       	ret

0000043c <clear_high_nibble>:
	
}
}
void clear_high_nibble(char portname)
{
	switch(portname)
     43c:	82 34       	cpi	r24, 0x42	; 66
     43e:	71 f0       	breq	.+28     	; 0x45c <clear_high_nibble+0x20>
     440:	83 34       	cpi	r24, 0x43	; 67
     442:	18 f4       	brcc	.+6      	; 0x44a <clear_high_nibble+0xe>
     444:	81 34       	cpi	r24, 0x41	; 65
     446:	a9 f4       	brne	.+42     	; 0x472 <clear_high_nibble+0x36>
     448:	05 c0       	rjmp	.+10     	; 0x454 <clear_high_nibble+0x18>
     44a:	83 34       	cpi	r24, 0x43	; 67
     44c:	59 f0       	breq	.+22     	; 0x464 <clear_high_nibble+0x28>
     44e:	84 34       	cpi	r24, 0x44	; 68
     450:	81 f4       	brne	.+32     	; 0x472 <clear_high_nibble+0x36>
     452:	0c c0       	rjmp	.+24     	; 0x46c <clear_high_nibble+0x30>
	{
		case 'A' :
		PORTA&=0x0f;
     454:	8b b3       	in	r24, 0x1b	; 27
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	8b bb       	out	0x1b, r24	; 27
		break ;
     45a:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
     45c:	88 b3       	in	r24, 0x18	; 24
     45e:	8f 70       	andi	r24, 0x0F	; 15
     460:	88 bb       	out	0x18, r24	; 24
		break ;
     462:	08 95       	ret
		case 'C' :
		PORTC&=0x0f;
     464:	85 b3       	in	r24, 0x15	; 21
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	85 bb       	out	0x15, r24	; 21
		break ;
     46a:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
     46c:	82 b3       	in	r24, 0x12	; 18
     46e:	8f 70       	andi	r24, 0x0F	; 15
     470:	82 bb       	out	0x12, r24	; 18
     472:	08 95       	ret

00000474 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
     474:	44 23       	and	r20, r20
     476:	41 f4       	brne	.+16     	; 0x488 <prvTestWaitCondition+0x14>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     478:	68 23       	and	r22, r24
     47a:	79 23       	and	r23, r25
		{
			xWaitConditionMet = pdTRUE;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	61 15       	cp	r22, r1
     480:	71 05       	cpc	r23, r1
     482:	51 f4       	brne	.+20     	; 0x498 <prvTestWaitCondition+0x24>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	08 95       	ret
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     488:	9b 01       	movw	r18, r22
     48a:	28 23       	and	r18, r24
     48c:	39 23       	and	r19, r25
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
		{
			xWaitConditionMet = pdTRUE;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	62 17       	cp	r22, r18
     492:	73 07       	cpc	r23, r19
     494:	09 f0       	breq	.+2      	; 0x498 <prvTestWaitCondition+0x24>
     496:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
     498:	08 95       	ret

0000049a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
     49e:	8b e0       	ldi	r24, 0x0B	; 11
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <pvPortMalloc>
     4a6:	ec 01       	movw	r28, r24

		if( pxEventBits != NULL )
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	31 f0       	breq	.+12     	; 0x4b8 <xEventGroupCreate+0x1e>
		{
			pxEventBits->uxEventBits = 0;
     4ac:	fc 01       	movw	r30, r24
     4ae:	11 92       	st	Z+, r1
     4b0:	11 92       	st	Z+, r1
     4b2:	cf 01       	movw	r24, r30
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     4b4:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
     4b8:	8c 2f       	mov	r24, r28
     4ba:	9d 2f       	mov	r25, r29
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     4c2:	af 92       	push	r10
     4c4:	bf 92       	push	r11
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	5c 01       	movw	r10, r24
     4d8:	6b 01       	movw	r12, r22
     4da:	e4 2e       	mov	r14, r20
     4dc:	f2 2e       	mov	r15, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     4de:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     4e2:	f5 01       	movw	r30, r10
     4e4:	c0 81       	ld	r28, Z
     4e6:	d1 81       	ldd	r29, Z+1	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     4e8:	ce 01       	movw	r24, r28
     4ea:	b6 01       	movw	r22, r12
     4ec:	4f 2d       	mov	r20, r15
     4ee:	0e 94 3a 02 	call	0x474	; 0x474 <prvTestWaitCondition>

		if( xWaitConditionMet != pdFALSE )
     4f2:	88 23       	and	r24, r24
     4f4:	51 f0       	breq	.+20     	; 0x50a <xEventGroupWaitBits+0x48>
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     4f6:	ee 20       	and	r14, r14
     4f8:	01 f1       	breq	.+64     	; 0x53a <xEventGroupWaitBits+0x78>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     4fa:	c0 94       	com	r12
     4fc:	d0 94       	com	r13
     4fe:	cc 22       	and	r12, r28
     500:	dd 22       	and	r13, r29
     502:	f5 01       	movw	r30, r10
     504:	d1 82       	std	Z+1, r13	; 0x01
     506:	c0 82       	st	Z, r12
     508:	18 c0       	rjmp	.+48     	; 0x53a <xEventGroupWaitBits+0x78>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     50a:	01 15       	cp	r16, r1
     50c:	11 05       	cpc	r17, r1
     50e:	a9 f0       	breq	.+42     	; 0x53a <xEventGroupWaitBits+0x78>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     510:	ee 20       	and	r14, r14
     512:	19 f4       	brne	.+6      	; 0x51a <xEventGroupWaitBits+0x58>
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn, uxControlBits = 0;
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	02 c0       	rjmp	.+4      	; 0x51e <xEventGroupWaitBits+0x5c>
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	71 e0       	ldi	r23, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     51e:	f1 10       	cpse	r15, r1
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     520:	74 60       	ori	r23, 0x04	; 4
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     522:	6c 29       	or	r22, r12
     524:	7d 29       	or	r23, r13
     526:	c5 01       	movw	r24, r10
     528:	02 96       	adiw	r24, 0x02	; 2
     52a:	a8 01       	movw	r20, r16
     52c:	0e 94 32 11 	call	0x2264	; 0x2264 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     530:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     534:	88 23       	and	r24, r24
     536:	39 f4       	brne	.+14     	; 0x546 <xEventGroupWaitBits+0x84>
     538:	04 c0       	rjmp	.+8      	; 0x542 <xEventGroupWaitBits+0x80>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     53a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
     53e:	ce 01       	movw	r24, r28
     540:	21 c0       	rjmp	.+66     	; 0x584 <xEventGroupWaitBits+0xc2>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     542:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     546:	0e 94 b8 12 	call	0x2570	; 0x2570 <uxTaskResetEventItemValue>
     54a:	ec 01       	movw	r28, r24

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     54c:	91 fd       	sbrc	r25, 1
     54e:	18 c0       	rjmp	.+48     	; 0x580 <xEventGroupWaitBits+0xbe>
		{
			taskENTER_CRITICAL();
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     556:	f5 01       	movw	r30, r10
     558:	c0 81       	ld	r28, Z
     55a:	d1 81       	ldd	r29, Z+1	; 0x01

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     55c:	ce 01       	movw	r24, r28
     55e:	b6 01       	movw	r22, r12
     560:	4f 2d       	mov	r20, r15
     562:	0e 94 3a 02 	call	0x474	; 0x474 <prvTestWaitCondition>
     566:	88 23       	and	r24, r24
     568:	49 f0       	breq	.+18     	; 0x57c <xEventGroupWaitBits+0xba>
				{
					if( xClearOnExit != pdFALSE )
     56a:	ee 20       	and	r14, r14
     56c:	39 f0       	breq	.+14     	; 0x57c <xEventGroupWaitBits+0xba>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     56e:	c0 94       	com	r12
     570:	d0 94       	com	r13
     572:	cc 22       	and	r12, r28
     574:	dd 22       	and	r13, r29
     576:	f5 01       	movw	r30, r10
     578:	d1 82       	std	Z+1, r13	; 0x01
     57a:	c0 82       	st	Z, r12
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     580:	ce 01       	movw	r24, r28
     582:	90 70       	andi	r25, 0x00	; 0
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	bf 90       	pop	r11
     596:	af 90       	pop	r10
     598:	08 95       	ret

0000059a <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     59a:	fc 01       	movw	r30, r24
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     5a6:	60 95       	com	r22
     5a8:	70 95       	com	r23
     5aa:	68 23       	and	r22, r24
     5ac:	79 23       	and	r23, r25
     5ae:	71 83       	std	Z+1, r23	; 0x01
     5b0:	60 83       	st	Z, r22
	}
	taskEXIT_CRITICAL();
     5b2:	0f 90       	pop	r0
     5b4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
     5b6:	08 95       	ret

000005b8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     5b8:	fc 01       	movw	r30, r24
		uxReturn = pxEventBits->uxEventBits;
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
}
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	08 95       	ret

000005c0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     5c0:	af 92       	push	r10
     5c2:	bf 92       	push	r11
     5c4:	cf 92       	push	r12
     5c6:	df 92       	push	r13
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	8c 01       	movw	r16, r24
     5d6:	eb 01       	movw	r28, r22
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5d8:	0f 2e       	mov	r0, r31
     5da:	f5 e0       	ldi	r31, 0x05	; 5
     5dc:	cf 2e       	mov	r12, r31
     5de:	dd 24       	eor	r13, r13
     5e0:	f0 2d       	mov	r31, r0
     5e2:	c8 0e       	add	r12, r24
     5e4:	d9 1e       	adc	r13, r25
	vTaskSuspendAll();
     5e6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     5ea:	d8 01       	movw	r26, r16
     5ec:	17 96       	adiw	r26, 0x07	; 7
     5ee:	ed 91       	ld	r30, X+
     5f0:	fc 91       	ld	r31, X
     5f2:	18 97       	sbiw	r26, 0x08	; 8

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     5f4:	8d 91       	ld	r24, X+
     5f6:	9c 91       	ld	r25, X
     5f8:	11 97       	sbiw	r26, 0x01	; 1
     5fa:	8c 2b       	or	r24, r28
     5fc:	9d 2b       	or	r25, r29
     5fe:	11 96       	adiw	r26, 0x01	; 1
     600:	9c 93       	st	X, r25
     602:	8e 93       	st	-X, r24

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     604:	ce 16       	cp	r12, r30
     606:	df 06       	cpc	r13, r31
     608:	c1 f1       	breq	.+112    	; 0x67a <xEventGroupSetBits+0xba>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     60a:	aa 24       	eor	r10, r10
     60c:	bb 24       	eor	r11, r11
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     60e:	ff 24       	eor	r15, r15
     610:	f3 94       	inc	r15
     612:	ee 24       	eor	r14, r14
     614:	01 c0       	rjmp	.+2      	; 0x618 <xEventGroupSetBits+0x58>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     616:	fe 01       	movw	r30, r28
		{
			pxNext = listGET_NEXT( pxListItem );
     618:	c2 81       	ldd	r28, Z+2	; 0x02
     61a:	d3 81       	ldd	r29, Z+3	; 0x03
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     620:	bc 01       	movw	r22, r24
     622:	60 70       	andi	r22, 0x00	; 0
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     624:	9c 01       	movw	r18, r24
     626:	30 70       	andi	r19, 0x00	; 0

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     628:	92 fd       	sbrc	r25, 2
     62a:	0b c0       	rjmp	.+22     	; 0x642 <xEventGroupSetBits+0x82>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     62c:	d8 01       	movw	r26, r16
     62e:	8d 91       	ld	r24, X+
     630:	9c 91       	ld	r25, X
     632:	11 97       	sbiw	r26, 0x01	; 1
     634:	82 23       	and	r24, r18
     636:	93 23       	and	r25, r19
				{
					xMatchFound = pdTRUE;
     638:	4f 2d       	mov	r20, r15
     63a:	00 97       	sbiw	r24, 0x00	; 0
     63c:	69 f4       	brne	.+26     	; 0x658 <xEventGroupSetBits+0x98>
     63e:	4e 2d       	mov	r20, r14
     640:	0b c0       	rjmp	.+22     	; 0x658 <xEventGroupSetBits+0x98>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     642:	d8 01       	movw	r26, r16
     644:	8d 91       	ld	r24, X+
     646:	9c 91       	ld	r25, X
     648:	11 97       	sbiw	r26, 0x01	; 1
     64a:	82 23       	and	r24, r18
     64c:	93 23       	and	r25, r19
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     64e:	4f 2d       	mov	r20, r15
     650:	28 17       	cp	r18, r24
     652:	39 07       	cpc	r19, r25
     654:	09 f0       	breq	.+2      	; 0x658 <xEventGroupSetBits+0x98>
     656:	4e 2d       	mov	r20, r14
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     658:	44 23       	and	r20, r20
     65a:	59 f0       	breq	.+22     	; 0x672 <xEventGroupSetBits+0xb2>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     65c:	70 ff       	sbrs	r23, 0
     65e:	02 c0       	rjmp	.+4      	; 0x664 <xEventGroupSetBits+0xa4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     660:	a2 2a       	or	r10, r18
     662:	b3 2a       	or	r11, r19
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     664:	d8 01       	movw	r26, r16
     666:	6d 91       	ld	r22, X+
     668:	7c 91       	ld	r23, X
     66a:	72 60       	ori	r23, 0x02	; 2
     66c:	cf 01       	movw	r24, r30
     66e:	0e 94 96 11 	call	0x232c	; 0x232c <xTaskRemoveFromUnorderedEventList>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     672:	cc 16       	cp	r12, r28
     674:	dd 06       	cpc	r13, r29
     676:	79 f6       	brne	.-98     	; 0x616 <xEventGroupSetBits+0x56>
     678:	02 c0       	rjmp	.+4      	; 0x67e <xEventGroupSetBits+0xbe>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     67a:	aa 24       	eor	r10, r10
     67c:	bb 24       	eor	r11, r11
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     67e:	c5 01       	movw	r24, r10
     680:	80 95       	com	r24
     682:	90 95       	com	r25
     684:	f8 01       	movw	r30, r16
     686:	a0 80       	ld	r10, Z
     688:	b1 80       	ldd	r11, Z+1	; 0x01
     68a:	a8 22       	and	r10, r24
     68c:	b9 22       	and	r11, r25
     68e:	b1 82       	std	Z+1, r11	; 0x01
     690:	a0 82       	st	Z, r10
	}
	( void ) xTaskResumeAll();
     692:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
     696:	d8 01       	movw	r26, r16
     698:	8c 91       	ld	r24, X
     69a:	11 96       	adiw	r26, 0x01	; 1
     69c:	9c 91       	ld	r25, X
     69e:	11 97       	sbiw	r26, 0x01	; 1
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	df 90       	pop	r13
     6ae:	cf 90       	pop	r12
     6b0:	bf 90       	pop	r11
     6b2:	af 90       	pop	r10
     6b4:	08 95       	ret

000006b6 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     6b6:	af 92       	push	r10
     6b8:	bf 92       	push	r11
     6ba:	cf 92       	push	r12
     6bc:	df 92       	push	r13
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	6c 01       	movw	r12, r24
     6cc:	eb 01       	movw	r28, r22
     6ce:	7a 01       	movw	r14, r20
     6d0:	59 01       	movw	r10, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     6d2:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     6d6:	f6 01       	movw	r30, r12
     6d8:	00 81       	ld	r16, Z
     6da:	11 81       	ldd	r17, Z+1	; 0x01

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     6dc:	c6 01       	movw	r24, r12
     6de:	be 01       	movw	r22, r28
     6e0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     6e4:	c0 2b       	or	r28, r16
     6e6:	d1 2b       	or	r29, r17
     6e8:	c7 01       	movw	r24, r14
     6ea:	8c 23       	and	r24, r28
     6ec:	9d 23       	and	r25, r29
     6ee:	8e 15       	cp	r24, r14
     6f0:	9f 05       	cpc	r25, r15
     6f2:	51 f4       	brne	.+20     	; 0x708 <xEventGroupSync+0x52>
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     6f4:	80 95       	com	r24
     6f6:	90 95       	com	r25
     6f8:	f6 01       	movw	r30, r12
     6fa:	20 81       	ld	r18, Z
     6fc:	31 81       	ldd	r19, Z+1	; 0x01
     6fe:	82 23       	and	r24, r18
     700:	93 23       	and	r25, r19
     702:	91 83       	std	Z+1, r25	; 0x01
     704:	80 83       	st	Z, r24
     706:	12 c0       	rjmp	.+36     	; 0x72c <xEventGroupSync+0x76>

			xTicksToWait = 0;
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     708:	a1 14       	cp	r10, r1
     70a:	b1 04       	cpc	r11, r1
     70c:	61 f0       	breq	.+24     	; 0x726 <xEventGroupSync+0x70>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     70e:	b7 01       	movw	r22, r14
     710:	75 60       	ori	r23, 0x05	; 5
     712:	c6 01       	movw	r24, r12
     714:	02 96       	adiw	r24, 0x02	; 2
     716:	a5 01       	movw	r20, r10
     718:	0e 94 32 11 	call	0x2264	; 0x2264 <vTaskPlaceOnUnorderedEventList>
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     71c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     720:	88 23       	and	r24, r24
     722:	49 f4       	brne	.+18     	; 0x736 <xEventGroupSync+0x80>
     724:	06 c0       	rjmp	.+12     	; 0x732 <xEventGroupSync+0x7c>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     726:	f6 01       	movw	r30, r12
     728:	c0 81       	ld	r28, Z
     72a:	d1 81       	ldd	r29, Z+1	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     72c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
     730:	1c c0       	rjmp	.+56     	; 0x76a <xEventGroupSync+0xb4>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     732:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     736:	0e 94 b8 12 	call	0x2570	; 0x2570 <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     73a:	91 fd       	sbrc	r25, 1
     73c:	14 c0       	rjmp	.+40     	; 0x766 <xEventGroupSync+0xb0>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
     744:	f6 01       	movw	r30, r12
     746:	80 81       	ld	r24, Z
     748:	91 81       	ldd	r25, Z+1	; 0x01

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     74a:	97 01       	movw	r18, r14
     74c:	28 23       	and	r18, r24
     74e:	39 23       	and	r19, r25
     750:	2e 15       	cp	r18, r14
     752:	3f 05       	cpc	r19, r15
     754:	31 f4       	brne	.+12     	; 0x762 <xEventGroupSync+0xac>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     756:	20 95       	com	r18
     758:	30 95       	com	r19
     75a:	28 23       	and	r18, r24
     75c:	39 23       	and	r19, r25
     75e:	31 83       	std	Z+1, r19	; 0x01
     760:	20 83       	st	Z, r18
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     766:	ec 01       	movw	r28, r24
     768:	d0 70       	andi	r29, 0x00	; 0
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     76a:	8c 2f       	mov	r24, r28
     76c:	9d 2f       	mov	r25, r29
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	08 95       	ret

00000784 <vEventGroupDelete>:
	return pxEventBits->uxEventBits;
}
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

	vTaskSuspendAll();
     78a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	88 23       	and	r24, r24
     792:	49 f0       	breq	.+18     	; 0x7a6 <vEventGroupDelete+0x22>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     794:	8f 81       	ldd	r24, Y+7	; 0x07
     796:	98 85       	ldd	r25, Y+8	; 0x08
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	72 e0       	ldi	r23, 0x02	; 2
     79c:	0e 94 96 11 	call	0x232c	; 0x232c <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	88 23       	and	r24, r24
     7a4:	b9 f7       	brne	.-18     	; 0x794 <vEventGroupDelete+0x10>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
     7a6:	ce 01       	movw	r24, r28
     7a8:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
     7ac:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     7b6:	ba 01       	movw	r22, r20
     7b8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <xEventGroupSetBits>
}
     7bc:	08 95       	ret

000007be <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     7be:	ba 01       	movw	r22, r20
     7c0:	0e 94 cd 02 	call	0x59a	; 0x59a <xEventGroupClearBits>
}
     7c4:	08 95       	ret

000007c6 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     7d0:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     7d4:	80 91 6c 00 	lds	r24, 0x006C
     7d8:	88 23       	and	r24, r24
     7da:	f9 f4       	brne	.+62     	; 0x81a <pvPortMalloc+0x54>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     7dc:	86 e7       	ldi	r24, 0x76	; 118
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	90 93 6e 00 	sts	0x006E, r25
     7e4:	80 93 6d 00 	sts	0x006D, r24
	xStart.xBlockSize = ( size_t ) 0;
     7e8:	10 92 70 00 	sts	0x0070, r1
     7ec:	10 92 6f 00 	sts	0x006F, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     7f0:	8f e1       	ldi	r24, 0x1F	; 31
     7f2:	93 e0       	ldi	r25, 0x03	; 3
     7f4:	90 93 74 00 	sts	0x0074, r25
     7f8:	80 93 73 00 	sts	0x0073, r24
	xEnd.pxNextFreeBlock = NULL;
     7fc:	e3 e7       	ldi	r30, 0x73	; 115
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	12 92       	st	-Z, r1
     802:	12 92       	st	-Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     804:	90 93 79 00 	sts	0x0079, r25
     808:	80 93 78 00 	sts	0x0078, r24
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     80c:	f0 93 77 00 	sts	0x0077, r31
     810:	e0 93 76 00 	sts	0x0076, r30
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 6c 00 	sts	0x006C, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     81a:	20 97       	sbiw	r28, 0x00	; 0
     81c:	09 f4       	brne	.+2      	; 0x820 <pvPortMalloc+0x5a>
     81e:	62 c0       	rjmp	.+196    	; 0x8e4 <__stack+0x85>
		{
			xWantedSize += heapSTRUCT_SIZE;
     820:	9e 01       	movw	r18, r28
     822:	2c 5f       	subi	r18, 0xFC	; 252
     824:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     826:	23 96       	adiw	r28, 0x03	; 3
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	ce 31       	cpi	r28, 0x1E	; 30
     82c:	d8 07       	cpc	r29, r24
     82e:	08 f0       	brcs	.+2      	; 0x832 <pvPortMalloc+0x6c>
     830:	5c c0       	rjmp	.+184    	; 0x8ea <__stack+0x8b>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     832:	e0 91 6d 00 	lds	r30, 0x006D
     836:	f0 91 6e 00 	lds	r31, 0x006E

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     83a:	ad e6       	ldi	r26, 0x6D	; 109
     83c:	b0 e0       	ldi	r27, 0x00	; 0
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     83e:	02 c0       	rjmp	.+4      	; 0x844 <pvPortMalloc+0x7e>
     840:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     842:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     844:	82 81       	ldd	r24, Z+2	; 0x02
     846:	93 81       	ldd	r25, Z+3	; 0x03
     848:	82 17       	cp	r24, r18
     84a:	93 07       	cpc	r25, r19
     84c:	20 f4       	brcc	.+8      	; 0x856 <pvPortMalloc+0x90>
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	00 97       	sbiw	r24, 0x00	; 0
     854:	a9 f7       	brne	.-22     	; 0x840 <pvPortMalloc+0x7a>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	e1 37       	cpi	r30, 0x71	; 113
     85a:	fc 07       	cpc	r31, r28
     85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
     85e:	48 c0       	rjmp	.+144    	; 0x8f0 <__stack+0x91>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     860:	8d 91       	ld	r24, X+
     862:	9c 91       	ld	r25, X
     864:	11 97       	sbiw	r26, 0x01	; 1
     866:	8c 01       	movw	r16, r24
     868:	0c 5f       	subi	r16, 0xFC	; 252
     86a:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     86c:	80 81       	ld	r24, Z
     86e:	91 81       	ldd	r25, Z+1	; 0x01
     870:	11 96       	adiw	r26, 0x01	; 1
     872:	9c 93       	st	X, r25
     874:	8e 93       	st	-X, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     876:	82 81       	ldd	r24, Z+2	; 0x02
     878:	93 81       	ldd	r25, Z+3	; 0x03
     87a:	82 1b       	sub	r24, r18
     87c:	93 0b       	sbc	r25, r19
     87e:	89 30       	cpi	r24, 0x09	; 9
     880:	91 05       	cpc	r25, r1
     882:	18 f1       	brcs	.+70     	; 0x8ca <__stack+0x6b>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     884:	af 01       	movw	r20, r30
     886:	42 0f       	add	r20, r18
     888:	53 1f       	adc	r21, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     88a:	da 01       	movw	r26, r20
     88c:	13 96       	adiw	r26, 0x03	; 3
     88e:	9c 93       	st	X, r25
     890:	8e 93       	st	-X, r24
     892:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     894:	33 83       	std	Z+3, r19	; 0x03
     896:	22 83       	std	Z+2, r18	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     898:	12 96       	adiw	r26, 0x02	; 2
     89a:	2d 91       	ld	r18, X+
     89c:	3c 91       	ld	r19, X
     89e:	13 97       	sbiw	r26, 0x03	; 3
     8a0:	6d e6       	ldi	r22, 0x6D	; 109
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	bd 01       	movw	r22, r26
     8a8:	eb 01       	movw	r28, r22
     8aa:	a8 81       	ld	r26, Y
     8ac:	b9 81       	ldd	r27, Y+1	; 0x01
     8ae:	12 96       	adiw	r26, 0x02	; 2
     8b0:	8d 91       	ld	r24, X+
     8b2:	9c 91       	ld	r25, X
     8b4:	13 97       	sbiw	r26, 0x03	; 3
     8b6:	82 17       	cp	r24, r18
     8b8:	93 07       	cpc	r25, r19
     8ba:	a8 f3       	brcs	.-22     	; 0x8a6 <__stack+0x47>
     8bc:	ea 01       	movw	r28, r20
     8be:	b9 83       	std	Y+1, r27	; 0x01
     8c0:	a8 83       	st	Y, r26
     8c2:	db 01       	movw	r26, r22
     8c4:	11 96       	adiw	r26, 0x01	; 1
     8c6:	5c 93       	st	X, r21
     8c8:	4e 93       	st	-X, r20
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     8ca:	80 91 60 00 	lds	r24, 0x0060
     8ce:	90 91 61 00 	lds	r25, 0x0061
     8d2:	22 81       	ldd	r18, Z+2	; 0x02
     8d4:	33 81       	ldd	r19, Z+3	; 0x03
     8d6:	82 1b       	sub	r24, r18
     8d8:	93 0b       	sbc	r25, r19
     8da:	90 93 61 00 	sts	0x0061, r25
     8de:	80 93 60 00 	sts	0x0060, r24
     8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <__stack+0x95>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     8e4:	00 e0       	ldi	r16, 0x00	; 0
     8e6:	10 e0       	ldi	r17, 0x00	; 0
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <__stack+0x95>
     8ea:	00 e0       	ldi	r16, 0x00	; 0
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__stack+0x95>
     8f0:	00 e0       	ldi	r16, 0x00	; 0
     8f2:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     8f4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     8f8:	80 2f       	mov	r24, r16
     8fa:	91 2f       	mov	r25, r17
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	ec 01       	movw	r28, r24
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	39 f1       	breq	.+78     	; 0x962 <vPortFree+0x5c>
		before it. */
		puc -= heapSTRUCT_SIZE;

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     914:	8c 01       	movw	r16, r24
     916:	04 50       	subi	r16, 0x04	; 4
     918:	10 40       	sbci	r17, 0x00	; 0

		vTaskSuspendAll();
     91a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     91e:	f8 01       	movw	r30, r16
     920:	22 81       	ldd	r18, Z+2	; 0x02
     922:	33 81       	ldd	r19, Z+3	; 0x03
     924:	ad e6       	ldi	r26, 0x6D	; 109
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	01 c0       	rjmp	.+2      	; 0x92c <vPortFree+0x26>
     92a:	df 01       	movw	r26, r30
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	11 97       	sbiw	r26, 0x01	; 1
     932:	82 81       	ldd	r24, Z+2	; 0x02
     934:	93 81       	ldd	r25, Z+3	; 0x03
     936:	82 17       	cp	r24, r18
     938:	93 07       	cpc	r25, r19
     93a:	b8 f3       	brcs	.-18     	; 0x92a <vPortFree+0x24>
     93c:	24 97       	sbiw	r28, 0x04	; 4
     93e:	f9 83       	std	Y+1, r31	; 0x01
     940:	e8 83       	st	Y, r30
     942:	0d 93       	st	X+, r16
     944:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     946:	80 91 60 00 	lds	r24, 0x0060
     94a:	90 91 61 00 	lds	r25, 0x0061
     94e:	2a 81       	ldd	r18, Y+2	; 0x02
     950:	3b 81       	ldd	r19, Y+3	; 0x03
     952:	82 0f       	add	r24, r18
     954:	93 1f       	adc	r25, r19
     956:	90 93 61 00 	sts	0x0061, r25
     95a:	80 93 60 00 	sts	0x0060, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     95e:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
	}
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	08 95       	ret

0000096c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
     96c:	80 91 60 00 	lds	r24, 0x0060
     970:	90 91 61 00 	lds	r25, 0x0061
     974:	08 95       	ret

00000976 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     976:	08 95       	ret

00000978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     978:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     97a:	03 96       	adiw	r24, 0x03	; 3
     97c:	92 83       	std	Z+2, r25	; 0x02
     97e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     980:	2f ef       	ldi	r18, 0xFF	; 255
     982:	3f ef       	ldi	r19, 0xFF	; 255
     984:	34 83       	std	Z+4, r19	; 0x04
     986:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     988:	96 83       	std	Z+6, r25	; 0x06
     98a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     98c:	90 87       	std	Z+8, r25	; 0x08
     98e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     990:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     992:	08 95       	ret

00000994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     994:	fc 01       	movw	r30, r24
     996:	11 86       	std	Z+9, r1	; 0x09
     998:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     99a:	08 95       	ret

0000099c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     9a2:	dc 01       	movw	r26, r24
     9a4:	11 96       	adiw	r26, 0x01	; 1
     9a6:	cd 91       	ld	r28, X+
     9a8:	dc 91       	ld	r29, X
     9aa:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     9ac:	d3 83       	std	Z+3, r29	; 0x03
     9ae:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     9b0:	2c 81       	ldd	r18, Y+4	; 0x04
     9b2:	3d 81       	ldd	r19, Y+5	; 0x05
     9b4:	35 83       	std	Z+5, r19	; 0x05
     9b6:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     9b8:	ac 81       	ldd	r26, Y+4	; 0x04
     9ba:	bd 81       	ldd	r27, Y+5	; 0x05
     9bc:	13 96       	adiw	r26, 0x03	; 3
     9be:	7c 93       	st	X, r23
     9c0:	6e 93       	st	-X, r22
     9c2:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     9c4:	7d 83       	std	Y+5, r23	; 0x05
     9c6:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     9c8:	91 87       	std	Z+9, r25	; 0x09
     9ca:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     9cc:	fc 01       	movw	r30, r24
     9ce:	20 81       	ld	r18, Z
     9d0:	2f 5f       	subi	r18, 0xFF	; 255
     9d2:	20 83       	st	Z, r18
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ac 01       	movw	r20, r24
     9e0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9e2:	28 81       	ld	r18, Y
     9e4:	39 81       	ldd	r19, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	2f 3f       	cpi	r18, 0xFF	; 255
     9ea:	38 07       	cpc	r19, r24
     9ec:	21 f4       	brne	.+8      	; 0x9f6 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     9ee:	fa 01       	movw	r30, r20
     9f0:	a7 81       	ldd	r26, Z+7	; 0x07
     9f2:	b0 85       	ldd	r27, Z+8	; 0x08
     9f4:	0d c0       	rjmp	.+26     	; 0xa10 <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9f6:	da 01       	movw	r26, r20
     9f8:	13 96       	adiw	r26, 0x03	; 3
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <vListInsert+0x24>
     9fc:	df 01       	movw	r26, r30
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	ed 91       	ld	r30, X+
     a02:	fc 91       	ld	r31, X
     a04:	13 97       	sbiw	r26, 0x03	; 3
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	28 17       	cp	r18, r24
     a0c:	39 07       	cpc	r19, r25
     a0e:	b0 f7       	brcc	.-20     	; 0x9fc <vListInsert+0x22>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     a10:	12 96       	adiw	r26, 0x02	; 2
     a12:	ed 91       	ld	r30, X+
     a14:	fc 91       	ld	r31, X
     a16:	13 97       	sbiw	r26, 0x03	; 3
     a18:	fb 83       	std	Y+3, r31	; 0x03
     a1a:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a1c:	d5 83       	std	Z+5, r29	; 0x05
     a1e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     a20:	bd 83       	std	Y+5, r27	; 0x05
     a22:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     a24:	13 96       	adiw	r26, 0x03	; 3
     a26:	dc 93       	st	X, r29
     a28:	ce 93       	st	-X, r28
     a2a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     a2c:	59 87       	std	Y+9, r21	; 0x09
     a2e:	48 87       	std	Y+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
     a30:	fa 01       	movw	r30, r20
     a32:	80 81       	ld	r24, Z
     a34:	8f 5f       	subi	r24, 0xFF	; 255
     a36:	80 83       	st	Z, r24
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     a44:	c0 85       	ldd	r28, Z+8	; 0x08
     a46:	d1 85       	ldd	r29, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a48:	a2 81       	ldd	r26, Z+2	; 0x02
     a4a:	b3 81       	ldd	r27, Z+3	; 0x03
     a4c:	84 81       	ldd	r24, Z+4	; 0x04
     a4e:	95 81       	ldd	r25, Z+5	; 0x05
     a50:	15 96       	adiw	r26, 0x05	; 5
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a58:	a4 81       	ldd	r26, Z+4	; 0x04
     a5a:	b5 81       	ldd	r27, Z+5	; 0x05
     a5c:	82 81       	ldd	r24, Z+2	; 0x02
     a5e:	93 81       	ldd	r25, Z+3	; 0x03
     a60:	13 96       	adiw	r26, 0x03	; 3
     a62:	9c 93       	st	X, r25
     a64:	8e 93       	st	-X, r24
     a66:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     a68:	a9 81       	ldd	r26, Y+1	; 0x01
     a6a:	ba 81       	ldd	r27, Y+2	; 0x02
     a6c:	ae 17       	cp	r26, r30
     a6e:	bf 07       	cpc	r27, r31
     a70:	31 f4       	brne	.+12     	; 0xa7e <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     a72:	14 96       	adiw	r26, 0x04	; 4
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	15 97       	sbiw	r26, 0x05	; 5
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     a7e:	11 86       	std	Z+9, r1	; 0x09
     a80:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     a82:	88 81       	ld	r24, Y
     a84:	81 50       	subi	r24, 0x01	; 1
     a86:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <task2>:

void task2(void *pv)
{
	while(1)
	{
		vTaskSuspendAll();
     a8e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
		++x;
     a92:	80 91 04 04 	lds	r24, 0x0404
     a96:	90 91 05 04 	lds	r25, 0x0405
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	90 93 05 04 	sts	0x0405, r25
     aa0:	80 93 04 04 	sts	0x0404, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	91 ee       	ldi	r25, 0xE1	; 225
     aa8:	a4 e0       	ldi	r26, 0x04	; 4
     aaa:	81 50       	subi	r24, 0x01	; 1
     aac:	90 40       	sbci	r25, 0x00	; 0
     aae:	a0 40       	sbci	r26, 0x00	; 0
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <task2+0x1c>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <task2+0x26>
     ab4:	00 00       	nop
		_delay_ms(200);
		++y;
     ab6:	80 91 06 04 	lds	r24, 0x0406
     aba:	90 91 07 04 	lds	r25, 0x0407
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	90 93 07 04 	sts	0x0407, r25
     ac4:	80 93 06 04 	sts	0x0406, r24
		xTaskResumeAll();
     ac8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
     acc:	e0 cf       	rjmp	.-64     	; 0xa8e <task2>

00000ace <task1>:
		
	}
}
void task1(void *pv)
{
	DDRD|=(1<<7);
     ace:	8f 9a       	sbi	0x11, 7	; 17
	while(1)
	{
		if(x==y)
     ad0:	20 91 04 04 	lds	r18, 0x0404
     ad4:	30 91 05 04 	lds	r19, 0x0405
     ad8:	80 91 06 04 	lds	r24, 0x0406
     adc:	90 91 07 04 	lds	r25, 0x0407
     ae0:	28 17       	cp	r18, r24
     ae2:	39 07       	cpc	r19, r25
     ae4:	19 f4       	brne	.+6      	; 0xaec <task1+0x1e>
		{
			PORTD^=(1<<7);
     ae6:	82 b3       	in	r24, 0x12	; 18
     ae8:	80 58       	subi	r24, 0x80	; 128
     aea:	82 bb       	out	0x12, r24	; 18
		}
		vTaskDelay(100);
     aec:	84 e6       	ldi	r24, 0x64	; 100
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 22 10 	call	0x2044	; 0x2044 <vTaskDelay>
	}
     af4:	ed cf       	rjmp	.-38     	; 0xad0 <task1+0x2>

00000af6 <main>:
void task1(void *pv);
void task2 (void *pv);
int main(void)
{
	/* create the tasks */
	xTaskCreate(task1,"M",100,NULL,2,NULL);
     af6:	87 e6       	ldi	r24, 0x67	; 103
     af8:	95 e0       	ldi	r25, 0x05	; 5
     afa:	62 e6       	ldi	r22, 0x62	; 98
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	44 e6       	ldi	r20, 0x64	; 100
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	02 e0       	ldi	r16, 0x02	; 2
     b08:	ee 24       	eor	r14, r14
     b0a:	ff 24       	eor	r15, r15
     b0c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <xTaskCreate>
	xTaskCreate(task2,"N",100,NULL,1,NULL);
     b10:	87 e4       	ldi	r24, 0x47	; 71
     b12:	95 e0       	ldi	r25, 0x05	; 5
     b14:	64 e6       	ldi	r22, 0x64	; 100
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	44 e6       	ldi	r20, 0x64	; 100
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	01 e0       	ldi	r16, 0x01	; 1
     b22:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <xTaskCreate>
	/* start os*/
	vTaskStartScheduler();
     b26:	0e 94 75 0e 	call	0x1cea	; 0x1cea <vTaskStartScheduler>
     b2a:	ff cf       	rjmp	.-2      	; 0xb2a <main+0x34>

00000b2c <pxPortInitialiseStack>:
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     b2c:	21 e1       	ldi	r18, 0x11	; 17
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	32 e2       	ldi	r19, 0x22	; 34
     b36:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
     b38:	fc 01       	movw	r30, r24
     b3a:	32 97       	sbiw	r30, 0x02	; 2
     b3c:	a3 e3       	ldi	r26, 0x33	; 51
     b3e:	a0 83       	st	Z, r26
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     b40:	fc 01       	movw	r30, r24
     b42:	33 97       	sbiw	r30, 0x03	; 3
     b44:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     b46:	fc 01       	movw	r30, r24
     b48:	34 97       	sbiw	r30, 0x04	; 4
     b4a:	70 83       	st	Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
     b4c:	fc 01       	movw	r30, r24
     b4e:	35 97       	sbiw	r30, 0x05	; 5
     b50:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     b52:	fc 01       	movw	r30, r24
     b54:	36 97       	sbiw	r30, 0x06	; 6
     b56:	60 e8       	ldi	r22, 0x80	; 128
     b58:	60 83       	st	Z, r22
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
     b5a:	fc 01       	movw	r30, r24
     b5c:	37 97       	sbiw	r30, 0x07	; 7
     b5e:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
     b60:	fc 01       	movw	r30, r24
     b62:	38 97       	sbiw	r30, 0x08	; 8
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
     b68:	fc 01       	movw	r30, r24
     b6a:	39 97       	sbiw	r30, 0x09	; 9
     b6c:	63 e0       	ldi	r22, 0x03	; 3
     b6e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
     b70:	fc 01       	movw	r30, r24
     b72:	3a 97       	sbiw	r30, 0x0a	; 10
     b74:	64 e0       	ldi	r22, 0x04	; 4
     b76:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
     b78:	fc 01       	movw	r30, r24
     b7a:	3b 97       	sbiw	r30, 0x0b	; 11
     b7c:	65 e0       	ldi	r22, 0x05	; 5
     b7e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
     b80:	fc 01       	movw	r30, r24
     b82:	3c 97       	sbiw	r30, 0x0c	; 12
     b84:	66 e0       	ldi	r22, 0x06	; 6
     b86:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
     b88:	fc 01       	movw	r30, r24
     b8a:	3d 97       	sbiw	r30, 0x0d	; 13
     b8c:	67 e0       	ldi	r22, 0x07	; 7
     b8e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
     b90:	fc 01       	movw	r30, r24
     b92:	3e 97       	sbiw	r30, 0x0e	; 14
     b94:	68 e0       	ldi	r22, 0x08	; 8
     b96:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
     b98:	fc 01       	movw	r30, r24
     b9a:	3f 97       	sbiw	r30, 0x0f	; 15
     b9c:	69 e0       	ldi	r22, 0x09	; 9
     b9e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
     ba0:	fc 01       	movw	r30, r24
     ba2:	70 97       	sbiw	r30, 0x10	; 16
     ba4:	60 e1       	ldi	r22, 0x10	; 16
     ba6:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
     ba8:	fc 01       	movw	r30, r24
     baa:	71 97       	sbiw	r30, 0x11	; 17
     bac:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
     bae:	fc 01       	movw	r30, r24
     bb0:	72 97       	sbiw	r30, 0x12	; 18
     bb2:	22 e1       	ldi	r18, 0x12	; 18
     bb4:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
     bb6:	fc 01       	movw	r30, r24
     bb8:	73 97       	sbiw	r30, 0x13	; 19
     bba:	23 e1       	ldi	r18, 0x13	; 19
     bbc:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
     bbe:	fc 01       	movw	r30, r24
     bc0:	74 97       	sbiw	r30, 0x14	; 20
     bc2:	24 e1       	ldi	r18, 0x14	; 20
     bc4:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
     bc6:	fc 01       	movw	r30, r24
     bc8:	75 97       	sbiw	r30, 0x15	; 21
     bca:	25 e1       	ldi	r18, 0x15	; 21
     bcc:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
     bce:	fc 01       	movw	r30, r24
     bd0:	76 97       	sbiw	r30, 0x16	; 22
     bd2:	26 e1       	ldi	r18, 0x16	; 22
     bd4:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
     bd6:	fc 01       	movw	r30, r24
     bd8:	77 97       	sbiw	r30, 0x17	; 23
     bda:	27 e1       	ldi	r18, 0x17	; 23
     bdc:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
     bde:	fc 01       	movw	r30, r24
     be0:	78 97       	sbiw	r30, 0x18	; 24
     be2:	28 e1       	ldi	r18, 0x18	; 24
     be4:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
     be6:	fc 01       	movw	r30, r24
     be8:	79 97       	sbiw	r30, 0x19	; 25
     bea:	29 e1       	ldi	r18, 0x19	; 25
     bec:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
     bee:	fc 01       	movw	r30, r24
     bf0:	7a 97       	sbiw	r30, 0x1a	; 26
     bf2:	20 e2       	ldi	r18, 0x20	; 32
     bf4:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
     bf6:	fc 01       	movw	r30, r24
     bf8:	7b 97       	sbiw	r30, 0x1b	; 27
     bfa:	21 e2       	ldi	r18, 0x21	; 33
     bfc:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
     bfe:	fc 01       	movw	r30, r24
     c00:	7c 97       	sbiw	r30, 0x1c	; 28
     c02:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
     c04:	fc 01       	movw	r30, r24
     c06:	7d 97       	sbiw	r30, 0x1d	; 29
     c08:	23 e2       	ldi	r18, 0x23	; 35
     c0a:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     c0c:	fc 01       	movw	r30, r24
     c0e:	7e 97       	sbiw	r30, 0x1e	; 30
     c10:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     c12:	fc 01       	movw	r30, r24
     c14:	7f 97       	sbiw	r30, 0x1f	; 31
     c16:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
     c18:	fc 01       	movw	r30, r24
     c1a:	b0 97       	sbiw	r30, 0x20	; 32
     c1c:	26 e2       	ldi	r18, 0x26	; 38
     c1e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
     c20:	fc 01       	movw	r30, r24
     c22:	b1 97       	sbiw	r30, 0x21	; 33
     c24:	27 e2       	ldi	r18, 0x27	; 39
     c26:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
     c28:	fc 01       	movw	r30, r24
     c2a:	b2 97       	sbiw	r30, 0x22	; 34
     c2c:	28 e2       	ldi	r18, 0x28	; 40
     c2e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
     c30:	fc 01       	movw	r30, r24
     c32:	b3 97       	sbiw	r30, 0x23	; 35
     c34:	29 e2       	ldi	r18, 0x29	; 41
     c36:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
     c38:	fc 01       	movw	r30, r24
     c3a:	b4 97       	sbiw	r30, 0x24	; 36
     c3c:	20 e3       	ldi	r18, 0x30	; 48
     c3e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
     c40:	fc 01       	movw	r30, r24
     c42:	b5 97       	sbiw	r30, 0x25	; 37
     c44:	21 e3       	ldi	r18, 0x31	; 49
     c46:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     c48:	86 97       	sbiw	r24, 0x26	; 38
}
     c4a:	08 95       	ret

00000c4c <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
     c4c:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
     c4e:	8c e7       	ldi	r24, 0x7C	; 124
     c50:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
     c52:	8b e0       	ldi	r24, 0x0B	; 11
     c54:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
     c56:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     c58:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
     c5a:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     c5c:	a0 91 95 03 	lds	r26, 0x0395
     c60:	b0 91 96 03 	lds	r27, 0x0396
     c64:	cd 91       	ld	r28, X+
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	dd 91       	ld	r29, X+
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	ff 91       	pop	r31
     c6e:	ef 91       	pop	r30
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	8f 90       	pop	r8
     c9c:	7f 90       	pop	r7
     c9e:	6f 90       	pop	r6
     ca0:	5f 90       	pop	r5
     ca2:	4f 90       	pop	r4
     ca4:	3f 90       	pop	r3
     ca6:	2f 90       	pop	r2
     ca8:	1f 90       	pop	r1
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     cb0:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	08 95       	ret

00000cb6 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     cb6:	08 95       	ret

00000cb8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	0f 92       	push	r0
     cc0:	1f 92       	push	r1
     cc2:	11 24       	eor	r1, r1
     cc4:	2f 92       	push	r2
     cc6:	3f 92       	push	r3
     cc8:	4f 92       	push	r4
     cca:	5f 92       	push	r5
     ccc:	6f 92       	push	r6
     cce:	7f 92       	push	r7
     cd0:	8f 92       	push	r8
     cd2:	9f 92       	push	r9
     cd4:	af 92       	push	r10
     cd6:	bf 92       	push	r11
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
     d00:	a0 91 95 03 	lds	r26, 0x0395
     d04:	b0 91 96 03 	lds	r27, 0x0396
     d08:	0d b6       	in	r0, 0x3d	; 61
     d0a:	0d 92       	st	X+, r0
     d0c:	0e b6       	in	r0, 0x3e	; 62
     d0e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d10:	0e 94 75 10 	call	0x20ea	; 0x20ea <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d14:	a0 91 95 03 	lds	r26, 0x0395
     d18:	b0 91 96 03 	lds	r27, 0x0396
     d1c:	cd 91       	ld	r28, X+
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	dd 91       	ld	r29, X+
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	bf 91       	pop	r27
     d2e:	af 91       	pop	r26
     d30:	9f 91       	pop	r25
     d32:	8f 91       	pop	r24
     d34:	7f 91       	pop	r23
     d36:	6f 91       	pop	r22
     d38:	5f 91       	pop	r21
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	bf 90       	pop	r11
     d4e:	af 90       	pop	r10
     d50:	9f 90       	pop	r9
     d52:	8f 90       	pop	r8
     d54:	7f 90       	pop	r7
     d56:	6f 90       	pop	r6
     d58:	5f 90       	pop	r5
     d5a:	4f 90       	pop	r4
     d5c:	3f 90       	pop	r3
     d5e:	2f 90       	pop	r2
     d60:	1f 90       	pop	r1
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0

	asm volatile ( "ret" );
     d68:	08 95       	ret

00000d6a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	0f 92       	push	r0
     d72:	1f 92       	push	r1
     d74:	11 24       	eor	r1, r1
     d76:	2f 92       	push	r2
     d78:	3f 92       	push	r3
     d7a:	4f 92       	push	r4
     d7c:	5f 92       	push	r5
     d7e:	6f 92       	push	r6
     d80:	7f 92       	push	r7
     d82:	8f 92       	push	r8
     d84:	9f 92       	push	r9
     d86:	af 92       	push	r10
     d88:	bf 92       	push	r11
     d8a:	cf 92       	push	r12
     d8c:	df 92       	push	r13
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
     db2:	a0 91 95 03 	lds	r26, 0x0395
     db6:	b0 91 96 03 	lds	r27, 0x0396
     dba:	0d b6       	in	r0, 0x3d	; 61
     dbc:	0d 92       	st	X+, r0
     dbe:	0e b6       	in	r0, 0x3e	; 62
     dc0:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     dc2:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <xTaskIncrementTick>
     dc6:	88 23       	and	r24, r24
     dc8:	11 f0       	breq	.+4      	; 0xdce <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
     dca:	0e 94 75 10 	call	0x20ea	; 0x20ea <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     dce:	a0 91 95 03 	lds	r26, 0x0395
     dd2:	b0 91 96 03 	lds	r27, 0x0396
     dd6:	cd 91       	ld	r28, X+
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	dd 91       	ld	r29, X+
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	ff 91       	pop	r31
     de0:	ef 91       	pop	r30
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	bf 91       	pop	r27
     de8:	af 91       	pop	r26
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	7f 91       	pop	r23
     df0:	6f 91       	pop	r22
     df2:	5f 91       	pop	r21
     df4:	4f 91       	pop	r20
     df6:	3f 91       	pop	r19
     df8:	2f 91       	pop	r18
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	df 90       	pop	r13
     e04:	cf 90       	pop	r12
     e06:	bf 90       	pop	r11
     e08:	af 90       	pop	r10
     e0a:	9f 90       	pop	r9
     e0c:	8f 90       	pop	r8
     e0e:	7f 90       	pop	r7
     e10:	6f 90       	pop	r6
     e12:	5f 90       	pop	r5
     e14:	4f 90       	pop	r4
     e16:	3f 90       	pop	r3
     e18:	2f 90       	pop	r2
     e1a:	1f 90       	pop	r1
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e22:	08 95       	ret

00000e24 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     e24:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYieldFromTick>
		asm volatile ( "reti" );
     e28:	18 95       	reti

00000e2a <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     e30:	fc 01       	movw	r30, r24
     e32:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63

	taskENTER_CRITICAL();
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
		{
			xReturn = pdTRUE;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	91 11       	cpse	r25, r1
     e3c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	taskEXIT_CRITICAL();

	return xReturn;
}
     e3e:	08 95       	ret

00000e40 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     e40:	fc 01       	movw	r30, r24
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     e42:	44 8d       	ldd	r20, Z+28	; 0x1c
     e44:	44 23       	and	r20, r20
     e46:	c1 f0       	breq	.+48     	; 0xe78 <prvCopyDataFromQueue+0x38>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     e48:	26 81       	ldd	r18, Z+6	; 0x06
     e4a:	37 81       	ldd	r19, Z+7	; 0x07
     e4c:	24 0f       	add	r18, r20
     e4e:	31 1d       	adc	r19, r1
     e50:	37 83       	std	Z+7, r19	; 0x07
     e52:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     e54:	a2 81       	ldd	r26, Z+2	; 0x02
     e56:	b3 81       	ldd	r27, Z+3	; 0x03
     e58:	2a 17       	cp	r18, r26
     e5a:	3b 07       	cpc	r19, r27
     e5c:	20 f0       	brcs	.+8      	; 0xe66 <prvCopyDataFromQueue+0x26>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     e5e:	20 81       	ld	r18, Z
     e60:	31 81       	ldd	r19, Z+1	; 0x01
     e62:	37 83       	std	Z+7, r19	; 0x07
     e64:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     e66:	36 81       	ldd	r19, Z+6	; 0x06
     e68:	27 81       	ldd	r18, Z+7	; 0x07
     e6a:	86 2f       	mov	r24, r22
     e6c:	97 2f       	mov	r25, r23
     e6e:	63 2f       	mov	r22, r19
     e70:	72 2f       	mov	r23, r18
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <memcpy>
     e78:	08 95       	ret

00000e7a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	8c 01       	movw	r16, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
     e8c:	fc 01       	movw	r30, r24
     e8e:	c6 8d       	ldd	r28, Z+30	; 0x1e

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     e90:	1c 16       	cp	r1, r28
     e92:	cc f4       	brge	.+50     	; 0xec6 <prvUnlockQueue+0x4c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     e94:	81 89       	ldd	r24, Z+17	; 0x11
     e96:	88 23       	and	r24, r24
     e98:	31 f4       	brne	.+12     	; 0xea6 <prvUnlockQueue+0x2c>
     e9a:	15 c0       	rjmp	.+42     	; 0xec6 <prvUnlockQueue+0x4c>
     e9c:	f8 01       	movw	r30, r16
     e9e:	81 89       	ldd	r24, Z+17	; 0x11
     ea0:	88 23       	and	r24, r24
     ea2:	41 f4       	brne	.+16     	; 0xeb4 <prvUnlockQueue+0x3a>
     ea4:	10 c0       	rjmp	.+32     	; 0xec6 <prvUnlockQueue+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     ea6:	0f 2e       	mov	r0, r31
     ea8:	f1 e1       	ldi	r31, 0x11	; 17
     eaa:	ef 2e       	mov	r14, r31
     eac:	ff 24       	eor	r15, r15
     eae:	f0 2d       	mov	r31, r0
     eb0:	e0 0e       	add	r14, r16
     eb2:	f1 1e       	adc	r15, r17
     eb4:	c7 01       	movw	r24, r14
     eb6:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskRemoveFromEventList>
     eba:	88 23       	and	r24, r24
     ebc:	11 f0       	breq	.+4      	; 0xec2 <prvUnlockQueue+0x48>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
     ebe:	0e 94 10 12 	call	0x2420	; 0x2420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
     ec2:	c1 50       	subi	r28, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     ec4:	59 f7       	brne	.-42     	; 0xe9c <prvUnlockQueue+0x22>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	f8 01       	movw	r30, r16
     eca:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
     ed6:	f8 01       	movw	r30, r16
     ed8:	c5 8d       	ldd	r28, Z+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
     eda:	1c 16       	cp	r1, r28
     edc:	c4 f4       	brge	.+48     	; 0xf0e <prvUnlockQueue+0x94>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     ede:	80 85       	ldd	r24, Z+8	; 0x08
     ee0:	88 23       	and	r24, r24
     ee2:	31 f4       	brne	.+12     	; 0xef0 <prvUnlockQueue+0x76>
     ee4:	14 c0       	rjmp	.+40     	; 0xf0e <prvUnlockQueue+0x94>
     ee6:	f8 01       	movw	r30, r16
     ee8:	80 85       	ldd	r24, Z+8	; 0x08
     eea:	88 23       	and	r24, r24
     eec:	39 f4       	brne	.+14     	; 0xefc <prvUnlockQueue+0x82>
     eee:	0f c0       	rjmp	.+30     	; 0xf0e <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     ef0:	ee 24       	eor	r14, r14
     ef2:	ff 24       	eor	r15, r15
     ef4:	68 94       	set
     ef6:	e3 f8       	bld	r14, 3
     ef8:	e0 0e       	add	r14, r16
     efa:	f1 1e       	adc	r15, r17
     efc:	c7 01       	movw	r24, r14
     efe:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskRemoveFromEventList>
     f02:	88 23       	and	r24, r24
     f04:	11 f0       	breq	.+4      	; 0xf0a <prvUnlockQueue+0x90>
				{
					vTaskMissedYield();
     f06:	0e 94 10 12 	call	0x2420	; 0x2420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
     f0a:	c1 50       	subi	r28, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
     f0c:	61 f7       	brne	.-40     	; 0xee6 <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	f8 01       	movw	r30, r16
     f12:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
}
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	08 95       	ret

00000f24 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
     f2e:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     f30:	0a 8d       	ldd	r16, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     f32:	4c 8d       	ldd	r20, Y+28	; 0x1c
     f34:	44 23       	and	r20, r20
     f36:	61 f4       	brne	.+24     	; 0xf50 <prvCopyDataToQueue+0x2c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     f38:	88 81       	ld	r24, Y
     f3a:	99 81       	ldd	r25, Y+1	; 0x01
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	09 f0       	breq	.+2      	; 0xf42 <prvCopyDataToQueue+0x1e>
     f40:	42 c0       	rjmp	.+132    	; 0xfc6 <prvCopyDataToQueue+0xa2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     f4a:	1b 82       	std	Y+3, r1	; 0x03
     f4c:	1a 82       	std	Y+2, r1	; 0x02
     f4e:	42 c0       	rjmp	.+132    	; 0xfd4 <prvCopyDataToQueue+0xb0>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     f50:	11 23       	and	r17, r17
     f52:	b9 f4       	brne	.+46     	; 0xf82 <prvCopyDataToQueue+0x5e>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	9d 81       	ldd	r25, Y+5	; 0x05
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     f5e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	82 0f       	add	r24, r18
     f66:	91 1d       	adc	r25, r1
     f68:	9d 83       	std	Y+5, r25	; 0x05
     f6a:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     f6c:	2a 81       	ldd	r18, Y+2	; 0x02
     f6e:	3b 81       	ldd	r19, Y+3	; 0x03
     f70:	82 17       	cp	r24, r18
     f72:	93 07       	cpc	r25, r19
     f74:	50 f1       	brcs	.+84     	; 0xfca <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     f76:	88 81       	ld	r24, Y
     f78:	99 81       	ldd	r25, Y+1	; 0x01
     f7a:	9d 83       	std	Y+5, r25	; 0x05
     f7c:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	29 c0       	rjmp	.+82     	; 0xfd4 <prvCopyDataToQueue+0xb0>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     f82:	8e 81       	ldd	r24, Y+6	; 0x06
     f84:	9f 81       	ldd	r25, Y+7	; 0x07
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     f8c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	50 95       	com	r21
     f92:	41 95       	neg	r20
     f94:	5f 4f       	sbci	r21, 0xFF	; 255
     f96:	8e 81       	ldd	r24, Y+6	; 0x06
     f98:	9f 81       	ldd	r25, Y+7	; 0x07
     f9a:	84 0f       	add	r24, r20
     f9c:	95 1f       	adc	r25, r21
     f9e:	9f 83       	std	Y+7, r25	; 0x07
     fa0:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     fa2:	28 81       	ld	r18, Y
     fa4:	39 81       	ldd	r19, Y+1	; 0x01
     fa6:	82 17       	cp	r24, r18
     fa8:	93 07       	cpc	r25, r19
     faa:	30 f4       	brcc	.+12     	; 0xfb8 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	84 0f       	add	r24, r20
     fb2:	95 1f       	adc	r25, r21
     fb4:	9f 83       	std	Y+7, r25	; 0x07
     fb6:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     fb8:	12 30       	cpi	r17, 0x02	; 2
     fba:	49 f4       	brne	.+18     	; 0xfce <prvCopyDataToQueue+0xaa>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     fbc:	00 23       	and	r16, r16
     fbe:	49 f0       	breq	.+18     	; 0xfd2 <prvCopyDataToQueue+0xae>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
     fc0:	01 50       	subi	r16, 0x01	; 1
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	07 c0       	rjmp	.+14     	; 0xfd4 <prvCopyDataToQueue+0xb0>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	05 c0       	rjmp	.+10     	; 0xfd4 <prvCopyDataToQueue+0xb0>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <prvCopyDataToQueue+0xb0>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <prvCopyDataToQueue+0xb0>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
     fd4:	0f 5f       	subi	r16, 0xFF	; 255
     fd6:	0a 8f       	std	Y+26, r16	; 0x1a

	return xReturn;
}
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     fee:	48 81       	ld	r20, Y
     ff0:	59 81       	ldd	r21, Y+1	; 0x01
     ff2:	2b 8d       	ldd	r18, Y+27	; 0x1b
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	2e 9f       	mul	r18, r30
     ffc:	c0 01       	movw	r24, r0
     ffe:	2f 9f       	mul	r18, r31
    1000:	90 0d       	add	r25, r0
    1002:	3e 9f       	mul	r19, r30
    1004:	90 0d       	add	r25, r0
    1006:	11 24       	eor	r1, r1
    1008:	84 0f       	add	r24, r20
    100a:	95 1f       	adc	r25, r21
    100c:	9b 83       	std	Y+3, r25	; 0x03
    100e:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1010:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1012:	5d 83       	std	Y+5, r21	; 0x05
    1014:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1016:	c9 01       	movw	r24, r18
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	e8 9f       	mul	r30, r24
    101c:	90 01       	movw	r18, r0
    101e:	e9 9f       	mul	r30, r25
    1020:	30 0d       	add	r19, r0
    1022:	f8 9f       	mul	r31, r24
    1024:	30 0d       	add	r19, r0
    1026:	11 24       	eor	r1, r1
    1028:	24 0f       	add	r18, r20
    102a:	35 1f       	adc	r19, r21
    102c:	3f 83       	std	Y+7, r19	; 0x07
    102e:	2e 83       	std	Y+6, r18	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    1034:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1036:	66 23       	and	r22, r22
    1038:	61 f4       	brne	.+24     	; 0x1052 <xQueueGenericReset+0x70>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    103a:	88 85       	ldd	r24, Y+8	; 0x08
    103c:	88 23       	and	r24, r24
    103e:	89 f0       	breq	.+34     	; 0x1062 <xQueueGenericReset+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1040:	ce 01       	movw	r24, r28
    1042:	08 96       	adiw	r24, 0x08	; 8
    1044:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskRemoveFromEventList>
    1048:	88 23       	and	r24, r24
    104a:	59 f0       	breq	.+22     	; 0x1062 <xQueueGenericReset+0x80>
				{
					queueYIELD_IF_USING_PREEMPTION();
    104c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
    1050:	08 c0       	rjmp	.+16     	; 0x1062 <xQueueGenericReset+0x80>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1052:	ce 01       	movw	r24, r28
    1054:	08 96       	adiw	r24, 0x08	; 8
    1056:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    105a:	ce 01       	movw	r24, r28
    105c:	41 96       	adiw	r24, 0x11	; 17
    105e:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	08 2f       	mov	r16, r24
    1078:	16 2f       	mov	r17, r22
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    107a:	66 23       	and	r22, r22
    107c:	21 f0       	breq	.+8      	; 0x1086 <xQueueGenericCreate+0x18>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    107e:	68 9f       	mul	r22, r24
    1080:	c0 01       	movw	r24, r0
    1082:	11 24       	eor	r1, r1
    1084:	02 c0       	rjmp	.+4      	; 0x108a <xQueueGenericCreate+0x1c>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    108a:	4f 96       	adiw	r24, 0x1f	; 31
    108c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <pvPortMalloc>
    1090:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	71 f0       	breq	.+28     	; 0x10b2 <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    1096:	11 23       	and	r17, r17
    1098:	19 f4       	brne	.+6      	; 0x10a0 <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    109a:	99 83       	std	Y+1, r25	; 0x01
    109c:	88 83       	st	Y, r24
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <xQueueGenericCreate+0x38>

		if( pxNewQueue != NULL )
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    10a0:	4f 96       	adiw	r24, 0x1f	; 31
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    10a2:	99 83       	std	Y+1, r25	; 0x01
    10a4:	88 83       	st	Y, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    10a6:	0b 8f       	std	Y+27, r16	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    10a8:	1c 8f       	std	Y+28, r17	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    10aa:	ce 01       	movw	r24, r28
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
    10b2:	8c 2f       	mov	r24, r28
    10b4:	9d 2f       	mov	r25, r29
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	08 95       	ret

000010c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    10c0:	8f 92       	push	r8
    10c2:	9f 92       	push	r9
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <xQueueGenericSend+0x18>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <xQueueGenericSend+0x1a>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8c 01       	movw	r16, r24
    10e2:	4b 01       	movw	r8, r22
    10e4:	5d 83       	std	Y+5, r21	; 0x05
    10e6:	4c 83       	std	Y+4, r20	; 0x04
    10e8:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    10ea:	ff 24       	eor	r15, r15
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    10ec:	bb 24       	eor	r11, r11
    10ee:	b3 94       	inc	r11
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    10f0:	cc 24       	eor	r12, r12
    10f2:	dd 24       	eor	r13, r13
    10f4:	68 94       	set
    10f6:	c3 f8       	bld	r12, 3
    10f8:	c8 0e       	add	r12, r24
    10fa:	d9 1e       	adc	r13, r25
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1102:	f8 01       	movw	r30, r16
    1104:	92 8d       	ldd	r25, Z+26	; 0x1a
    1106:	83 8d       	ldd	r24, Z+27	; 0x1b
    1108:	98 17       	cp	r25, r24
    110a:	18 f0       	brcs	.+6      	; 0x1112 <xQueueGenericSend+0x52>
    110c:	f2 e0       	ldi	r31, 0x02	; 2
    110e:	ef 16       	cp	r14, r31
    1110:	d1 f4       	brne	.+52     	; 0x1146 <xQueueGenericSend+0x86>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1112:	c8 01       	movw	r24, r16
    1114:	b4 01       	movw	r22, r8
    1116:	4e 2d       	mov	r20, r14
    1118:	0e 94 92 07 	call	0xf24	; 0xf24 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    111c:	f8 01       	movw	r30, r16
    111e:	91 89       	ldd	r25, Z+17	; 0x11
    1120:	99 23       	and	r25, r25
    1122:	49 f0       	breq	.+18     	; 0x1136 <xQueueGenericSend+0x76>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1124:	c8 01       	movw	r24, r16
    1126:	41 96       	adiw	r24, 0x11	; 17
    1128:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskRemoveFromEventList>
    112c:	88 23       	and	r24, r24
    112e:	39 f0       	breq	.+14     	; 0x113e <xQueueGenericSend+0x7e>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1130:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
    1134:	04 c0       	rjmp	.+8      	; 0x113e <xQueueGenericSend+0x7e>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1136:	88 23       	and	r24, r24
    1138:	11 f0       	breq	.+4      	; 0x113e <xQueueGenericSend+0x7e>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    113a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	52 c0       	rjmp	.+164    	; 0x11ea <xQueueGenericSend+0x12a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	21 f4       	brne	.+8      	; 0x1156 <xQueueGenericSend+0x96>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	4a c0       	rjmp	.+148    	; 0x11ea <xQueueGenericSend+0x12a>
				}
				else if( xEntryTimeSet == pdFALSE )
    1156:	ff 20       	and	r15, r15
    1158:	29 f4       	brne	.+10     	; 0x1164 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    115a:	ce 01       	movw	r24, r28
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1162:	fb 2c       	mov	r15, r11
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1168:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	0f 92       	push	r0
    1172:	f8 01       	movw	r30, r16
    1174:	85 8d       	ldd	r24, Z+29	; 0x1d
    1176:	8f 3f       	cpi	r24, 0xFF	; 255
    1178:	09 f4       	brne	.+2      	; 0x117c <xQueueGenericSend+0xbc>
    117a:	15 8e       	std	Z+29, r1	; 0x1d
    117c:	f8 01       	movw	r30, r16
    117e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1180:	8f 3f       	cpi	r24, 0xFF	; 255
    1182:	09 f4       	brne	.+2      	; 0x1186 <xQueueGenericSend+0xc6>
    1184:	16 8e       	std	Z+30, r1	; 0x1e
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    118a:	ce 01       	movw	r24, r28
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	be 01       	movw	r22, r28
    1190:	6c 5f       	subi	r22, 0xFC	; 252
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	0e 94 db 11 	call	0x23b6	; 0x23b6 <xTaskCheckForTimeOut>
    1198:	88 23       	and	r24, r24
    119a:	09 f5       	brne	.+66     	; 0x11de <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    11a2:	f8 01       	movw	r30, r16
    11a4:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    11aa:	f8 01       	movw	r30, r16
    11ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    11ae:	98 17       	cp	r25, r24
    11b0:	81 f4       	brne	.+32     	; 0x11d2 <xQueueGenericSend+0x112>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    11b2:	6c 81       	ldd	r22, Y+4	; 0x04
    11b4:	7d 81       	ldd	r23, Y+5	; 0x05
    11b6:	c6 01       	movw	r24, r12
    11b8:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    11bc:	c8 01       	movw	r24, r16
    11be:	0e 94 3d 07 	call	0xe7a	; 0xe7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    11c2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
    11c6:	88 23       	and	r24, r24
    11c8:	09 f0       	breq	.+2      	; 0x11cc <xQueueGenericSend+0x10c>
    11ca:	98 cf       	rjmp	.-208    	; 0x10fc <xQueueGenericSend+0x3c>
				{
					portYIELD_WITHIN_API();
    11cc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
    11d0:	95 cf       	rjmp	.-214    	; 0x10fc <xQueueGenericSend+0x3c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    11d2:	c8 01       	movw	r24, r16
    11d4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    11d8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
    11dc:	8f cf       	rjmp	.-226    	; 0x10fc <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    11de:	c8 01       	movw	r24, r16
    11e0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    11e4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    11e8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	bf 90       	pop	r11
    1206:	9f 90       	pop	r9
    1208:	8f 90       	pop	r8
    120a:	08 95       	ret

0000120c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	48 2f       	mov	r20, r24
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	0e 94 37 08 	call	0x106e	; 0x106e <xQueueGenericCreate>
    121a:	ec 01       	movw	r28, r24

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
		if( pxNewQueue != NULL )
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	61 f0       	breq	.+24     	; 0x1238 <xQueueCreateMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1220:	1b 82       	std	Y+3, r1	; 0x03
    1222:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1224:	19 82       	std	Y+1, r1	; 0x01
    1226:	18 82       	st	Y, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    1228:	1e 82       	std	Y+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	0e 94 60 08 	call	0x10c0	; 0x10c0 <xQueueGenericSend>

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
		prvInitialiseMutex( pxNewQueue );

		return pxNewQueue;
	}
    1238:	8c 2f       	mov	r24, r28
    123a:	9d 2f       	mov	r25, r29
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	8c 01       	movw	r16, r24
    124e:	7a 01       	movw	r14, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1250:	fc 01       	movw	r30, r24
    1252:	92 8d       	ldd	r25, Z+26	; 0x1a
    1254:	83 8d       	ldd	r24, Z+27	; 0x1b
    1256:	98 17       	cp	r25, r24
    1258:	10 f0       	brcs	.+4      	; 0x125e <xQueueGenericSendFromISR+0x1c>
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	f1 f4       	brne	.+60     	; 0x129a <xQueueGenericSendFromISR+0x58>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    125e:	f8 01       	movw	r30, r16
    1260:	c6 8d       	ldd	r28, Z+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1262:	c8 01       	movw	r24, r16
    1264:	42 2f       	mov	r20, r18
    1266:	0e 94 92 07 	call	0xf24	; 0xf24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    126a:	cf 3f       	cpi	r28, 0xFF	; 255
    126c:	89 f4       	brne	.+34     	; 0x1290 <xQueueGenericSendFromISR+0x4e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    126e:	f8 01       	movw	r30, r16
    1270:	81 89       	ldd	r24, Z+17	; 0x11
    1272:	88 23       	and	r24, r24
    1274:	a1 f0       	breq	.+40     	; 0x129e <xQueueGenericSendFromISR+0x5c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1276:	c8 01       	movw	r24, r16
    1278:	41 96       	adiw	r24, 0x11	; 17
    127a:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskRemoveFromEventList>
    127e:	88 23       	and	r24, r24
    1280:	81 f0       	breq	.+32     	; 0x12a2 <xQueueGenericSendFromISR+0x60>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1282:	e1 14       	cp	r14, r1
    1284:	f1 04       	cpc	r15, r1
    1286:	79 f0       	breq	.+30     	; 0x12a6 <xQueueGenericSendFromISR+0x64>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	f7 01       	movw	r30, r14
    128c:	80 83       	st	Z, r24
    128e:	0c c0       	rjmp	.+24     	; 0x12a8 <xQueueGenericSendFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1290:	cf 5f       	subi	r28, 0xFF	; 255
    1292:	f8 01       	movw	r30, r16
    1294:	c6 8f       	std	Z+30, r28	; 0x1e
			}

			xReturn = pdPASS;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <xQueueGenericSendFromISR+0x66>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	05 c0       	rjmp	.+10     	; 0x12a8 <xQueueGenericSendFromISR+0x66>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <xQueueGenericSendFromISR+0x66>
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <xQueueGenericSendFromISR+0x66>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret

000012b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	fc 01       	movw	r30, r24
    12ba:	eb 01       	movw	r28, r22
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    12bc:	82 8d       	ldd	r24, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    12be:	93 8d       	ldd	r25, Z+27	; 0x1b
    12c0:	89 17       	cp	r24, r25
    12c2:	b8 f4       	brcc	.+46     	; 0x12f2 <xQueueGiveFromISR+0x3e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    12c4:	96 8d       	ldd	r25, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    12ca:	9f 3f       	cpi	r25, 0xFF	; 255
    12cc:	71 f4       	brne	.+28     	; 0x12ea <xQueueGiveFromISR+0x36>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    12ce:	81 89       	ldd	r24, Z+17	; 0x11
    12d0:	88 23       	and	r24, r24
    12d2:	89 f0       	breq	.+34     	; 0x12f6 <xQueueGiveFromISR+0x42>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    12d4:	cf 01       	movw	r24, r30
    12d6:	41 96       	adiw	r24, 0x11	; 17
    12d8:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskRemoveFromEventList>
    12dc:	88 23       	and	r24, r24
    12de:	69 f0       	breq	.+26     	; 0x12fa <xQueueGiveFromISR+0x46>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    12e0:	20 97       	sbiw	r28, 0x00	; 0
    12e2:	69 f0       	breq	.+26     	; 0x12fe <xQueueGiveFromISR+0x4a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	88 83       	st	Y, r24
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <xQueueGiveFromISR+0x4c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    12ea:	9f 5f       	subi	r25, 0xFF	; 255
    12ec:	96 8f       	std	Z+30, r25	; 0x1e
			}

			xReturn = pdPASS;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <xQueueGiveFromISR+0x4c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <xQueueGiveFromISR+0x4c>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <xQueueGiveFromISR+0x4c>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <xQueueGiveFromISR+0x4c>
    12fe:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	00 d0       	rcall	.+0      	; 0x1320 <xQueueGenericReceive+0x1a>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <xQueueGenericReceive+0x1c>
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	7c 01       	movw	r14, r24
    132a:	4b 01       	movw	r8, r22
    132c:	5d 83       	std	Y+5, r21	; 0x05
    132e:	4c 83       	std	Y+4, r20	; 0x04
    1330:	c2 2e       	mov	r12, r18
BaseType_t xEntryTimeSet = pdFALSE;
    1332:	00 e0       	ldi	r16, 0x00	; 0
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1334:	dd 24       	eor	r13, r13
    1336:	d3 94       	inc	r13
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1338:	0f 2e       	mov	r0, r31
    133a:	f1 e1       	ldi	r31, 0x11	; 17
    133c:	af 2e       	mov	r10, r31
    133e:	bb 24       	eor	r11, r11
    1340:	f0 2d       	mov	r31, r0
    1342:	a8 0e       	add	r10, r24
    1344:	b9 1e       	adc	r11, r25
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    134c:	f7 01       	movw	r30, r14
    134e:	12 8d       	ldd	r17, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1350:	11 23       	and	r17, r17
    1352:	99 f1       	breq	.+102    	; 0x13ba <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1354:	a6 80       	ldd	r10, Z+6	; 0x06
    1356:	b7 80       	ldd	r11, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1358:	c7 01       	movw	r24, r14
    135a:	b4 01       	movw	r22, r8
    135c:	0e 94 20 07 	call	0xe40	; 0xe40 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1360:	cc 20       	and	r12, r12
    1362:	c9 f4       	brne	.+50     	; 0x1396 <xQueueGenericReceive+0x90>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1364:	11 50       	subi	r17, 0x01	; 1
    1366:	f7 01       	movw	r30, r14
    1368:	12 8f       	std	Z+26, r17	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	29 f4       	brne	.+10     	; 0x137c <xQueueGenericReceive+0x76>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1372:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <pvTaskIncrementMutexHeldCount>
    1376:	f7 01       	movw	r30, r14
    1378:	93 83       	std	Z+3, r25	; 0x03
    137a:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    137c:	f7 01       	movw	r30, r14
    137e:	80 85       	ldd	r24, Z+8	; 0x08
    1380:	88 23       	and	r24, r24
    1382:	b9 f0       	breq	.+46     	; 0x13b2 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1384:	c7 01       	movw	r24, r14
    1386:	08 96       	adiw	r24, 0x08	; 8
    1388:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskRemoveFromEventList>
    138c:	88 23       	and	r24, r24
    138e:	89 f0       	breq	.+34     	; 0x13b2 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1390:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
    1394:	0e c0       	rjmp	.+28     	; 0x13b2 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1396:	f7 01       	movw	r30, r14
    1398:	b7 82       	std	Z+7, r11	; 0x07
    139a:	a6 82       	std	Z+6, r10	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    139c:	81 89       	ldd	r24, Z+17	; 0x11
    139e:	88 23       	and	r24, r24
    13a0:	41 f0       	breq	.+16     	; 0x13b2 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    13a2:	c7 01       	movw	r24, r14
    13a4:	41 96       	adiw	r24, 0x11	; 17
    13a6:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskRemoveFromEventList>
    13aa:	88 23       	and	r24, r24
    13ac:	11 f0       	breq	.+4      	; 0x13b2 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    13ae:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	61 c0       	rjmp	.+194    	; 0x147c <xQueueGenericReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	21 f4       	brne	.+8      	; 0x13ca <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	59 c0       	rjmp	.+178    	; 0x147c <xQueueGenericReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
    13ca:	00 23       	and	r16, r16
    13cc:	29 f4       	brne	.+10     	; 0x13d8 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    13ce:	ce 01       	movw	r24, r28
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    13d6:	0d 2d       	mov	r16, r13
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    13d8:	0f 90       	pop	r0
    13da:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    13dc:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	0f 92       	push	r0
    13e6:	f7 01       	movw	r30, r14
    13e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    13ea:	8f 3f       	cpi	r24, 0xFF	; 255
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <xQueueGenericReceive+0xea>
    13ee:	15 8e       	std	Z+29, r1	; 0x1d
    13f0:	f7 01       	movw	r30, r14
    13f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    13f4:	8f 3f       	cpi	r24, 0xFF	; 255
    13f6:	09 f4       	brne	.+2      	; 0x13fa <xQueueGenericReceive+0xf4>
    13f8:	16 8e       	std	Z+30, r1	; 0x1e
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    13fe:	ce 01       	movw	r24, r28
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	be 01       	movw	r22, r28
    1404:	6c 5f       	subi	r22, 0xFC	; 252
    1406:	7f 4f       	sbci	r23, 0xFF	; 255
    1408:	0e 94 db 11 	call	0x23b6	; 0x23b6 <xTaskCheckForTimeOut>
    140c:	88 23       	and	r24, r24
    140e:	51 f5       	brne	.+84     	; 0x1464 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1410:	c7 01       	movw	r24, r14
    1412:	0e 94 15 07 	call	0xe2a	; 0xe2a <prvIsQueueEmpty>
    1416:	88 23       	and	r24, r24
    1418:	f9 f0       	breq	.+62     	; 0x1458 <xQueueGenericReceive+0x152>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    141a:	f7 01       	movw	r30, r14
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	51 f4       	brne	.+20     	; 0x1438 <xQueueGenericReceive+0x132>
					{
						taskENTER_CRITICAL();
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    142a:	f7 01       	movw	r30, r14
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	0e 94 19 12 	call	0x2432	; 0x2432 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1438:	6c 81       	ldd	r22, Y+4	; 0x04
    143a:	7d 81       	ldd	r23, Y+5	; 0x05
    143c:	c5 01       	movw	r24, r10
    143e:	0e 94 20 11 	call	0x2240	; 0x2240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1442:	c7 01       	movw	r24, r14
    1444:	0e 94 3d 07 	call	0xe7a	; 0xe7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1448:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
    144c:	88 23       	and	r24, r24
    144e:	09 f0       	breq	.+2      	; 0x1452 <xQueueGenericReceive+0x14c>
    1450:	7a cf       	rjmp	.-268    	; 0x1346 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
    1452:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
    1456:	77 cf       	rjmp	.-274    	; 0x1346 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1458:	c7 01       	movw	r24, r14
    145a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    145e:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
    1462:	71 cf       	rjmp	.-286    	; 0x1346 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1464:	c7 01       	movw	r24, r14
    1466:	0e 94 3d 07 	call	0xe7a	; 0xe7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    146a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    146e:	c7 01       	movw	r24, r14
    1470:	0e 94 15 07 	call	0xe2a	; 0xe2a <prvIsQueueEmpty>
    1474:	88 23       	and	r24, r24
    1476:	09 f4       	brne	.+2      	; 0x147a <xQueueGenericReceive+0x174>
    1478:	66 cf       	rjmp	.-308    	; 0x1346 <xQueueGenericReceive+0x40>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    147a:	80 e0       	ldi	r24, 0x00	; 0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	cf 90       	pop	r12
    1496:	bf 90       	pop	r11
    1498:	af 90       	pop	r10
    149a:	9f 90       	pop	r9
    149c:	8f 90       	pop	r8
    149e:	08 95       	ret

000014a0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	8c 01       	movw	r16, r24
    14ae:	7a 01       	movw	r14, r20
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    14b0:	fc 01       	movw	r30, r24
    14b2:	c2 8d       	ldd	r28, Z+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    14b4:	cc 23       	and	r28, r28
    14b6:	e9 f0       	breq	.+58     	; 0x14f2 <xQueueReceiveFromISR+0x52>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    14b8:	d5 8d       	ldd	r29, Z+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    14ba:	0e 94 20 07 	call	0xe40	; 0xe40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    14be:	c1 50       	subi	r28, 0x01	; 1
    14c0:	f8 01       	movw	r30, r16
    14c2:	c2 8f       	std	Z+26, r28	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    14c4:	df 3f       	cpi	r29, 0xFF	; 255
    14c6:	81 f4       	brne	.+32     	; 0x14e8 <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    14c8:	80 85       	ldd	r24, Z+8	; 0x08
    14ca:	88 23       	and	r24, r24
    14cc:	a1 f0       	breq	.+40     	; 0x14f6 <xQueueReceiveFromISR+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    14ce:	c8 01       	movw	r24, r16
    14d0:	08 96       	adiw	r24, 0x08	; 8
    14d2:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskRemoveFromEventList>
    14d6:	88 23       	and	r24, r24
    14d8:	81 f0       	breq	.+32     	; 0x14fa <xQueueReceiveFromISR+0x5a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    14da:	e1 14       	cp	r14, r1
    14dc:	f1 04       	cpc	r15, r1
    14de:	79 f0       	breq	.+30     	; 0x14fe <xQueueReceiveFromISR+0x5e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	f7 01       	movw	r30, r14
    14e4:	80 83       	st	Z, r24
    14e6:	0c c0       	rjmp	.+24     	; 0x1500 <xQueueReceiveFromISR+0x60>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    14e8:	df 5f       	subi	r29, 0xFF	; 255
    14ea:	f8 01       	movw	r30, r16
    14ec:	d5 8f       	std	Z+29, r29	; 0x1d
			}

			xReturn = pdPASS;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	07 c0       	rjmp	.+14     	; 0x1500 <xQueueReceiveFromISR+0x60>
		}
		else
		{
			xReturn = pdFAIL;
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <xQueueReceiveFromISR+0x60>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
			}

			xReturn = pdPASS;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <xQueueReceiveFromISR+0x60>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <xQueueReceiveFromISR+0x60>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	08 95       	ret

0000150e <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1518:	8a 8d       	ldd	r24, Y+26	; 0x1a
    151a:	88 23       	and	r24, r24
    151c:	49 f0       	breq	.+18     	; 0x1530 <xQueuePeekFromISR+0x22>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    151e:	0e 81       	ldd	r16, Y+6	; 0x06
    1520:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1522:	ce 01       	movw	r24, r28
    1524:	0e 94 20 07 	call	0xe40	; 0xe40 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1528:	1f 83       	std	Y+7, r17	; 0x07
    152a:	0e 83       	std	Y+6, r16	; 0x06

			xReturn = pdPASS;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <xQueuePeekFromISR+0x24>
		}
		else
		{
			xReturn = pdFAIL;
    1530:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1542:	fc 01       	movw	r30, r24
    1544:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    154a:	08 95       	ret

0000154c <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    154c:	fc 01       	movw	r30, r24
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    1554:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    155a:	83 8d       	ldd	r24, Z+27	; 0x1b
	}
	taskEXIT_CRITICAL();

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    155c:	89 1b       	sub	r24, r25
    155e:	08 95       	ret

00001560 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1560:	fc 01       	movw	r30, r24
    1562:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1564:	08 95       	ret

00001566 <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1566:	fc 01       	movw	r30, r24
    1568:	92 8d       	ldd	r25, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	91 11       	cpse	r25, r1
    156e:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1570:	08 95       	ret

00001572 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    1572:	fc 01       	movw	r30, r24
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    1574:	22 8d       	ldd	r18, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	93 8d       	ldd	r25, Z+27	; 0x1b
    157a:	29 13       	cpse	r18, r25
    157c:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    157e:	08 95       	ret

00001580 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1580:	dc 01       	movw	r26, r24

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    1582:	80 91 08 04 	lds	r24, 0x0408
    1586:	90 91 09 04 	lds	r25, 0x0409
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	51 f0       	breq	.+20     	; 0x15a2 <vQueueAddToRegistry+0x22>
    158e:	ec e0       	ldi	r30, 0x0C	; 12
    1590:	f4 e0       	ldi	r31, 0x04	; 4
    1592:	21 e0       	ldi	r18, 0x01	; 1
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	a9 01       	movw	r20, r18
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	79 f4       	brne	.+30     	; 0x15be <vQueueAddToRegistry+0x3e>
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <vQueueAddToRegistry+0x26>
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	50 e0       	ldi	r21, 0x00	; 0
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    15a6:	fa 01       	movw	r30, r20
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	ee 0f       	add	r30, r30
    15ae:	ff 1f       	adc	r31, r31
    15b0:	e8 5f       	subi	r30, 0xF8	; 248
    15b2:	fb 4f       	sbci	r31, 0xFB	; 251
    15b4:	71 83       	std	Z+1, r23	; 0x01
    15b6:	60 83       	st	Z, r22
				xQueueRegistry[ ux ].xHandle = xQueue;
    15b8:	b3 83       	std	Z+3, r27	; 0x03
    15ba:	a2 83       	std	Z+2, r26	; 0x02

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    15bc:	08 95       	ret
    15be:	2f 5f       	subi	r18, 0xFF	; 255
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    15c4:	28 30       	cpi	r18, 0x08	; 8
    15c6:	31 05       	cpc	r19, r1
    15c8:	31 f7       	brne	.-52     	; 0x1596 <vQueueAddToRegistry+0x16>
    15ca:	08 95       	ret

000015cc <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    15cc:	ac 01       	movw	r20, r24

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    15ce:	80 91 0a 04 	lds	r24, 0x040A
    15d2:	90 91 0b 04 	lds	r25, 0x040B
    15d6:	84 17       	cp	r24, r20
    15d8:	95 07       	cpc	r25, r21
    15da:	59 f0       	breq	.+22     	; 0x15f2 <pcQueueGetName+0x26>
    15dc:	ee e0       	ldi	r30, 0x0E	; 14
    15de:	f4 e0       	ldi	r31, 0x04	; 4
    15e0:	21 e0       	ldi	r18, 0x01	; 1
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	b9 01       	movw	r22, r18
    15e6:	80 81       	ld	r24, Z
    15e8:	91 81       	ldd	r25, Z+1	; 0x01
    15ea:	84 17       	cp	r24, r20
    15ec:	95 07       	cpc	r25, r21
    15ee:	69 f4       	brne	.+26     	; 0x160a <pcQueueGetName+0x3e>
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <pcQueueGetName+0x2a>
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	70 e0       	ldi	r23, 0x00	; 0
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    15f6:	fb 01       	movw	r30, r22
    15f8:	ee 0f       	add	r30, r30
    15fa:	ff 1f       	adc	r31, r31
    15fc:	ee 0f       	add	r30, r30
    15fe:	ff 1f       	adc	r31, r31
    1600:	e8 5f       	subi	r30, 0xF8	; 248
    1602:	fb 4f       	sbci	r31, 0xFB	; 251
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
				break;
    1608:	08 95       	ret
    160a:	2f 5f       	subi	r18, 0xFF	; 255
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	34 96       	adiw	r30, 0x04	; 4
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1610:	28 30       	cpi	r18, 0x08	; 8
    1612:	31 05       	cpc	r19, r1
    1614:	39 f7       	brne	.-50     	; 0x15e4 <pcQueueGetName+0x18>
#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
	}
    161a:	08 95       	ret

0000161c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    161c:	ac 01       	movw	r20, r24

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    161e:	80 91 0a 04 	lds	r24, 0x040A
    1622:	90 91 0b 04 	lds	r25, 0x040B
    1626:	84 17       	cp	r24, r20
    1628:	95 07       	cpc	r25, r21
    162a:	59 f0       	breq	.+22     	; 0x1642 <vQueueUnregisterQueue+0x26>
    162c:	ee e0       	ldi	r30, 0x0E	; 14
    162e:	f4 e0       	ldi	r31, 0x04	; 4
    1630:	21 e0       	ldi	r18, 0x01	; 1
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	b9 01       	movw	r22, r18
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	84 17       	cp	r24, r20
    163c:	95 07       	cpc	r25, r21
    163e:	79 f4       	brne	.+30     	; 0x165e <vQueueUnregisterQueue+0x42>
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <vQueueUnregisterQueue+0x2a>
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	70 e0       	ldi	r23, 0x00	; 0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    1646:	fb 01       	movw	r30, r22
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	e8 5f       	subi	r30, 0xF8	; 248
    1652:	fb 4f       	sbci	r31, 0xFB	; 251
    1654:	11 82       	std	Z+1, r1	; 0x01
    1656:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    1658:	13 82       	std	Z+3, r1	; 0x03
    165a:	12 82       	std	Z+2, r1	; 0x02
				break;
    165c:	08 95       	ret
    165e:	2f 5f       	subi	r18, 0xFF	; 255
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1664:	28 30       	cpi	r18, 0x08	; 8
    1666:	31 05       	cpc	r19, r1
    1668:	29 f7       	brne	.-54     	; 0x1634 <vQueueUnregisterQueue+0x18>
    166a:	08 95       	ret

0000166c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    1672:	0e 94 0e 0b 	call	0x161c	; 0x161c <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    1676:	ce 01       	movw	r24, r28
    1678:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    1682:	fc 01       	movw	r30, r24

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    1684:	82 85       	ldd	r24, Z+10	; 0x0a
    1686:	93 85       	ldd	r25, Z+11	; 0x0b
    1688:	23 e0       	ldi	r18, 0x03	; 3
    168a:	89 3f       	cpi	r24, 0xF9	; 249
    168c:	92 07       	cpc	r25, r18
    168e:	61 f4       	brne	.+24     	; 0x16a8 <prvTaskIsTaskSuspended+0x26>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    1690:	24 89       	ldd	r18, Z+20	; 0x14
    1692:	35 89       	ldd	r19, Z+21	; 0x15
    1694:	83 e0       	ldi	r24, 0x03	; 3
    1696:	27 3e       	cpi	r18, 0xE7	; 231
    1698:	38 07       	cpc	r19, r24
    169a:	41 f0       	breq	.+16     	; 0x16ac <prvTaskIsTaskSuspended+0x2a>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	21 15       	cp	r18, r1
    16a0:	31 05       	cpc	r19, r1
    16a2:	29 f0       	breq	.+10     	; 0x16ae <prvTaskIsTaskSuspended+0x2c>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	08 95       	ret
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	08 95       	ret
    16ac:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    16ae:	08 95       	ret

000016b0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    16b0:	e0 91 a5 03 	lds	r30, 0x03A5
    16b4:	f0 91 a6 03 	lds	r31, 0x03A6
    16b8:	80 81       	ld	r24, Z
    16ba:	88 23       	and	r24, r24
    16bc:	39 f4       	brne	.+14     	; 0x16cc <prvResetNextTaskUnblockTime+0x1c>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	9f ef       	ldi	r25, 0xFF	; 255
    16c2:	90 93 99 03 	sts	0x0399, r25
    16c6:	80 93 98 03 	sts	0x0398, r24
    16ca:	08 95       	ret
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    16cc:	e0 91 a5 03 	lds	r30, 0x03A5
    16d0:	f0 91 a6 03 	lds	r31, 0x03A6
    16d4:	05 80       	ldd	r0, Z+5	; 0x05
    16d6:	f6 81       	ldd	r31, Z+6	; 0x06
    16d8:	e0 2d       	mov	r30, r0
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    16da:	06 80       	ldd	r0, Z+6	; 0x06
    16dc:	f7 81       	ldd	r31, Z+7	; 0x07
    16de:	e0 2d       	mov	r30, r0
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	90 93 99 03 	sts	0x0399, r25
    16e8:	80 93 98 03 	sts	0x0398, r24
    16ec:	08 95       	ret

000016ee <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
    16fa:	16 2f       	mov	r17, r22
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    16fc:	e0 90 9f 03 	lds	r14, 0x039F
    1700:	f0 90 a0 03 	lds	r15, 0x03A0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1704:	80 91 95 03 	lds	r24, 0x0395
    1708:	90 91 96 03 	lds	r25, 0x0396
    170c:	02 96       	adiw	r24, 0x02	; 2
    170e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	cf 3f       	cpi	r28, 0xFF	; 255
    1716:	d8 07       	cpc	r29, r24
    1718:	69 f4       	brne	.+26     	; 0x1734 <prvAddCurrentTaskToDelayedList+0x46>
    171a:	11 23       	and	r17, r17
    171c:	59 f0       	breq	.+22     	; 0x1734 <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    171e:	60 91 95 03 	lds	r22, 0x0395
    1722:	70 91 96 03 	lds	r23, 0x0396
    1726:	6e 5f       	subi	r22, 0xFE	; 254
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	89 ef       	ldi	r24, 0xF9	; 249
    172c:	93 e0       	ldi	r25, 0x03	; 3
    172e:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1732:	2f c0       	rjmp	.+94     	; 0x1792 <prvAddCurrentTaskToDelayedList+0xa4>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    1734:	ce 0d       	add	r28, r14
    1736:	df 1d       	adc	r29, r15

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1738:	e0 91 95 03 	lds	r30, 0x0395
    173c:	f0 91 96 03 	lds	r31, 0x0396
    1740:	d3 83       	std	Z+3, r29	; 0x03
    1742:	c2 83       	std	Z+2, r28	; 0x02

			if( xTimeToWake < xConstTickCount )
    1744:	ce 15       	cp	r28, r14
    1746:	df 05       	cpc	r29, r15
    1748:	68 f4       	brcc	.+26     	; 0x1764 <prvAddCurrentTaskToDelayedList+0x76>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    174a:	80 91 a3 03 	lds	r24, 0x03A3
    174e:	90 91 a4 03 	lds	r25, 0x03A4
    1752:	60 91 95 03 	lds	r22, 0x0395
    1756:	70 91 96 03 	lds	r23, 0x0396
    175a:	6e 5f       	subi	r22, 0xFE	; 254
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>
    1762:	17 c0       	rjmp	.+46     	; 0x1792 <prvAddCurrentTaskToDelayedList+0xa4>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1764:	80 91 a5 03 	lds	r24, 0x03A5
    1768:	90 91 a6 03 	lds	r25, 0x03A6
    176c:	60 91 95 03 	lds	r22, 0x0395
    1770:	70 91 96 03 	lds	r23, 0x0396
    1774:	6e 5f       	subi	r22, 0xFE	; 254
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    177c:	80 91 98 03 	lds	r24, 0x0398
    1780:	90 91 99 03 	lds	r25, 0x0399
    1784:	c8 17       	cp	r28, r24
    1786:	d9 07       	cpc	r29, r25
    1788:	20 f4       	brcc	.+8      	; 0x1792 <prvAddCurrentTaskToDelayedList+0xa4>
				{
					xNextTaskUnblockTime = xTimeToWake;
    178a:	d0 93 99 03 	sts	0x0399, r29
    178e:	c0 93 98 03 	sts	0x0398, r28

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	08 95       	ret

0000179e <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ec 01       	movw	r28, r24

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    17a4:	8f 89       	ldd	r24, Y+23	; 0x17
    17a6:	98 8d       	ldd	r25, Y+24	; 0x18
    17a8:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
			vPortFree( pxTCB );
    17ac:	ce 01       	movw	r24, r28
    17ae:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	08 95       	ret

000017b8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    17b8:	2f 92       	push	r2
    17ba:	3f 92       	push	r3
    17bc:	4f 92       	push	r4
    17be:	5f 92       	push	r5
    17c0:	6f 92       	push	r6
    17c2:	7f 92       	push	r7
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	df 92       	push	r13
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	3c 01       	movw	r6, r24
    17dc:	5b 01       	movw	r10, r22
    17de:	ea 01       	movw	r28, r20
    17e0:	29 01       	movw	r4, r18
    17e2:	d0 2e       	mov	r13, r16
    17e4:	47 01       	movw	r8, r14
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    17e6:	ca 01       	movw	r24, r20
    17e8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <pvPortMalloc>
    17ec:	7c 01       	movw	r14, r24

			if( pxStack != NULL )
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <xTaskCreate+0x3c>
    17f2:	ed c0       	rjmp	.+474    	; 0x19ce <xTaskCreate+0x216>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    17f4:	8a e2       	ldi	r24, 0x2A	; 42
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <pvPortMalloc>
    17fc:	8c 01       	movw	r16, r24

				if( pxNewTCB != NULL )
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	81 f0       	breq	.+32     	; 0x1822 <xTaskCreate+0x6a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1802:	fc 01       	movw	r30, r24
    1804:	f0 8e       	std	Z+24, r15	; 0x18
    1806:	e7 8a       	std	Z+23, r14	; 0x17
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1808:	21 97       	sbiw	r28, 0x01	; 1
    180a:	17 01       	movw	r2, r14
    180c:	2c 0e       	add	r2, r28
    180e:	3d 1e       	adc	r3, r29
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1810:	f5 01       	movw	r30, r10
    1812:	80 81       	ld	r24, Z
    1814:	f8 01       	movw	r30, r16
    1816:	81 8f       	std	Z+25, r24	; 0x19

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1818:	f5 01       	movw	r30, r10
    181a:	80 81       	ld	r24, Z
    181c:	88 23       	and	r24, r24
    181e:	31 f4       	brne	.+12     	; 0x182c <xTaskCreate+0x74>
    1820:	13 c0       	rjmp	.+38     	; 0x1848 <xTaskCreate+0x90>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1822:	c7 01       	movw	r24, r14
    1824:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	d6 c0       	rjmp	.+428    	; 0x19d8 <xTaskCreate+0x220>
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    182c:	e8 01       	movw	r28, r16
    182e:	6a 96       	adiw	r28, 0x1a	; 26
    1830:	d5 01       	movw	r26, r10
    1832:	11 96       	adiw	r26, 0x01	; 1
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1834:	81 e0       	ldi	r24, 0x01	; 1
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    1836:	fd 01       	movw	r30, r26
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1838:	9d 91       	ld	r25, X+
    183a:	99 93       	st	Y+, r25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    183c:	90 81       	ld	r25, Z
    183e:	99 23       	and	r25, r25
    1840:	19 f0       	breq	.+6      	; 0x1848 <xTaskCreate+0x90>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	8a 30       	cpi	r24, 0x0A	; 10
    1846:	b9 f7       	brne	.-18     	; 0x1836 <xTaskCreate+0x7e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1848:	f8 01       	movw	r30, r16
    184a:	12 a2       	lds	r17, 0x92
    184c:	cd 2d       	mov	r28, r13
    184e:	c5 30       	cpi	r28, 0x05	; 5
    1850:	08 f0       	brcs	.+2      	; 0x1854 <xTaskCreate+0x9c>
    1852:	c4 e0       	ldi	r28, 0x04	; 4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    1854:	f8 01       	movw	r30, r16
    1856:	c6 8b       	std	Z+22, r28	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    1858:	c3 a3       	lds	r28, 0x53
		pxNewTCB->uxMutexesHeld = 0;
    185a:	14 a2       	lds	r17, 0x94
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    185c:	ee 24       	eor	r14, r14
    185e:	ff 24       	eor	r15, r15
    1860:	68 94       	set
    1862:	e1 f8       	bld	r14, 1
    1864:	e0 0e       	add	r14, r16
    1866:	f1 1e       	adc	r15, r17
    1868:	c7 01       	movw	r24, r14
    186a:	0e 94 ca 04 	call	0x994	; 0x994 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    186e:	c8 01       	movw	r24, r16
    1870:	0c 96       	adiw	r24, 0x0c	; 12
    1872:	0e 94 ca 04 	call	0x994	; 0x994 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1876:	f8 01       	movw	r30, r16
    1878:	11 87       	std	Z+9, r17	; 0x09
    187a:	00 87       	std	Z+8, r16	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    187c:	85 e0       	ldi	r24, 0x05	; 5
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	8c 1b       	sub	r24, r28
    1882:	91 09       	sbc	r25, r1
    1884:	95 87       	std	Z+13, r25	; 0x0d
    1886:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    1888:	13 8b       	std	Z+19, r17	; 0x13
    188a:	02 8b       	std	Z+18, r16	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    188c:	15 a2       	lds	r17, 0x95
    188e:	16 a2       	lds	r17, 0x96
    1890:	17 a2       	lds	r17, 0x97
    1892:	10 a6       	lds	r17, 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1894:	11 a6       	lds	r17, 0xb1
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1896:	c1 01       	movw	r24, r2
    1898:	b3 01       	movw	r22, r6
    189a:	a2 01       	movw	r20, r4
    189c:	0e 94 96 05 	call	0xb2c	; 0xb2c <pxPortInitialiseStack>
    18a0:	f8 01       	movw	r30, r16
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    18a6:	81 14       	cp	r8, r1
    18a8:	91 04       	cpc	r9, r1
    18aa:	19 f0       	breq	.+6      	; 0x18b2 <xTaskCreate+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    18ac:	f4 01       	movw	r30, r8
    18ae:	11 83       	std	Z+1, r17	; 0x01
    18b0:	00 83       	st	Z, r16

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    18b8:	80 91 a1 03 	lds	r24, 0x03A1
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	80 93 a1 03 	sts	0x03A1, r24
		if( pxCurrentTCB == NULL )
    18c2:	80 91 95 03 	lds	r24, 0x0395
    18c6:	90 91 96 03 	lds	r25, 0x0396
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <xTaskCreate+0x118>
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <xTaskCreate+0x196>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    18d0:	10 93 96 03 	sts	0x0396, r17
    18d4:	00 93 95 03 	sts	0x0395, r16

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    18d8:	80 91 a1 03 	lds	r24, 0x03A1
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	09 f0       	breq	.+2      	; 0x18e2 <xTaskCreate+0x12a>
    18e0:	47 c0       	rjmp	.+142    	; 0x1970 <xTaskCreate+0x1b8>
    18e2:	c0 e0       	ldi	r28, 0x00	; 0
    18e4:	d0 e0       	ldi	r29, 0x00	; 0
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    18e6:	ce 01       	movw	r24, r28
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	8c 0f       	add	r24, r28
    18f6:	9d 1f       	adc	r25, r29
    18f8:	88 55       	subi	r24, 0x58	; 88
    18fa:	9c 4f       	sbci	r25, 0xFC	; 252
    18fc:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
    1900:	21 96       	adiw	r28, 0x01	; 1

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1902:	c5 30       	cpi	r28, 0x05	; 5
    1904:	d1 05       	cpc	r29, r1
    1906:	79 f7       	brne	.-34     	; 0x18e6 <xTaskCreate+0x12e>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1908:	c5 ed       	ldi	r28, 0xD5	; 213
    190a:	d3 e0       	ldi	r29, 0x03	; 3
    190c:	ce 01       	movw	r24, r28
    190e:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    1912:	0f 2e       	mov	r0, r31
    1914:	fe ed       	ldi	r31, 0xDE	; 222
    1916:	af 2e       	mov	r10, r31
    1918:	f3 e0       	ldi	r31, 0x03	; 3
    191a:	bf 2e       	mov	r11, r31
    191c:	f0 2d       	mov	r31, r0
    191e:	c5 01       	movw	r24, r10
    1920:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    1924:	87 ee       	ldi	r24, 0xE7	; 231
    1926:	93 e0       	ldi	r25, 0x03	; 3
    1928:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    192c:	80 ef       	ldi	r24, 0xF0	; 240
    192e:	93 e0       	ldi	r25, 0x03	; 3
    1930:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    1934:	89 ef       	ldi	r24, 0xF9	; 249
    1936:	93 e0       	ldi	r25, 0x03	; 3
    1938:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    193c:	d0 93 a6 03 	sts	0x03A6, r29
    1940:	c0 93 a5 03 	sts	0x03A5, r28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1944:	b0 92 a4 03 	sts	0x03A4, r11
    1948:	a0 92 a3 03 	sts	0x03A3, r10
    194c:	11 c0       	rjmp	.+34     	; 0x1970 <xTaskCreate+0x1b8>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    194e:	80 91 9d 03 	lds	r24, 0x039D
    1952:	88 23       	and	r24, r24
    1954:	69 f4       	brne	.+26     	; 0x1970 <xTaskCreate+0x1b8>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1956:	e0 91 95 03 	lds	r30, 0x0395
    195a:	f0 91 96 03 	lds	r31, 0x0396
    195e:	96 89       	ldd	r25, Z+22	; 0x16
    1960:	f8 01       	movw	r30, r16
    1962:	86 89       	ldd	r24, Z+22	; 0x16
    1964:	89 17       	cp	r24, r25
    1966:	20 f0       	brcs	.+8      	; 0x1970 <xTaskCreate+0x1b8>
				{
					pxCurrentTCB = pxNewTCB;
    1968:	10 93 96 03 	sts	0x0396, r17
    196c:	00 93 95 03 	sts	0x0395, r16
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    1970:	80 91 a7 03 	lds	r24, 0x03A7
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	80 93 a7 03 	sts	0x03A7, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    197a:	f8 01       	movw	r30, r16
    197c:	86 89       	ldd	r24, Z+22	; 0x16
    197e:	90 91 9e 03 	lds	r25, 0x039E
    1982:	98 17       	cp	r25, r24
    1984:	10 f4       	brcc	.+4      	; 0x198a <xTaskCreate+0x1d2>
    1986:	80 93 9e 03 	sts	0x039E, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 01       	movw	r18, r24
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	22 0f       	add	r18, r18
    1994:	33 1f       	adc	r19, r19
    1996:	22 0f       	add	r18, r18
    1998:	33 1f       	adc	r19, r19
    199a:	82 0f       	add	r24, r18
    199c:	93 1f       	adc	r25, r19
    199e:	88 55       	subi	r24, 0x58	; 88
    19a0:	9c 4f       	sbci	r25, 0xFC	; 252
    19a2:	b7 01       	movw	r22, r14
    19a4:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    19ac:	80 91 9d 03 	lds	r24, 0x039D
    19b0:	88 23       	and	r24, r24
    19b2:	79 f0       	breq	.+30     	; 0x19d2 <xTaskCreate+0x21a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    19b4:	e0 91 95 03 	lds	r30, 0x0395
    19b8:	f0 91 96 03 	lds	r31, 0x0396
    19bc:	96 89       	ldd	r25, Z+22	; 0x16
    19be:	f8 01       	movw	r30, r16
    19c0:	86 89       	ldd	r24, Z+22	; 0x16
    19c2:	98 17       	cp	r25, r24
    19c4:	40 f4       	brcc	.+16     	; 0x19d6 <xTaskCreate+0x21e>
		{
			taskYIELD_IF_USING_PREEMPTION();
    19c6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <xTaskCreate+0x220>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <xTaskCreate+0x220>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <xTaskCreate+0x220>
    19d6:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	7f 90       	pop	r7
    19f0:	6f 90       	pop	r6
    19f2:	5f 90       	pop	r5
    19f4:	4f 90       	pop	r4
    19f6:	3f 90       	pop	r3
    19f8:	2f 90       	pop	r2
    19fa:	08 95       	ret

000019fc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <vTaskDelete+0x1c>
    1a0e:	c0 91 95 03 	lds	r28, 0x0395
    1a12:	d0 91 96 03 	lds	r29, 0x0396
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <vTaskDelete+0x1e>
    1a18:	ec 01       	movw	r28, r24

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1a1a:	8e 01       	movw	r16, r28
    1a1c:	0e 5f       	subi	r16, 0xFE	; 254
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	c8 01       	movw	r24, r16
    1a22:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1a26:	8c 89       	ldd	r24, Y+20	; 0x14
    1a28:	9d 89       	ldd	r25, Y+21	; 0x15
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	21 f0       	breq	.+8      	; 0x1a36 <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1a2e:	ce 01       	movw	r24, r28
    1a30:	0c 96       	adiw	r24, 0x0c	; 12
    1a32:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    1a36:	80 91 a7 03 	lds	r24, 0x03A7
    1a3a:	8f 5f       	subi	r24, 0xFF	; 255
    1a3c:	80 93 a7 03 	sts	0x03A7, r24

			if( pxTCB == pxCurrentTCB )
    1a40:	80 91 95 03 	lds	r24, 0x0395
    1a44:	90 91 96 03 	lds	r25, 0x0396
    1a48:	c8 17       	cp	r28, r24
    1a4a:	d9 07       	cpc	r29, r25
    1a4c:	59 f4       	brne	.+22     	; 0x1a64 <vTaskDelete+0x68>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    1a4e:	80 ef       	ldi	r24, 0xF0	; 240
    1a50:	93 e0       	ldi	r25, 0x03	; 3
    1a52:	b8 01       	movw	r22, r16
    1a54:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    1a58:	80 91 a2 03 	lds	r24, 0x03A2
    1a5c:	8f 5f       	subi	r24, 0xFF	; 255
    1a5e:	80 93 a2 03 	sts	0x03A2, r24
    1a62:	0a c0       	rjmp	.+20     	; 0x1a78 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    1a64:	80 91 a1 03 	lds	r24, 0x03A1
    1a68:	81 50       	subi	r24, 0x01	; 1
    1a6a:	80 93 a1 03 	sts	0x03A1, r24
				prvDeleteTCB( pxTCB );
    1a6e:	ce 01       	movw	r24, r28
    1a70:	0e 94 cf 0b 	call	0x179e	; 0x179e <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    1a74:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1a78:	0f 90       	pop	r0
    1a7a:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    1a7c:	80 91 9d 03 	lds	r24, 0x039D
    1a80:	88 23       	and	r24, r24
    1a82:	49 f0       	breq	.+18     	; 0x1a96 <vTaskDelete+0x9a>
		{
			if( pxTCB == pxCurrentTCB )
    1a84:	80 91 95 03 	lds	r24, 0x0395
    1a88:	90 91 96 03 	lds	r25, 0x0396
    1a8c:	c8 17       	cp	r28, r24
    1a8e:	d9 07       	cpc	r29, r25
    1a90:	11 f4       	brne	.+4      	; 0x1a96 <vTaskDelete+0x9a>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    1a92:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	08 95       	ret

00001aa0 <uxTaskPriorityGet>:
	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	29 f4       	brne	.+10     	; 0x1ab4 <uxTaskPriorityGet+0x14>
    1aaa:	e0 91 95 03 	lds	r30, 0x0395
    1aae:	f0 91 96 03 	lds	r31, 0x0396
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <uxTaskPriorityGet+0x16>
    1ab4:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		taskEXIT_CRITICAL();
    1ab6:	0f 90       	pop	r0
    1ab8:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
	}
    1aba:	86 89       	ldd	r24, Z+22	; 0x16
    1abc:	08 95       	ret

00001abe <uxTaskPriorityGetFromISR>:

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	29 f4       	brne	.+10     	; 0x1acc <uxTaskPriorityGetFromISR+0xe>
    1ac2:	e0 91 95 03 	lds	r30, 0x0395
    1ac6:	f0 91 96 03 	lds	r31, 0x0396
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <uxTaskPriorityGetFromISR+0x10>
    1acc:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
	}
    1ace:	86 89       	ldd	r24, Z+22	; 0x16
    1ad0:	08 95       	ret

00001ad2 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    1adc:	65 30       	cpi	r22, 0x05	; 5
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <vTaskPrioritySet+0x10>
    1ae0:	64 e0       	ldi	r22, 0x04	; 4
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	29 f4       	brne	.+10     	; 0x1af6 <vTaskPrioritySet+0x24>
    1aec:	c0 91 95 03 	lds	r28, 0x0395
    1af0:	d0 91 96 03 	lds	r29, 0x0396
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <vTaskPrioritySet+0x26>
    1af6:	ec 01       	movw	r28, r24

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    1af8:	2b a1       	lds	r18, 0x4b
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    1afa:	26 17       	cp	r18, r22
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <vTaskPrioritySet+0x2e>
    1afe:	61 c0       	rjmp	.+194    	; 0x1bc2 <vTaskPrioritySet+0xf0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    1b00:	26 17       	cp	r18, r22
    1b02:	88 f4       	brcc	.+34     	; 0x1b26 <vTaskPrioritySet+0x54>
				{
					if( pxTCB != pxCurrentTCB )
    1b04:	80 91 95 03 	lds	r24, 0x0395
    1b08:	90 91 96 03 	lds	r25, 0x0396
    1b0c:	c8 17       	cp	r28, r24
    1b0e:	d9 07       	cpc	r29, r25
    1b10:	a1 f0       	breq	.+40     	; 0x1b3a <vTaskPrioritySet+0x68>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    1b12:	e0 91 95 03 	lds	r30, 0x0395
    1b16:	f0 91 96 03 	lds	r31, 0x0396
						{
							xYieldRequired = pdTRUE;
    1b1a:	11 e0       	ldi	r17, 0x01	; 1
    1b1c:	86 89       	ldd	r24, Z+22	; 0x16
    1b1e:	68 17       	cp	r22, r24
    1b20:	68 f4       	brcc	.+26     	; 0x1b3c <vTaskPrioritySet+0x6a>
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	0b c0       	rjmp	.+22     	; 0x1b3c <vTaskPrioritySet+0x6a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    1b26:	80 91 95 03 	lds	r24, 0x0395
    1b2a:	90 91 96 03 	lds	r25, 0x0396
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
    1b2e:	11 e0       	ldi	r17, 0x01	; 1
    1b30:	c8 17       	cp	r28, r24
    1b32:	d9 07       	cpc	r29, r25
    1b34:	19 f0       	breq	.+6      	; 0x1b3c <vTaskPrioritySet+0x6a>
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <vTaskPrioritySet+0x6a>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    1b3a:	10 e0       	ldi	r17, 0x00	; 0
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    1b3c:	8e 89       	ldd	r24, Y+22	; 0x16

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    1b3e:	28 17       	cp	r18, r24
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <vTaskPrioritySet+0x72>
					{
						pxTCB->uxPriority = uxNewPriority;
    1b42:	6e 8b       	std	Y+22, r22	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    1b44:	6b a3       	lds	r22, 0x5b
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1b46:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b48:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b4a:	33 23       	and	r19, r19
    1b4c:	34 f0       	brlt	.+12     	; 0x1b5a <vTaskPrioritySet+0x88>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b4e:	25 e0       	ldi	r18, 0x05	; 5
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	26 1b       	sub	r18, r22
    1b54:	31 09       	sbc	r19, r1
    1b56:	3d 87       	std	Y+13, r19	; 0x0d
    1b58:	2c 87       	std	Y+12, r18	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 01       	movw	r18, r24
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	22 0f       	add	r18, r18
    1b64:	33 1f       	adc	r19, r19
    1b66:	22 0f       	add	r18, r18
    1b68:	33 1f       	adc	r19, r19
    1b6a:	82 0f       	add	r24, r18
    1b6c:	93 1f       	adc	r25, r19
    1b6e:	88 55       	subi	r24, 0x58	; 88
    1b70:	9c 4f       	sbci	r25, 0xFC	; 252
    1b72:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b74:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b76:	28 17       	cp	r18, r24
    1b78:	39 07       	cpc	r19, r25
    1b7a:	f9 f4       	brne	.+62     	; 0x1bba <vTaskPrioritySet+0xe8>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1b7c:	ee 24       	eor	r14, r14
    1b7e:	ff 24       	eor	r15, r15
    1b80:	68 94       	set
    1b82:	e1 f8       	bld	r14, 1
    1b84:	ec 0e       	add	r14, r28
    1b86:	fd 1e       	adc	r15, r29
    1b88:	c7 01       	movw	r24, r14
    1b8a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    1b8e:	8e 89       	ldd	r24, Y+22	; 0x16
    1b90:	90 91 9e 03 	lds	r25, 0x039E
    1b94:	98 17       	cp	r25, r24
    1b96:	10 f4       	brcc	.+4      	; 0x1b9c <vTaskPrioritySet+0xca>
    1b98:	80 93 9e 03 	sts	0x039E, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9c 01       	movw	r18, r24
    1ba0:	22 0f       	add	r18, r18
    1ba2:	33 1f       	adc	r19, r19
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
    1bac:	82 0f       	add	r24, r18
    1bae:	93 1f       	adc	r25, r19
    1bb0:	88 55       	subi	r24, 0x58	; 88
    1bb2:	9c 4f       	sbci	r25, 0xFC	; 252
    1bb4:	b7 01       	movw	r22, r14
    1bb6:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    1bba:	11 23       	and	r17, r17
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <vTaskPrioritySet+0xf0>
				{
					taskYIELD_IF_USING_PREEMPTION();
    1bbe:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
	}
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	08 95       	ret

00001bd2 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	ec 01       	movw	r28, r24
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	b9 f1       	breq	.+110    	; 0x1c4e <vTaskResume+0x7c>
    1be0:	80 91 95 03 	lds	r24, 0x0395
    1be4:	90 91 96 03 	lds	r25, 0x0396
    1be8:	c8 17       	cp	r28, r24
    1bea:	d9 07       	cpc	r29, r25
    1bec:	81 f1       	breq	.+96     	; 0x1c4e <vTaskResume+0x7c>
		{
			taskENTER_CRITICAL();
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	0e 94 41 0b 	call	0x1682	; 0x1682 <prvTaskIsTaskSuspended>
    1bfa:	88 23       	and	r24, r24
    1bfc:	31 f1       	breq	.+76     	; 0x1c4a <vTaskResume+0x78>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    1bfe:	8e 01       	movw	r16, r28
    1c00:	0e 5f       	subi	r16, 0xFE	; 254
    1c02:	1f 4f       	sbci	r17, 0xFF	; 255
    1c04:	c8 01       	movw	r24, r16
    1c06:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1c0a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c0c:	90 91 9e 03 	lds	r25, 0x039E
    1c10:	98 17       	cp	r25, r24
    1c12:	10 f4       	brcc	.+4      	; 0x1c18 <vTaskResume+0x46>
    1c14:	80 93 9e 03 	sts	0x039E, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	22 0f       	add	r18, r18
    1c1e:	33 1f       	adc	r19, r19
    1c20:	22 0f       	add	r18, r18
    1c22:	33 1f       	adc	r19, r19
    1c24:	22 0f       	add	r18, r18
    1c26:	33 1f       	adc	r19, r19
    1c28:	82 0f       	add	r24, r18
    1c2a:	93 1f       	adc	r25, r19
    1c2c:	88 55       	subi	r24, 0x58	; 88
    1c2e:	9c 4f       	sbci	r25, 0xFC	; 252
    1c30:	b8 01       	movw	r22, r16
    1c32:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1c36:	e0 91 95 03 	lds	r30, 0x0395
    1c3a:	f0 91 96 03 	lds	r31, 0x0396
    1c3e:	9e 89       	ldd	r25, Y+22	; 0x16
    1c40:	86 89       	ldd	r24, Z+22	; 0x16
    1c42:	98 17       	cp	r25, r24
    1c44:	10 f0       	brcs	.+4      	; 0x1c4a <vTaskResume+0x78>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    1c46:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	08 95       	ret

00001c58 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	ec 01       	movw	r28, r24
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    1c64:	0e 94 41 0b 	call	0x1682	; 0x1682 <prvTaskIsTaskSuspended>
    1c68:	88 23       	and	r24, r24
    1c6a:	b9 f1       	breq	.+110    	; 0x1cda <xTaskResumeFromISR+0x82>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1c6c:	80 91 97 03 	lds	r24, 0x0397
    1c70:	88 23       	and	r24, r24
    1c72:	51 f5       	brne	.+84     	; 0x1cc8 <xTaskResumeFromISR+0x70>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1c74:	e0 91 95 03 	lds	r30, 0x0395
    1c78:	f0 91 96 03 	lds	r31, 0x0396

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    1c7c:	11 e0       	ldi	r17, 0x01	; 1
    1c7e:	9e 89       	ldd	r25, Y+22	; 0x16
    1c80:	86 89       	ldd	r24, Z+22	; 0x16
    1c82:	98 17       	cp	r25, r24
    1c84:	08 f4       	brcc	.+2      	; 0x1c88 <xTaskResumeFromISR+0x30>
    1c86:	10 e0       	ldi	r17, 0x00	; 0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1c88:	ee 24       	eor	r14, r14
    1c8a:	ff 24       	eor	r15, r15
    1c8c:	68 94       	set
    1c8e:	e1 f8       	bld	r14, 1
    1c90:	ec 0e       	add	r14, r28
    1c92:	fd 1e       	adc	r15, r29
    1c94:	c7 01       	movw	r24, r14
    1c96:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1c9a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c9c:	90 91 9e 03 	lds	r25, 0x039E
    1ca0:	98 17       	cp	r25, r24
    1ca2:	10 f4       	brcc	.+4      	; 0x1ca8 <xTaskResumeFromISR+0x50>
    1ca4:	80 93 9e 03 	sts	0x039E, r24
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 01       	movw	r18, r24
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	22 0f       	add	r18, r18
    1cb6:	33 1f       	adc	r19, r19
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	88 55       	subi	r24, 0x58	; 88
    1cbe:	9c 4f       	sbci	r25, 0xFC	; 252
    1cc0:	b7 01       	movw	r22, r14
    1cc2:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1cc6:	0a c0       	rjmp	.+20     	; 0x1cdc <xTaskResumeFromISR+0x84>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1cc8:	be 01       	movw	r22, r28
    1cca:	64 5f       	subi	r22, 0xF4	; 244
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	87 ee       	ldi	r24, 0xE7	; 231
    1cd0:	93 e0       	ldi	r25, 0x03	; 3
    1cd2:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <xTaskResumeFromISR+0x84>
    1cda:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
	}
    1cdc:	81 2f       	mov	r24, r17
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	ff 90       	pop	r15
    1ce6:	ef 90       	pop	r14
    1ce8:	08 95       	ret

00001cea <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1cf0:	8a ee       	ldi	r24, 0xEA	; 234
    1cf2:	9f e0       	ldi	r25, 0x0F	; 15
    1cf4:	66 e6       	ldi	r22, 0x66	; 102
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	48 ec       	ldi	r20, 0xC8	; 200
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	00 e0       	ldi	r16, 0x00	; 0
    1d02:	0f 2e       	mov	r0, r31
    1d04:	f2 e0       	ldi	r31, 0x02	; 2
    1d06:	ef 2e       	mov	r14, r31
    1d08:	f4 e0       	ldi	r31, 0x04	; 4
    1d0a:	ff 2e       	mov	r15, r31
    1d0c:	f0 2d       	mov	r31, r0
    1d0e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	81 f4       	brne	.+32     	; 0x1d36 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1d16:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1d18:	8f ef       	ldi	r24, 0xFF	; 255
    1d1a:	9f ef       	ldi	r25, 0xFF	; 255
    1d1c:	90 93 99 03 	sts	0x0399, r25
    1d20:	80 93 98 03 	sts	0x0398, r24
		xSchedulerRunning = pdTRUE;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	80 93 9d 03 	sts	0x039D, r24
		xTickCount = ( TickType_t ) 0U;
    1d2a:	10 92 a0 03 	sts	0x03A0, r1
    1d2e:	10 92 9f 03 	sts	0x039F, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1d32:	0e 94 26 06 	call	0xc4c	; 0xc4c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    1d36:	0f 91       	pop	r16
    1d38:	ff 90       	pop	r15
    1d3a:	ef 90       	pop	r14
    1d3c:	08 95       	ret

00001d3e <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1d3e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1d40:	10 92 9d 03 	sts	0x039D, r1
	vPortEndScheduler();
    1d44:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <vPortEndScheduler>
}
    1d48:	08 95       	ret

00001d4a <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1d4a:	80 91 97 03 	lds	r24, 0x0397
    1d4e:	8f 5f       	subi	r24, 0xFF	; 255
    1d50:	80 93 97 03 	sts	0x0397, r24
}
    1d54:	08 95       	ret

00001d56 <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1d5c:	80 91 9f 03 	lds	r24, 0x039F
    1d60:	90 91 a0 03 	lds	r25, 0x03A0
	}
	portTICK_TYPE_EXIT_CRITICAL();
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    1d68:	08 95       	ret

00001d6a <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
    1d6a:	80 91 9f 03 	lds	r24, 0x039F
    1d6e:	90 91 a0 03 	lds	r25, 0x03A0
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1d72:	08 95       	ret

00001d74 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    1d74:	80 91 a1 03 	lds	r24, 0x03A1
}
    1d78:	08 95       	ret

00001d7a <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <pcTaskGetName+0xc>
    1d7e:	80 91 95 03 	lds	r24, 0x0395
    1d82:	90 91 96 03 	lds	r25, 0x0396
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    1d86:	49 96       	adiw	r24, 0x19	; 25
}
    1d88:	08 95       	ret

00001d8a <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1d8a:	cf 92       	push	r12
    1d8c:	df 92       	push	r13
    1d8e:	ef 92       	push	r14
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d9a:	80 91 97 03 	lds	r24, 0x0397
    1d9e:	88 23       	and	r24, r24
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <xTaskIncrementTick+0x1a>
    1da2:	82 c0       	rjmp	.+260    	; 0x1ea8 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    1da4:	c0 90 9f 03 	lds	r12, 0x039F
    1da8:	d0 90 a0 03 	lds	r13, 0x03A0
    1dac:	08 94       	sec
    1dae:	c1 1c       	adc	r12, r1
    1db0:	d1 1c       	adc	r13, r1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    1db2:	d0 92 a0 03 	sts	0x03A0, r13
    1db6:	c0 92 9f 03 	sts	0x039F, r12

		if( xConstTickCount == ( TickType_t ) 0U )
    1dba:	c1 14       	cp	r12, r1
    1dbc:	d1 04       	cpc	r13, r1
    1dbe:	b9 f4       	brne	.+46     	; 0x1dee <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
    1dc0:	80 91 a5 03 	lds	r24, 0x03A5
    1dc4:	90 91 a6 03 	lds	r25, 0x03A6
    1dc8:	20 91 a3 03 	lds	r18, 0x03A3
    1dcc:	30 91 a4 03 	lds	r19, 0x03A4
    1dd0:	30 93 a6 03 	sts	0x03A6, r19
    1dd4:	20 93 a5 03 	sts	0x03A5, r18
    1dd8:	90 93 a4 03 	sts	0x03A4, r25
    1ddc:	80 93 a3 03 	sts	0x03A3, r24
    1de0:	80 91 9a 03 	lds	r24, 0x039A
    1de4:	8f 5f       	subi	r24, 0xFF	; 255
    1de6:	80 93 9a 03 	sts	0x039A, r24
    1dea:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1dee:	80 91 98 03 	lds	r24, 0x0398
    1df2:	90 91 99 03 	lds	r25, 0x0399
    1df6:	c8 16       	cp	r12, r24
    1df8:	d9 06       	cpc	r13, r25
    1dfa:	20 f4       	brcc	.+8      	; 0x1e04 <xTaskIncrementTick+0x7a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1dfc:	ff 24       	eor	r15, r15
    1dfe:	5a c0       	rjmp	.+180    	; 0x1eb4 <xTaskIncrementTick+0x12a>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1e00:	fe 2c       	mov	r15, r14
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <xTaskIncrementTick+0x80>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1e04:	ff 24       	eor	r15, r15
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1e06:	ee 24       	eor	r14, r14
    1e08:	e3 94       	inc	r14
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1e0a:	e0 91 a5 03 	lds	r30, 0x03A5
    1e0e:	f0 91 a6 03 	lds	r31, 0x03A6
    1e12:	80 81       	ld	r24, Z
    1e14:	88 23       	and	r24, r24
    1e16:	39 f4       	brne	.+14     	; 0x1e26 <xTaskIncrementTick+0x9c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	9f ef       	ldi	r25, 0xFF	; 255
    1e1c:	90 93 99 03 	sts	0x0399, r25
    1e20:	80 93 98 03 	sts	0x0398, r24
					break;
    1e24:	47 c0       	rjmp	.+142    	; 0x1eb4 <xTaskIncrementTick+0x12a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1e26:	e0 91 a5 03 	lds	r30, 0x03A5
    1e2a:	f0 91 a6 03 	lds	r31, 0x03A6
    1e2e:	05 80       	ldd	r0, Z+5	; 0x05
    1e30:	f6 81       	ldd	r31, Z+6	; 0x06
    1e32:	e0 2d       	mov	r30, r0
    1e34:	c6 81       	ldd	r28, Z+6	; 0x06
    1e36:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
    1e3c:	c8 16       	cp	r12, r24
    1e3e:	d9 06       	cpc	r13, r25
    1e40:	28 f4       	brcc	.+10     	; 0x1e4c <xTaskIncrementTick+0xc2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1e42:	90 93 99 03 	sts	0x0399, r25
    1e46:	80 93 98 03 	sts	0x0398, r24
						break;
    1e4a:	34 c0       	rjmp	.+104    	; 0x1eb4 <xTaskIncrementTick+0x12a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1e4c:	8e 01       	movw	r16, r28
    1e4e:	0e 5f       	subi	r16, 0xFE	; 254
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	c8 01       	movw	r24, r16
    1e54:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1e58:	8c 89       	ldd	r24, Y+20	; 0x14
    1e5a:	9d 89       	ldd	r25, Y+21	; 0x15
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	21 f0       	breq	.+8      	; 0x1e68 <xTaskIncrementTick+0xde>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1e60:	ce 01       	movw	r24, r28
    1e62:	0c 96       	adiw	r24, 0x0c	; 12
    1e64:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1e68:	8e 89       	ldd	r24, Y+22	; 0x16
    1e6a:	90 91 9e 03 	lds	r25, 0x039E
    1e6e:	98 17       	cp	r25, r24
    1e70:	10 f4       	brcc	.+4      	; 0x1e76 <xTaskIncrementTick+0xec>
    1e72:	80 93 9e 03 	sts	0x039E, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 01       	movw	r18, r24
    1e7a:	22 0f       	add	r18, r18
    1e7c:	33 1f       	adc	r19, r19
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	82 0f       	add	r24, r18
    1e88:	93 1f       	adc	r25, r19
    1e8a:	88 55       	subi	r24, 0x58	; 88
    1e8c:	9c 4f       	sbci	r25, 0xFC	; 252
    1e8e:	b8 01       	movw	r22, r16
    1e90:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1e94:	e0 91 95 03 	lds	r30, 0x0395
    1e98:	f0 91 96 03 	lds	r31, 0x0396
    1e9c:	9e 89       	ldd	r25, Y+22	; 0x16
    1e9e:	86 89       	ldd	r24, Z+22	; 0x16
    1ea0:	98 17       	cp	r25, r24
    1ea2:	08 f0       	brcs	.+2      	; 0x1ea6 <xTaskIncrementTick+0x11c>
    1ea4:	ad cf       	rjmp	.-166    	; 0x1e00 <xTaskIncrementTick+0x76>
    1ea6:	b1 cf       	rjmp	.-158    	; 0x1e0a <xTaskIncrementTick+0x80>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1ea8:	80 91 9c 03 	lds	r24, 0x039C
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	80 93 9c 03 	sts	0x039C, r24

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1eb2:	ff 24       	eor	r15, r15
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1eb4:	80 91 9b 03 	lds	r24, 0x039B
    1eb8:	88 23       	and	r24, r24
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
    1ebc:	ff 24       	eor	r15, r15
    1ebe:	f3 94       	inc	r15
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1ec0:	8f 2d       	mov	r24, r15
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	08 95       	ret

00001ed4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1ed4:	df 92       	push	r13
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1ee8:	80 91 97 03 	lds	r24, 0x0397
    1eec:	81 50       	subi	r24, 0x01	; 1
    1eee:	80 93 97 03 	sts	0x0397, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1ef2:	80 91 97 03 	lds	r24, 0x0397
    1ef6:	88 23       	and	r24, r24
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <xTaskResumeAll+0x28>
    1efa:	5f c0       	rjmp	.+190    	; 0x1fba <xTaskResumeAll+0xe6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1efc:	80 91 a1 03 	lds	r24, 0x03A1
    1f00:	88 23       	and	r24, r24
    1f02:	91 f5       	brne	.+100    	; 0x1f68 <xTaskResumeAll+0x94>
    1f04:	5d c0       	rjmp	.+186    	; 0x1fc0 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1f06:	e0 91 ec 03 	lds	r30, 0x03EC
    1f0a:	f0 91 ed 03 	lds	r31, 0x03ED
    1f0e:	c6 81       	ldd	r28, Z+6	; 0x06
    1f10:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1f12:	ce 01       	movw	r24, r28
    1f14:	0c 96       	adiw	r24, 0x0c	; 12
    1f16:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1f1a:	8e 01       	movw	r16, r28
    1f1c:	0e 5f       	subi	r16, 0xFE	; 254
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	c8 01       	movw	r24, r16
    1f22:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1f26:	8e 89       	ldd	r24, Y+22	; 0x16
    1f28:	90 91 9e 03 	lds	r25, 0x039E
    1f2c:	98 17       	cp	r25, r24
    1f2e:	10 f4       	brcc	.+4      	; 0x1f34 <xTaskResumeAll+0x60>
    1f30:	80 93 9e 03 	sts	0x039E, r24
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9c 01       	movw	r18, r24
    1f38:	22 0f       	add	r18, r18
    1f3a:	33 1f       	adc	r19, r19
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	82 0f       	add	r24, r18
    1f46:	93 1f       	adc	r25, r19
    1f48:	88 55       	subi	r24, 0x58	; 88
    1f4a:	9c 4f       	sbci	r25, 0xFC	; 252
    1f4c:	b8 01       	movw	r22, r16
    1f4e:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1f52:	e0 91 95 03 	lds	r30, 0x0395
    1f56:	f0 91 96 03 	lds	r31, 0x0396
    1f5a:	9e 89       	ldd	r25, Y+22	; 0x16
    1f5c:	86 89       	ldd	r24, Z+22	; 0x16
    1f5e:	98 17       	cp	r25, r24
    1f60:	68 f0       	brcs	.+26     	; 0x1f7c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
    1f62:	d0 92 9b 03 	sts	0x039B, r13
    1f66:	0a c0       	rjmp	.+20     	; 0x1f7c <xTaskResumeAll+0xa8>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1f68:	c0 e0       	ldi	r28, 0x00	; 0
    1f6a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1f6c:	0f 2e       	mov	r0, r31
    1f6e:	f7 ee       	ldi	r31, 0xE7	; 231
    1f70:	ef 2e       	mov	r14, r31
    1f72:	f3 e0       	ldi	r31, 0x03	; 3
    1f74:	ff 2e       	mov	r15, r31
    1f76:	f0 2d       	mov	r31, r0

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
    1f78:	dd 24       	eor	r13, r13
    1f7a:	d3 94       	inc	r13
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1f7c:	f7 01       	movw	r30, r14
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 23       	and	r24, r24
    1f82:	09 f6       	brne	.-126    	; 0x1f06 <xTaskResumeAll+0x32>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    1f84:	20 97       	sbiw	r28, 0x00	; 0
    1f86:	11 f0       	breq	.+4      	; 0x1f8c <xTaskResumeAll+0xb8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    1f88:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1f8c:	c0 91 9c 03 	lds	r28, 0x039C

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1f90:	cc 23       	and	r28, r28
    1f92:	59 f0       	breq	.+22     	; 0x1faa <xTaskResumeAll+0xd6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
    1f94:	01 e0       	ldi	r16, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    1f96:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <xTaskIncrementTick>
    1f9a:	88 23       	and	r24, r24
    1f9c:	11 f0       	breq	.+4      	; 0x1fa2 <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
    1f9e:	00 93 9b 03 	sts	0x039B, r16
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    1fa2:	c1 50       	subi	r28, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1fa4:	c1 f7       	brne	.-16     	; 0x1f96 <xTaskResumeAll+0xc2>

						uxPendedTicks = 0;
    1fa6:	10 92 9c 03 	sts	0x039C, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1faa:	80 91 9b 03 	lds	r24, 0x039B
    1fae:	88 23       	and	r24, r24
    1fb0:	31 f0       	breq	.+12     	; 0x1fbe <xTaskResumeAll+0xea>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1fb2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	03 c0       	rjmp	.+6      	; 0x1fc0 <xTaskResumeAll+0xec>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <xTaskResumeAll+0xec>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	1f 91       	pop	r17
    1fca:	0f 91       	pop	r16
    1fcc:	ff 90       	pop	r15
    1fce:	ef 90       	pop	r14
    1fd0:	df 90       	pop	r13
    1fd2:	08 95       	ret

00001fd4 <prvIdleTask>:
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1fd4:	00 ef       	ldi	r16, 0xF0	; 240
    1fd6:	13 e0       	ldi	r17, 0x03	; 3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1fd8:	0f 2e       	mov	r0, r31
    1fda:	f8 ea       	ldi	r31, 0xA8	; 168
    1fdc:	ef 2e       	mov	r14, r31
    1fde:	f3 e0       	ldi	r31, 0x03	; 3
    1fe0:	ff 2e       	mov	r15, r31
    1fe2:	f0 2d       	mov	r31, r0
    1fe4:	24 c0       	rjmp	.+72     	; 0x202e <prvIdleTask+0x5a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    1fe6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1fea:	f8 01       	movw	r30, r16
    1fec:	c0 81       	ld	r28, Z
			}
			( void ) xTaskResumeAll();
    1fee:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1ff2:	cc 23       	and	r28, r28
    1ff4:	e1 f0       	breq	.+56     	; 0x202e <prvIdleTask+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1ffc:	e0 91 f5 03 	lds	r30, 0x03F5
    2000:	f0 91 f6 03 	lds	r31, 0x03F6
    2004:	c6 81       	ldd	r28, Z+6	; 0x06
    2006:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2008:	ce 01       	movw	r24, r28
    200a:	02 96       	adiw	r24, 0x02	; 2
    200c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					--uxCurrentNumberOfTasks;
    2010:	80 91 a1 03 	lds	r24, 0x03A1
    2014:	81 50       	subi	r24, 0x01	; 1
    2016:	80 93 a1 03 	sts	0x03A1, r24
					--uxDeletedTasksWaitingCleanUp;
    201a:	80 91 a2 03 	lds	r24, 0x03A2
    201e:	81 50       	subi	r24, 0x01	; 1
    2020:	80 93 a2 03 	sts	0x03A2, r24
				}
				taskEXIT_CRITICAL();
    2024:	0f 90       	pop	r0
    2026:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    2028:	ce 01       	movw	r24, r28
    202a:	0e 94 cf 0b 	call	0x179e	; 0x179e <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    202e:	80 91 a2 03 	lds	r24, 0x03A2
    2032:	88 23       	and	r24, r24
    2034:	c1 f6       	brne	.-80     	; 0x1fe6 <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2036:	f7 01       	movw	r30, r14
    2038:	80 81       	ld	r24, Z
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	c0 f3       	brcs	.-16     	; 0x202e <prvIdleTask+0x5a>
			{
				taskYIELD();
    203e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
    2042:	f5 cf       	rjmp	.-22     	; 0x202e <prvIdleTask+0x5a>

00002044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	51 f0       	breq	.+20     	; 0x2062 <vTaskDelay+0x1e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    204e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    2052:	ce 01       	movw	r24, r28
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	0e 94 77 0b 	call	0x16ee	; 0x16ee <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    205a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    205e:	88 23       	and	r24, r24
    2060:	11 f4       	brne	.+4      	; 0x2066 <vTaskDelay+0x22>
		{
			portYIELD_WITHIN_API();
    2062:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    206c:	0f 93       	push	r16
    206e:	1f 93       	push	r17
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	8c 01       	movw	r16, r24
    2076:	eb 01       	movw	r28, r22

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    2078:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    207c:	80 91 9f 03 	lds	r24, 0x039F
    2080:	90 91 a0 03 	lds	r25, 0x03A0

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2084:	f8 01       	movw	r30, r16
    2086:	20 81       	ld	r18, Z
    2088:	31 81       	ldd	r19, Z+1	; 0x01
    208a:	c2 0f       	add	r28, r18
    208c:	d3 1f       	adc	r29, r19

			if( xConstTickCount < *pxPreviousWakeTime )
    208e:	82 17       	cp	r24, r18
    2090:	93 07       	cpc	r25, r19
    2092:	48 f4       	brcc	.+18     	; 0x20a6 <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    2094:	c2 17       	cp	r28, r18
    2096:	d3 07       	cpc	r29, r19
    2098:	f8 f4       	brcc	.+62     	; 0x20d8 <vTaskDelayUntil+0x6c>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    209a:	d1 83       	std	Z+1, r29	; 0x01
    209c:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    209e:	8c 17       	cp	r24, r28
    20a0:	9d 07       	cpc	r25, r29
    20a2:	78 f4       	brcc	.+30     	; 0x20c2 <vTaskDelayUntil+0x56>
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    20a6:	c2 17       	cp	r28, r18
    20a8:	d3 07       	cpc	r29, r19
    20aa:	90 f0       	brcs	.+36     	; 0x20d0 <vTaskDelayUntil+0x64>
    20ac:	8c 17       	cp	r24, r28
    20ae:	9d 07       	cpc	r25, r29
    20b0:	78 f0       	brcs	.+30     	; 0x20d0 <vTaskDelayUntil+0x64>
    20b2:	12 c0       	rjmp	.+36     	; 0x20d8 <vTaskDelayUntil+0x6c>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    20b4:	9e 01       	movw	r18, r28
    20b6:	28 1b       	sub	r18, r24
    20b8:	39 0b       	sbc	r19, r25
    20ba:	c9 01       	movw	r24, r18
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	0e 94 77 0b 	call	0x16ee	; 0x16ee <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    20c2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    20c6:	88 23       	and	r24, r24
    20c8:	59 f4       	brne	.+22     	; 0x20e0 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
    20ca:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
    20ce:	08 c0       	rjmp	.+16     	; 0x20e0 <vTaskDelayUntil+0x74>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    20d0:	f8 01       	movw	r30, r16
    20d2:	d1 83       	std	Z+1, r29	; 0x01
    20d4:	c0 83       	st	Z, r28
    20d6:	ee cf       	rjmp	.-36     	; 0x20b4 <vTaskDelayUntil+0x48>
    20d8:	f8 01       	movw	r30, r16
    20da:	d1 83       	std	Z+1, r29	; 0x01
    20dc:	c0 83       	st	Z, r28
    20de:	f1 cf       	rjmp	.-30     	; 0x20c2 <vTaskDelayUntil+0x56>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	08 95       	ret

000020ea <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    20ea:	80 91 97 03 	lds	r24, 0x0397
    20ee:	88 23       	and	r24, r24
    20f0:	21 f0       	breq	.+8      	; 0x20fa <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	80 93 9b 03 	sts	0x039B, r24
    20f8:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    20fa:	10 92 9b 03 	sts	0x039B, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    20fe:	20 91 9e 03 	lds	r18, 0x039E
    2102:	82 2f       	mov	r24, r18
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	fc 01       	movw	r30, r24
    2108:	ee 0f       	add	r30, r30
    210a:	ff 1f       	adc	r31, r31
    210c:	ee 0f       	add	r30, r30
    210e:	ff 1f       	adc	r31, r31
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	e8 0f       	add	r30, r24
    2116:	f9 1f       	adc	r31, r25
    2118:	e8 55       	subi	r30, 0x58	; 88
    211a:	fc 4f       	sbci	r31, 0xFC	; 252
    211c:	30 81       	ld	r19, Z
    211e:	33 23       	and	r19, r19
    2120:	89 f4       	brne	.+34     	; 0x2144 <vTaskSwitchContext+0x5a>
    2122:	21 50       	subi	r18, 0x01	; 1
    2124:	82 2f       	mov	r24, r18
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	fc 01       	movw	r30, r24
    212a:	ee 0f       	add	r30, r30
    212c:	ff 1f       	adc	r31, r31
    212e:	ee 0f       	add	r30, r30
    2130:	ff 1f       	adc	r31, r31
    2132:	ee 0f       	add	r30, r30
    2134:	ff 1f       	adc	r31, r31
    2136:	e8 0f       	add	r30, r24
    2138:	f9 1f       	adc	r31, r25
    213a:	e8 55       	subi	r30, 0x58	; 88
    213c:	fc 4f       	sbci	r31, 0xFC	; 252
    213e:	30 81       	ld	r19, Z
    2140:	33 23       	and	r19, r19
    2142:	79 f3       	breq	.-34     	; 0x2122 <vTaskSwitchContext+0x38>
    2144:	dc 01       	movw	r26, r24
    2146:	aa 0f       	add	r26, r26
    2148:	bb 1f       	adc	r27, r27
    214a:	aa 0f       	add	r26, r26
    214c:	bb 1f       	adc	r27, r27
    214e:	aa 0f       	add	r26, r26
    2150:	bb 1f       	adc	r27, r27
    2152:	8a 0f       	add	r24, r26
    2154:	9b 1f       	adc	r25, r27
    2156:	dc 01       	movw	r26, r24
    2158:	a8 55       	subi	r26, 0x58	; 88
    215a:	bc 4f       	sbci	r27, 0xFC	; 252
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	ed 91       	ld	r30, X+
    2160:	fc 91       	ld	r31, X
    2162:	12 97       	sbiw	r26, 0x02	; 2
    2164:	02 80       	ldd	r0, Z+2	; 0x02
    2166:	f3 81       	ldd	r31, Z+3	; 0x03
    2168:	e0 2d       	mov	r30, r0
    216a:	12 96       	adiw	r26, 0x02	; 2
    216c:	fc 93       	st	X, r31
    216e:	ee 93       	st	-X, r30
    2170:	11 97       	sbiw	r26, 0x01	; 1
    2172:	cd 01       	movw	r24, r26
    2174:	03 96       	adiw	r24, 0x03	; 3
    2176:	e8 17       	cp	r30, r24
    2178:	f9 07       	cpc	r31, r25
    217a:	31 f4       	brne	.+12     	; 0x2188 <vTaskSwitchContext+0x9e>
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	12 96       	adiw	r26, 0x02	; 2
    2182:	9c 93       	st	X, r25
    2184:	8e 93       	st	-X, r24
    2186:	11 97       	sbiw	r26, 0x01	; 1
    2188:	11 96       	adiw	r26, 0x01	; 1
    218a:	ed 91       	ld	r30, X+
    218c:	fc 91       	ld	r31, X
    218e:	12 97       	sbiw	r26, 0x02	; 2
    2190:	86 81       	ldd	r24, Z+6	; 0x06
    2192:	97 81       	ldd	r25, Z+7	; 0x07
    2194:	90 93 96 03 	sts	0x0396, r25
    2198:	80 93 95 03 	sts	0x0395, r24
    219c:	20 93 9e 03 	sts	0x039E, r18
    21a0:	08 95       	ret

000021a2 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	29 f4       	brne	.+10     	; 0x21be <vTaskSuspend+0x1c>
    21b4:	00 91 95 03 	lds	r16, 0x0395
    21b8:	10 91 96 03 	lds	r17, 0x0396
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <vTaskSuspend+0x1e>
    21be:	8c 01       	movw	r16, r24

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    21c0:	e8 01       	movw	r28, r16
    21c2:	22 96       	adiw	r28, 0x02	; 2
    21c4:	ce 01       	movw	r24, r28
    21c6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    21ca:	f8 01       	movw	r30, r16
    21cc:	84 89       	ldd	r24, Z+20	; 0x14
    21ce:	95 89       	ldd	r25, Z+21	; 0x15
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	21 f0       	breq	.+8      	; 0x21dc <vTaskSuspend+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    21d4:	c8 01       	movw	r24, r16
    21d6:	0c 96       	adiw	r24, 0x0c	; 12
    21d8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    21dc:	89 ef       	ldi	r24, 0xF9	; 249
    21de:	93 e0       	ldi	r25, 0x03	; 3
    21e0:	be 01       	movw	r22, r28
    21e2:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    21e6:	0f 90       	pop	r0
    21e8:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    21ea:	80 91 9d 03 	lds	r24, 0x039D
    21ee:	88 23       	and	r24, r24
    21f0:	39 f0       	breq	.+14     	; 0x2200 <vTaskSuspend+0x5e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    21f8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    2200:	80 91 95 03 	lds	r24, 0x0395
    2204:	90 91 96 03 	lds	r25, 0x0396
    2208:	08 17       	cp	r16, r24
    220a:	19 07       	cpc	r17, r25
    220c:	a1 f4       	brne	.+40     	; 0x2236 <vTaskSuspend+0x94>
		{
			if( xSchedulerRunning != pdFALSE )
    220e:	80 91 9d 03 	lds	r24, 0x039D
    2212:	88 23       	and	r24, r24
    2214:	19 f0       	breq	.+6      	; 0x221c <vTaskSuspend+0x7a>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    2216:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
    221a:	0d c0       	rjmp	.+26     	; 0x2236 <vTaskSuspend+0x94>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    221c:	80 91 a1 03 	lds	r24, 0x03A1
    2220:	90 91 f9 03 	lds	r25, 0x03F9
    2224:	98 17       	cp	r25, r24
    2226:	29 f4       	brne	.+10     	; 0x2232 <vTaskSuspend+0x90>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    2228:	10 92 96 03 	sts	0x0396, r1
    222c:	10 92 95 03 	sts	0x0395, r1
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <vTaskSuspend+0x94>
				}
				else
				{
					vTaskSwitchContext();
    2232:	0e 94 75 10 	call	0x20ea	; 0x20ea <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret

00002240 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	eb 01       	movw	r28, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2246:	60 91 95 03 	lds	r22, 0x0395
    224a:	70 91 96 03 	lds	r23, 0x0396
    224e:	64 5f       	subi	r22, 0xF4	; 244
    2250:	7f 4f       	sbci	r23, 0xFF	; 255
    2252:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2256:	ce 01       	movw	r24, r28
    2258:	61 e0       	ldi	r22, 0x01	; 1
    225a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <prvAddCurrentTaskToDelayedList>
}
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	08 95       	ret

00002264 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	ea 01       	movw	r28, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    226a:	e0 91 95 03 	lds	r30, 0x0395
    226e:	f0 91 96 03 	lds	r31, 0x0396
    2272:	70 68       	ori	r23, 0x80	; 128
    2274:	75 87       	std	Z+13, r23	; 0x0d
    2276:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2278:	60 91 95 03 	lds	r22, 0x0395
    227c:	70 91 96 03 	lds	r23, 0x0396
    2280:	64 5f       	subi	r22, 0xF4	; 244
    2282:	7f 4f       	sbci	r23, 0xFF	; 255
    2284:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2288:	ce 01       	movw	r24, r28
    228a:	61 e0       	ldi	r22, 0x01	; 1
    228c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <prvAddCurrentTaskToDelayedList>
}
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    229e:	dc 01       	movw	r26, r24
    22a0:	15 96       	adiw	r26, 0x05	; 5
    22a2:	ed 91       	ld	r30, X+
    22a4:	fc 91       	ld	r31, X
    22a6:	16 97       	sbiw	r26, 0x06	; 6
    22a8:	06 81       	ldd	r16, Z+6	; 0x06
    22aa:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    22ac:	e8 01       	movw	r28, r16
    22ae:	2c 96       	adiw	r28, 0x0c	; 12
    22b0:	ce 01       	movw	r24, r28
    22b2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    22b6:	80 91 97 03 	lds	r24, 0x0397
    22ba:	88 23       	and	r24, r24
    22bc:	e9 f4       	brne	.+58     	; 0x22f8 <xTaskRemoveFromEventList+0x62>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    22be:	e8 01       	movw	r28, r16
    22c0:	22 96       	adiw	r28, 0x02	; 2
    22c2:	ce 01       	movw	r24, r28
    22c4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    22c8:	f8 01       	movw	r30, r16
    22ca:	86 89       	ldd	r24, Z+22	; 0x16
    22cc:	90 91 9e 03 	lds	r25, 0x039E
    22d0:	98 17       	cp	r25, r24
    22d2:	10 f4       	brcc	.+4      	; 0x22d8 <xTaskRemoveFromEventList+0x42>
    22d4:	80 93 9e 03 	sts	0x039E, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9c 01       	movw	r18, r24
    22dc:	22 0f       	add	r18, r18
    22de:	33 1f       	adc	r19, r19
    22e0:	22 0f       	add	r18, r18
    22e2:	33 1f       	adc	r19, r19
    22e4:	22 0f       	add	r18, r18
    22e6:	33 1f       	adc	r19, r19
    22e8:	82 0f       	add	r24, r18
    22ea:	93 1f       	adc	r25, r19
    22ec:	88 55       	subi	r24, 0x58	; 88
    22ee:	9c 4f       	sbci	r25, 0xFC	; 252
    22f0:	be 01       	movw	r22, r28
    22f2:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    22f6:	05 c0       	rjmp	.+10     	; 0x2302 <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    22f8:	87 ee       	ldi	r24, 0xE7	; 231
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	be 01       	movw	r22, r28
    22fe:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2302:	e0 91 95 03 	lds	r30, 0x0395
    2306:	f0 91 96 03 	lds	r31, 0x0396
    230a:	d8 01       	movw	r26, r16
    230c:	56 96       	adiw	r26, 0x16	; 22
    230e:	9c 91       	ld	r25, X
    2310:	56 97       	sbiw	r26, 0x16	; 22
    2312:	86 89       	ldd	r24, Z+22	; 0x16
    2314:	89 17       	cp	r24, r25
    2316:	20 f4       	brcc	.+8      	; 0x2320 <xTaskRemoveFromEventList+0x8a>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	80 93 9b 03 	sts	0x039B, r24
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		xReturn = pdFALSE;
    2320:	80 e0       	ldi	r24, 0x00	; 0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	08 95       	ret

0000232c <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    232c:	0f 93       	push	r16
    232e:	1f 93       	push	r17
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    2334:	70 68       	ori	r23, 0x80	; 128
    2336:	fc 01       	movw	r30, r24
    2338:	71 83       	std	Z+1, r23	; 0x01
    233a:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    233c:	c6 81       	ldd	r28, Z+6	; 0x06
    233e:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    2340:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    2344:	8e 01       	movw	r16, r28
    2346:	0e 5f       	subi	r16, 0xFE	; 254
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	c8 01       	movw	r24, r16
    234c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    2350:	8e 89       	ldd	r24, Y+22	; 0x16
    2352:	90 91 9e 03 	lds	r25, 0x039E
    2356:	98 17       	cp	r25, r24
    2358:	10 f4       	brcc	.+4      	; 0x235e <xTaskRemoveFromUnorderedEventList+0x32>
    235a:	80 93 9e 03 	sts	0x039E, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9c 01       	movw	r18, r24
    2362:	22 0f       	add	r18, r18
    2364:	33 1f       	adc	r19, r19
    2366:	22 0f       	add	r18, r18
    2368:	33 1f       	adc	r19, r19
    236a:	22 0f       	add	r18, r18
    236c:	33 1f       	adc	r19, r19
    236e:	82 0f       	add	r24, r18
    2370:	93 1f       	adc	r25, r19
    2372:	88 55       	subi	r24, 0x58	; 88
    2374:	9c 4f       	sbci	r25, 0xFC	; 252
    2376:	b8 01       	movw	r22, r16
    2378:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    237c:	e0 91 95 03 	lds	r30, 0x0395
    2380:	f0 91 96 03 	lds	r31, 0x0396
    2384:	9e 89       	ldd	r25, Y+22	; 0x16
    2386:	86 89       	ldd	r24, Z+22	; 0x16
    2388:	89 17       	cp	r24, r25
    238a:	20 f4       	brcc	.+8      	; 0x2394 <xTaskRemoveFromUnorderedEventList+0x68>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	80 93 9b 03 	sts	0x039B, r24
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <xTaskRemoveFromUnorderedEventList+0x6a>
	}
	else
	{
		xReturn = pdFALSE;
    2394:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
}
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	08 95       	ret

000023a0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    23a0:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    23a2:	80 91 9a 03 	lds	r24, 0x039A
    23a6:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    23a8:	80 91 9f 03 	lds	r24, 0x039F
    23ac:	90 91 a0 03 	lds	r25, 0x03A0
    23b0:	92 83       	std	Z+2, r25	; 0x02
    23b2:	81 83       	std	Z+1, r24	; 0x01
}
    23b4:	08 95       	ret

000023b6 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    23b6:	fc 01       	movw	r30, r24
    23b8:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    23c0:	60 91 9f 03 	lds	r22, 0x039F
    23c4:	70 91 a0 03 	lds	r23, 0x03A0
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    23c8:	4d 91       	ld	r20, X+
    23ca:	5c 91       	ld	r21, X
    23cc:	11 97       	sbiw	r26, 0x01	; 1
    23ce:	8f ef       	ldi	r24, 0xFF	; 255
    23d0:	4f 3f       	cpi	r20, 0xFF	; 255
    23d2:	58 07       	cpc	r21, r24
    23d4:	e9 f0       	breq	.+58     	; 0x2410 <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    23d6:	80 91 9a 03 	lds	r24, 0x039A
    23da:	90 81       	ld	r25, Z
    23dc:	98 17       	cp	r25, r24
    23de:	29 f0       	breq	.+10     	; 0x23ea <xTaskCheckForTimeOut+0x34>
    23e0:	81 81       	ldd	r24, Z+1	; 0x01
    23e2:	92 81       	ldd	r25, Z+2	; 0x02
    23e4:	68 17       	cp	r22, r24
    23e6:	79 07       	cpc	r23, r25
    23e8:	a8 f4       	brcc	.+42     	; 0x2414 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    23ea:	81 81       	ldd	r24, Z+1	; 0x01
    23ec:	92 81       	ldd	r25, Z+2	; 0x02
    23ee:	9b 01       	movw	r18, r22
    23f0:	28 1b       	sub	r18, r24
    23f2:	39 0b       	sbc	r19, r25
    23f4:	24 17       	cp	r18, r20
    23f6:	35 07       	cpc	r19, r21
    23f8:	78 f4       	brcc	.+30     	; 0x2418 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    23fa:	86 1b       	sub	r24, r22
    23fc:	97 0b       	sbc	r25, r23
    23fe:	84 0f       	add	r24, r20
    2400:	95 1f       	adc	r25, r21
    2402:	8d 93       	st	X+, r24
    2404:	9c 93       	st	X, r25
			vTaskSetTimeOutState( pxTimeOut );
    2406:	cf 01       	movw	r24, r30
    2408:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	05 c0       	rjmp	.+10     	; 0x241a <xTaskCheckForTimeOut+0x64>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	03 c0       	rjmp	.+6      	; 0x241a <xTaskCheckForTimeOut+0x64>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	01 c0       	rjmp	.+2      	; 0x241a <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2418:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    241a:	0f 90       	pop	r0
    241c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    241e:	08 95       	ret

00002420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	80 93 9b 03 	sts	0x039B, r24
}
    2426:	08 95       	ret

00002428 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2428:	80 91 95 03 	lds	r24, 0x0395
    242c:	90 91 96 03 	lds	r25, 0x0396

		return xReturn;
	}
    2430:	08 95       	ret

00002432 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    2432:	0f 93       	push	r16
    2434:	1f 93       	push	r17
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	09 f4       	brne	.+2      	; 0x2442 <vTaskPriorityInherit+0x10>
    2440:	51 c0       	rjmp	.+162    	; 0x24e4 <vTaskPriorityInherit+0xb2>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2442:	8e 89       	ldd	r24, Y+22	; 0x16
    2444:	e0 91 95 03 	lds	r30, 0x0395
    2448:	f0 91 96 03 	lds	r31, 0x0396
    244c:	96 89       	ldd	r25, Z+22	; 0x16
    244e:	89 17       	cp	r24, r25
    2450:	08 f0       	brcs	.+2      	; 0x2454 <vTaskPriorityInherit+0x22>
    2452:	48 c0       	rjmp	.+144    	; 0x24e4 <vTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2454:	2c 85       	ldd	r18, Y+12	; 0x0c
    2456:	3d 85       	ldd	r19, Y+13	; 0x0d
    2458:	33 23       	and	r19, r19
    245a:	5c f0       	brlt	.+22     	; 0x2472 <vTaskPriorityInherit+0x40>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    245c:	e0 91 95 03 	lds	r30, 0x0395
    2460:	f0 91 96 03 	lds	r31, 0x0396
    2464:	96 89       	ldd	r25, Z+22	; 0x16
    2466:	25 e0       	ldi	r18, 0x05	; 5
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	29 1b       	sub	r18, r25
    246c:	31 09       	sbc	r19, r1
    246e:	3d 87       	std	Y+13, r19	; 0x0d
    2470:	2c 87       	std	Y+12, r18	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9c 01       	movw	r18, r24
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	22 0f       	add	r18, r18
    247c:	33 1f       	adc	r19, r19
    247e:	22 0f       	add	r18, r18
    2480:	33 1f       	adc	r19, r19
    2482:	82 0f       	add	r24, r18
    2484:	93 1f       	adc	r25, r19
    2486:	88 55       	subi	r24, 0x58	; 88
    2488:	9c 4f       	sbci	r25, 0xFC	; 252
    248a:	2a 85       	ldd	r18, Y+10	; 0x0a
    248c:	3b 85       	ldd	r19, Y+11	; 0x0b
    248e:	28 17       	cp	r18, r24
    2490:	39 07       	cpc	r19, r25
    2492:	11 f5       	brne	.+68     	; 0x24d8 <vTaskPriorityInherit+0xa6>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2494:	8e 01       	movw	r16, r28
    2496:	0e 5f       	subi	r16, 0xFE	; 254
    2498:	1f 4f       	sbci	r17, 0xFF	; 255
    249a:	c8 01       	movw	r24, r16
    249c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    24a0:	e0 91 95 03 	lds	r30, 0x0395
    24a4:	f0 91 96 03 	lds	r31, 0x0396
    24a8:	86 89       	ldd	r24, Z+22	; 0x16
    24aa:	8e 8b       	std	Y+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    24ac:	90 91 9e 03 	lds	r25, 0x039E
    24b0:	98 17       	cp	r25, r24
    24b2:	10 f4       	brcc	.+4      	; 0x24b8 <vTaskPriorityInherit+0x86>
    24b4:	80 93 9e 03 	sts	0x039E, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	9c 01       	movw	r18, r24
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	22 0f       	add	r18, r18
    24c6:	33 1f       	adc	r19, r19
    24c8:	82 0f       	add	r24, r18
    24ca:	93 1f       	adc	r25, r19
    24cc:	88 55       	subi	r24, 0x58	; 88
    24ce:	9c 4f       	sbci	r25, 0xFC	; 252
    24d0:	b8 01       	movw	r22, r16
    24d2:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    24d6:	06 c0       	rjmp	.+12     	; 0x24e4 <vTaskPriorityInherit+0xb2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    24d8:	e0 91 95 03 	lds	r30, 0x0395
    24dc:	f0 91 96 03 	lds	r31, 0x0396
    24e0:	86 89       	ldd	r24, Z+22	; 0x16
    24e2:	8e 8b       	std	Y+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	1f 91       	pop	r17
    24ea:	0f 91       	pop	r16
    24ec:	08 95       	ret

000024ee <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    24ee:	0f 93       	push	r16
    24f0:	1f 93       	push	r17
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	81 f1       	breq	.+96     	; 0x255c <xTaskPriorityDisinherit+0x6e>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    24fc:	8c a1       	lds	r24, 0x4c
    24fe:	81 50       	subi	r24, 0x01	; 1
    2500:	8c a3       	lds	r24, 0x5c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2502:	2e 89       	ldd	r18, Y+22	; 0x16
    2504:	9b a1       	lds	r25, 0x4b
    2506:	29 17       	cp	r18, r25
    2508:	59 f1       	breq	.+86     	; 0x2560 <xTaskPriorityDisinherit+0x72>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    250a:	88 23       	and	r24, r24
    250c:	59 f5       	brne	.+86     	; 0x2564 <xTaskPriorityDisinherit+0x76>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    250e:	8e 01       	movw	r16, r28
    2510:	0e 5f       	subi	r16, 0xFE	; 254
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	c8 01       	movw	r24, r16
    2516:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    251a:	4b a1       	lds	r20, 0x4b
    251c:	4e 8b       	std	Y+22, r20	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    251e:	24 2f       	mov	r18, r20
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	85 e0       	ldi	r24, 0x05	; 5
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	82 1b       	sub	r24, r18
    2528:	93 0b       	sbc	r25, r19
    252a:	9d 87       	std	Y+13, r25	; 0x0d
    252c:	8c 87       	std	Y+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    252e:	80 91 9e 03 	lds	r24, 0x039E
    2532:	84 17       	cp	r24, r20
    2534:	10 f4       	brcc	.+4      	; 0x253a <xTaskPriorityDisinherit+0x4c>
    2536:	40 93 9e 03 	sts	0x039E, r20
    253a:	c9 01       	movw	r24, r18
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	28 0f       	add	r18, r24
    254a:	39 1f       	adc	r19, r25
    254c:	c9 01       	movw	r24, r18
    254e:	88 55       	subi	r24, 0x58	; 88
    2550:	9c 4f       	sbci	r25, 0xFC	; 252
    2552:	b8 01       	movw	r22, r16
    2554:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	05 c0       	rjmp	.+10     	; 0x2566 <xTaskPriorityDisinherit+0x78>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <xTaskPriorityDisinherit+0x78>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	01 c0       	rjmp	.+2      	; 0x2566 <xTaskPriorityDisinherit+0x78>
    2564:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	1f 91       	pop	r17
    256c:	0f 91       	pop	r16
    256e:	08 95       	ret

00002570 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    2570:	e0 91 95 03 	lds	r30, 0x0395
    2574:	f0 91 96 03 	lds	r31, 0x0396
    2578:	84 85       	ldd	r24, Z+12	; 0x0c
    257a:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    257c:	e0 91 95 03 	lds	r30, 0x0395
    2580:	f0 91 96 03 	lds	r31, 0x0396
    2584:	a0 91 95 03 	lds	r26, 0x0395
    2588:	b0 91 96 03 	lds	r27, 0x0396
    258c:	56 96       	adiw	r26, 0x16	; 22
    258e:	4c 91       	ld	r20, X
    2590:	56 97       	sbiw	r26, 0x16	; 22
    2592:	25 e0       	ldi	r18, 0x05	; 5
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	24 1b       	sub	r18, r20
    2598:	31 09       	sbc	r19, r1
    259a:	35 87       	std	Z+13, r19	; 0x0d
    259c:	24 87       	std	Z+12, r18	; 0x0c

	return uxReturn;
}
    259e:	08 95       	ret

000025a0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    25a0:	80 91 95 03 	lds	r24, 0x0395
    25a4:	90 91 96 03 	lds	r25, 0x0396
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	39 f0       	breq	.+14     	; 0x25ba <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    25ac:	e0 91 95 03 	lds	r30, 0x0395
    25b0:	f0 91 96 03 	lds	r31, 0x0396
    25b4:	84 a1       	lds	r24, 0x44
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	84 a3       	lds	r24, 0x54
		}

		return pxCurrentTCB;
    25ba:	80 91 95 03 	lds	r24, 0x0395
    25be:	90 91 96 03 	lds	r25, 0x0396
	}
    25c2:	08 95       	ret

000025c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    25c4:	0f 93       	push	r16
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	c8 2f       	mov	r28, r24
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    25d2:	e0 91 95 03 	lds	r30, 0x0395
    25d6:	f0 91 96 03 	lds	r31, 0x0396
    25da:	85 a1       	lds	r24, 0x45
    25dc:	96 a1       	lds	r25, 0x46
    25de:	a7 a1       	lds	r26, 0x47
    25e0:	b0 a5       	lds	r27, 0x60
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	a1 05       	cpc	r26, r1
    25e6:	b1 05       	cpc	r27, r1
    25e8:	79 f4       	brne	.+30     	; 0x2608 <ulTaskNotifyTake+0x44>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    25ea:	e0 91 95 03 	lds	r30, 0x0395
    25ee:	f0 91 96 03 	lds	r31, 0x0396
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    25f6:	61 15       	cp	r22, r1
    25f8:	71 05       	cpc	r23, r1
    25fa:	31 f0       	breq	.+12     	; 0x2608 <ulTaskNotifyTake+0x44>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    25fc:	cb 01       	movw	r24, r22
    25fe:	61 e0       	ldi	r22, 0x01	; 1
    2600:	0e 94 77 0b 	call	0x16ee	; 0x16ee <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    2604:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2608:	0f 90       	pop	r0
    260a:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    2612:	e0 91 95 03 	lds	r30, 0x0395
    2616:	f0 91 96 03 	lds	r31, 0x0396
    261a:	05 a1       	lds	r16, 0x45
    261c:	16 a1       	lds	r17, 0x46
    261e:	27 a1       	lds	r18, 0x47
    2620:	30 a5       	lds	r19, 0x60

			if( ulReturn != 0UL )
    2622:	01 15       	cp	r16, r1
    2624:	11 05       	cpc	r17, r1
    2626:	21 05       	cpc	r18, r1
    2628:	31 05       	cpc	r19, r1
    262a:	c1 f0       	breq	.+48     	; 0x265c <ulTaskNotifyTake+0x98>
			{
				if( xClearCountOnExit != pdFALSE )
    262c:	cc 23       	and	r28, r28
    262e:	49 f0       	breq	.+18     	; 0x2642 <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    2630:	e0 91 95 03 	lds	r30, 0x0395
    2634:	f0 91 96 03 	lds	r31, 0x0396
    2638:	15 a2       	lds	r17, 0x95
    263a:	16 a2       	lds	r17, 0x96
    263c:	17 a2       	lds	r17, 0x97
    263e:	10 a6       	lds	r17, 0xb0
    2640:	0d c0       	rjmp	.+26     	; 0x265c <ulTaskNotifyTake+0x98>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    2642:	e0 91 95 03 	lds	r30, 0x0395
    2646:	f0 91 96 03 	lds	r31, 0x0396
    264a:	d9 01       	movw	r26, r18
    264c:	c8 01       	movw	r24, r16
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	a1 09       	sbc	r26, r1
    2652:	b1 09       	sbc	r27, r1
    2654:	85 a3       	lds	r24, 0x55
    2656:	96 a3       	lds	r25, 0x56
    2658:	a7 a3       	lds	r26, 0x57
    265a:	b0 a7       	lds	r27, 0x70
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    265c:	e0 91 95 03 	lds	r30, 0x0395
    2660:	f0 91 96 03 	lds	r31, 0x0396
    2664:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    266a:	60 2f       	mov	r22, r16
    266c:	71 2f       	mov	r23, r17
    266e:	82 2f       	mov	r24, r18
    2670:	93 2f       	mov	r25, r19
    2672:	cf 91       	pop	r28
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    267a:	8f 92       	push	r8
    267c:	9f 92       	push	r9
    267e:	af 92       	push	r10
    2680:	bf 92       	push	r11
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	49 01       	movw	r8, r18
    2690:	5a 01       	movw	r10, r20
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    2698:	e0 91 95 03 	lds	r30, 0x0395
    269c:	f0 91 96 03 	lds	r31, 0x0396
    26a0:	21 a5       	lds	r18, 0x61
    26a2:	22 30       	cpi	r18, 0x02	; 2
    26a4:	19 f1       	breq	.+70     	; 0x26ec <xTaskNotifyWait+0x72>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    26a6:	e0 91 95 03 	lds	r30, 0x0395
    26aa:	f0 91 96 03 	lds	r31, 0x0396
    26ae:	45 a1       	lds	r20, 0x45
    26b0:	56 a1       	lds	r21, 0x46
    26b2:	67 a1       	lds	r22, 0x47
    26b4:	70 a5       	lds	r23, 0x60
    26b6:	80 95       	com	r24
    26b8:	90 95       	com	r25
    26ba:	a0 95       	com	r26
    26bc:	b0 95       	com	r27
    26be:	84 23       	and	r24, r20
    26c0:	95 23       	and	r25, r21
    26c2:	a6 23       	and	r26, r22
    26c4:	b7 23       	and	r27, r23
    26c6:	85 a3       	lds	r24, 0x55
    26c8:	96 a3       	lds	r25, 0x56
    26ca:	a7 a3       	lds	r26, 0x57
    26cc:	b0 a7       	lds	r27, 0x70

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    26ce:	e0 91 95 03 	lds	r30, 0x0395
    26d2:	f0 91 96 03 	lds	r31, 0x0396
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    26da:	e1 14       	cp	r14, r1
    26dc:	f1 04       	cpc	r15, r1
    26de:	31 f0       	breq	.+12     	; 0x26ec <xTaskNotifyWait+0x72>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    26e0:	c7 01       	movw	r24, r14
    26e2:	61 e0       	ldi	r22, 0x01	; 1
    26e4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    26e8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    26ec:	0f 90       	pop	r0
    26ee:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    26f6:	01 15       	cp	r16, r1
    26f8:	11 05       	cpc	r17, r1
    26fa:	69 f0       	breq	.+26     	; 0x2716 <xTaskNotifyWait+0x9c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    26fc:	e0 91 95 03 	lds	r30, 0x0395
    2700:	f0 91 96 03 	lds	r31, 0x0396
    2704:	85 a1       	lds	r24, 0x45
    2706:	96 a1       	lds	r25, 0x46
    2708:	a7 a1       	lds	r26, 0x47
    270a:	b0 a5       	lds	r27, 0x60
    270c:	f8 01       	movw	r30, r16
    270e:	80 83       	st	Z, r24
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	a2 83       	std	Z+2, r26	; 0x02
    2714:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    2716:	e0 91 95 03 	lds	r30, 0x0395
    271a:	f0 91 96 03 	lds	r31, 0x0396
    271e:	81 a5       	lds	r24, 0x61
    2720:	81 30       	cpi	r24, 0x01	; 1
    2722:	b1 f0       	breq	.+44     	; 0x2750 <xTaskNotifyWait+0xd6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    2724:	e0 91 95 03 	lds	r30, 0x0395
    2728:	f0 91 96 03 	lds	r31, 0x0396
    272c:	85 a1       	lds	r24, 0x45
    272e:	96 a1       	lds	r25, 0x46
    2730:	a7 a1       	lds	r26, 0x47
    2732:	b0 a5       	lds	r27, 0x60
    2734:	80 94       	com	r8
    2736:	90 94       	com	r9
    2738:	a0 94       	com	r10
    273a:	b0 94       	com	r11
    273c:	88 22       	and	r8, r24
    273e:	99 22       	and	r9, r25
    2740:	aa 22       	and	r10, r26
    2742:	bb 22       	and	r11, r27
    2744:	85 a2       	lds	r24, 0x95
    2746:	96 a2       	lds	r25, 0x96
    2748:	a7 a2       	lds	r26, 0x97
    274a:	b0 a6       	lds	r27, 0xb0
				xReturn = pdTRUE;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	01 c0       	rjmp	.+2      	; 0x2752 <xTaskNotifyWait+0xd8>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    2750:	80 e0       	ldi	r24, 0x00	; 0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2752:	e0 91 95 03 	lds	r30, 0x0395
    2756:	f0 91 96 03 	lds	r31, 0x0396
    275a:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    275c:	0f 90       	pop	r0
    275e:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
    2768:	bf 90       	pop	r11
    276a:	af 90       	pop	r10
    276c:	9f 90       	pop	r9
    276e:	8f 90       	pop	r8
    2770:	08 95       	ret

00002772 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	ec 01       	movw	r28, r24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    2782:	01 15       	cp	r16, r1
    2784:	11 05       	cpc	r17, r1
    2786:	49 f0       	breq	.+18     	; 0x279a <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    2788:	8d a1       	lds	r24, 0x4d
    278a:	9e a1       	lds	r25, 0x4e
    278c:	af a1       	lds	r26, 0x4f
    278e:	b8 a5       	lds	r27, 0x68
    2790:	f8 01       	movw	r30, r16
    2792:	80 83       	st	Z, r24
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	a2 83       	std	Z+2, r26	; 0x02
    2798:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    279a:	39 a5       	lds	r19, 0x69

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    279c:	82 e0       	ldi	r24, 0x02	; 2
    279e:	89 a7       	lds	r24, 0x79

			switch( eAction )
    27a0:	22 30       	cpi	r18, 0x02	; 2
    27a2:	b9 f0       	breq	.+46     	; 0x27d2 <xTaskGenericNotify+0x60>
    27a4:	23 30       	cpi	r18, 0x03	; 3
    27a6:	18 f4       	brcc	.+6      	; 0x27ae <xTaskGenericNotify+0x3c>
    27a8:	21 30       	cpi	r18, 0x01	; 1
    27aa:	51 f5       	brne	.+84     	; 0x2800 <xTaskGenericNotify+0x8e>
    27ac:	05 c0       	rjmp	.+10     	; 0x27b8 <xTaskGenericNotify+0x46>
    27ae:	23 30       	cpi	r18, 0x03	; 3
    27b0:	e1 f0       	breq	.+56     	; 0x27ea <xTaskGenericNotify+0x78>
    27b2:	24 30       	cpi	r18, 0x04	; 4
    27b4:	29 f5       	brne	.+74     	; 0x2800 <xTaskGenericNotify+0x8e>
    27b6:	1e c0       	rjmp	.+60     	; 0x27f4 <xTaskGenericNotify+0x82>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    27b8:	8d a1       	lds	r24, 0x4d
    27ba:	9e a1       	lds	r25, 0x4e
    27bc:	af a1       	lds	r26, 0x4f
    27be:	b8 a5       	lds	r27, 0x68
    27c0:	48 2b       	or	r20, r24
    27c2:	59 2b       	or	r21, r25
    27c4:	6a 2b       	or	r22, r26
    27c6:	7b 2b       	or	r23, r27
    27c8:	4d a3       	lds	r20, 0x5d
    27ca:	5e a3       	lds	r21, 0x5e
    27cc:	6f a3       	lds	r22, 0x5f
    27ce:	78 a7       	lds	r23, 0x78
					break;
    27d0:	17 c0       	rjmp	.+46     	; 0x2800 <xTaskGenericNotify+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    27d2:	8d a1       	lds	r24, 0x4d
    27d4:	9e a1       	lds	r25, 0x4e
    27d6:	af a1       	lds	r26, 0x4f
    27d8:	b8 a5       	lds	r27, 0x68
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	a1 1d       	adc	r26, r1
    27de:	b1 1d       	adc	r27, r1
    27e0:	8d a3       	lds	r24, 0x5d
    27e2:	9e a3       	lds	r25, 0x5e
    27e4:	af a3       	lds	r26, 0x5f
    27e6:	b8 a7       	lds	r27, 0x78
					break;
    27e8:	0b c0       	rjmp	.+22     	; 0x2800 <xTaskGenericNotify+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    27ea:	4d a3       	lds	r20, 0x5d
    27ec:	5e a3       	lds	r21, 0x5e
    27ee:	6f a3       	lds	r22, 0x5f
    27f0:	78 a7       	lds	r23, 0x78
					break;
    27f2:	06 c0       	rjmp	.+12     	; 0x2800 <xTaskGenericNotify+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    27f4:	32 30       	cpi	r19, 0x02	; 2
    27f6:	71 f1       	breq	.+92     	; 0x2854 <xTaskGenericNotify+0xe2>
					{
						pxTCB->ulNotifiedValue = ulValue;
    27f8:	4d a3       	lds	r20, 0x5d
    27fa:	5e a3       	lds	r21, 0x5e
    27fc:	6f a3       	lds	r22, 0x5f
    27fe:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2800:	31 30       	cpi	r19, 0x01	; 1
    2802:	51 f5       	brne	.+84     	; 0x2858 <xTaskGenericNotify+0xe6>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2804:	8e 01       	movw	r16, r28
    2806:	0e 5f       	subi	r16, 0xFE	; 254
    2808:	1f 4f       	sbci	r17, 0xFF	; 255
    280a:	c8 01       	movw	r24, r16
    280c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    2810:	8e 89       	ldd	r24, Y+22	; 0x16
    2812:	90 91 9e 03 	lds	r25, 0x039E
    2816:	98 17       	cp	r25, r24
    2818:	10 f4       	brcc	.+4      	; 0x281e <xTaskGenericNotify+0xac>
    281a:	80 93 9e 03 	sts	0x039E, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9c 01       	movw	r18, r24
    2822:	22 0f       	add	r18, r18
    2824:	33 1f       	adc	r19, r19
    2826:	22 0f       	add	r18, r18
    2828:	33 1f       	adc	r19, r19
    282a:	22 0f       	add	r18, r18
    282c:	33 1f       	adc	r19, r19
    282e:	82 0f       	add	r24, r18
    2830:	93 1f       	adc	r25, r19
    2832:	88 55       	subi	r24, 0x58	; 88
    2834:	9c 4f       	sbci	r25, 0xFC	; 252
    2836:	b8 01       	movw	r22, r16
    2838:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    283c:	e0 91 95 03 	lds	r30, 0x0395
    2840:	f0 91 96 03 	lds	r31, 0x0396
    2844:	9e 89       	ldd	r25, Y+22	; 0x16
    2846:	86 89       	ldd	r24, Z+22	; 0x16
    2848:	89 17       	cp	r24, r25
    284a:	40 f4       	brcc	.+16     	; 0x285c <xTaskGenericNotify+0xea>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    284c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vPortYield>
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	05 c0       	rjmp	.+10     	; 0x285e <xTaskGenericNotify+0xec>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	03 c0       	rjmp	.+6      	; 0x285e <xTaskGenericNotify+0xec>

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	01 c0       	rjmp	.+2      	; 0x285e <xTaskGenericNotify+0xec>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    285c:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    285e:	0f 90       	pop	r0
    2860:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	08 95       	ret

0000286c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	ec 01       	movw	r28, r24

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
    287a:	01 15       	cp	r16, r1
    287c:	11 05       	cpc	r17, r1
    287e:	49 f0       	breq	.+18     	; 0x2892 <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    2880:	8d a1       	lds	r24, 0x4d
    2882:	9e a1       	lds	r25, 0x4e
    2884:	af a1       	lds	r26, 0x4f
    2886:	b8 a5       	lds	r27, 0x68
    2888:	f8 01       	movw	r30, r16
    288a:	80 83       	st	Z, r24
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	a2 83       	std	Z+2, r26	; 0x02
    2890:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    2892:	39 a5       	lds	r19, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    2894:	82 e0       	ldi	r24, 0x02	; 2
    2896:	89 a7       	lds	r24, 0x79

			switch( eAction )
    2898:	22 30       	cpi	r18, 0x02	; 2
    289a:	b9 f0       	breq	.+46     	; 0x28ca <xTaskGenericNotifyFromISR+0x5e>
    289c:	23 30       	cpi	r18, 0x03	; 3
    289e:	18 f4       	brcc	.+6      	; 0x28a6 <xTaskGenericNotifyFromISR+0x3a>
    28a0:	21 30       	cpi	r18, 0x01	; 1
    28a2:	59 f5       	brne	.+86     	; 0x28fa <xTaskGenericNotifyFromISR+0x8e>
    28a4:	05 c0       	rjmp	.+10     	; 0x28b0 <xTaskGenericNotifyFromISR+0x44>
    28a6:	23 30       	cpi	r18, 0x03	; 3
    28a8:	e1 f0       	breq	.+56     	; 0x28e2 <xTaskGenericNotifyFromISR+0x76>
    28aa:	24 30       	cpi	r18, 0x04	; 4
    28ac:	31 f5       	brne	.+76     	; 0x28fa <xTaskGenericNotifyFromISR+0x8e>
    28ae:	1e c0       	rjmp	.+60     	; 0x28ec <xTaskGenericNotifyFromISR+0x80>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    28b0:	8d a1       	lds	r24, 0x4d
    28b2:	9e a1       	lds	r25, 0x4e
    28b4:	af a1       	lds	r26, 0x4f
    28b6:	b8 a5       	lds	r27, 0x68
    28b8:	84 2b       	or	r24, r20
    28ba:	95 2b       	or	r25, r21
    28bc:	a6 2b       	or	r26, r22
    28be:	b7 2b       	or	r27, r23
    28c0:	8d a3       	lds	r24, 0x5d
    28c2:	9e a3       	lds	r25, 0x5e
    28c4:	af a3       	lds	r26, 0x5f
    28c6:	b8 a7       	lds	r27, 0x78
					break;
    28c8:	18 c0       	rjmp	.+48     	; 0x28fa <xTaskGenericNotifyFromISR+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    28ca:	8d a1       	lds	r24, 0x4d
    28cc:	9e a1       	lds	r25, 0x4e
    28ce:	af a1       	lds	r26, 0x4f
    28d0:	b8 a5       	lds	r27, 0x68
    28d2:	01 96       	adiw	r24, 0x01	; 1
    28d4:	a1 1d       	adc	r26, r1
    28d6:	b1 1d       	adc	r27, r1
    28d8:	8d a3       	lds	r24, 0x5d
    28da:	9e a3       	lds	r25, 0x5e
    28dc:	af a3       	lds	r26, 0x5f
    28de:	b8 a7       	lds	r27, 0x78
					break;
    28e0:	0c c0       	rjmp	.+24     	; 0x28fa <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    28e2:	4d a3       	lds	r20, 0x5d
    28e4:	5e a3       	lds	r21, 0x5e
    28e6:	6f a3       	lds	r22, 0x5f
    28e8:	78 a7       	lds	r23, 0x78
					break;
    28ea:	07 c0       	rjmp	.+14     	; 0x28fa <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    28ec:	32 30       	cpi	r19, 0x02	; 2
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <xTaskGenericNotifyFromISR+0x86>
    28f0:	41 c0       	rjmp	.+130    	; 0x2974 <xTaskGenericNotifyFromISR+0x108>
					{
						pxTCB->ulNotifiedValue = ulValue;
    28f2:	4d a3       	lds	r20, 0x5d
    28f4:	5e a3       	lds	r21, 0x5e
    28f6:	6f a3       	lds	r22, 0x5f
    28f8:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    28fa:	31 30       	cpi	r19, 0x01	; 1
    28fc:	e9 f5       	brne	.+122    	; 0x2978 <xTaskGenericNotifyFromISR+0x10c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    28fe:	80 91 97 03 	lds	r24, 0x0397
    2902:	88 23       	and	r24, r24
    2904:	e9 f4       	brne	.+58     	; 0x2940 <xTaskGenericNotifyFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2906:	8e 01       	movw	r16, r28
    2908:	0e 5f       	subi	r16, 0xFE	; 254
    290a:	1f 4f       	sbci	r17, 0xFF	; 255
    290c:	c8 01       	movw	r24, r16
    290e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2912:	8e 89       	ldd	r24, Y+22	; 0x16
    2914:	90 91 9e 03 	lds	r25, 0x039E
    2918:	98 17       	cp	r25, r24
    291a:	10 f4       	brcc	.+4      	; 0x2920 <xTaskGenericNotifyFromISR+0xb4>
    291c:	80 93 9e 03 	sts	0x039E, r24
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9c 01       	movw	r18, r24
    2924:	22 0f       	add	r18, r18
    2926:	33 1f       	adc	r19, r19
    2928:	22 0f       	add	r18, r18
    292a:	33 1f       	adc	r19, r19
    292c:	22 0f       	add	r18, r18
    292e:	33 1f       	adc	r19, r19
    2930:	82 0f       	add	r24, r18
    2932:	93 1f       	adc	r25, r19
    2934:	88 55       	subi	r24, 0x58	; 88
    2936:	9c 4f       	sbci	r25, 0xFC	; 252
    2938:	b8 01       	movw	r22, r16
    293a:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    293e:	07 c0       	rjmp	.+14     	; 0x294e <xTaskGenericNotifyFromISR+0xe2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2940:	be 01       	movw	r22, r28
    2942:	64 5f       	subi	r22, 0xF4	; 244
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	87 ee       	ldi	r24, 0xE7	; 231
    2948:	93 e0       	ldi	r25, 0x03	; 3
    294a:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    294e:	e0 91 95 03 	lds	r30, 0x0395
    2952:	f0 91 96 03 	lds	r31, 0x0396
    2956:	9e 89       	ldd	r25, Y+22	; 0x16
    2958:	86 89       	ldd	r24, Z+22	; 0x16
    295a:	89 17       	cp	r24, r25
    295c:	78 f4       	brcc	.+30     	; 0x297c <xTaskGenericNotifyFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    295e:	e1 14       	cp	r14, r1
    2960:	f1 04       	cpc	r15, r1
    2962:	21 f0       	breq	.+8      	; 0x296c <xTaskGenericNotifyFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	f7 01       	movw	r30, r14
    2968:	80 83       	st	Z, r24
    296a:	09 c0       	rjmp	.+18     	; 0x297e <xTaskGenericNotifyFromISR+0x112>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	80 93 9b 03 	sts	0x039B, r24
    2972:	05 c0       	rjmp	.+10     	; 0x297e <xTaskGenericNotifyFromISR+0x112>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	03 c0       	rjmp	.+6      	; 0x297e <xTaskGenericNotifyFromISR+0x112>

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	01 c0       	rjmp	.+2      	; 0x297e <xTaskGenericNotifyFromISR+0x112>
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    297c:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	08 95       	ret

0000298c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	ec 01       	movw	r28, r24
    299a:	8b 01       	movw	r16, r22

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    299c:	29 a5       	lds	r18, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    299e:	82 e0       	ldi	r24, 0x02	; 2
    29a0:	89 a7       	lds	r24, 0x79

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    29a2:	8d a1       	lds	r24, 0x4d
    29a4:	9e a1       	lds	r25, 0x4e
    29a6:	af a1       	lds	r26, 0x4f
    29a8:	b8 a5       	lds	r27, 0x68
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	a1 1d       	adc	r26, r1
    29ae:	b1 1d       	adc	r27, r1
    29b0:	8d a3       	lds	r24, 0x5d
    29b2:	9e a3       	lds	r25, 0x5e
    29b4:	af a3       	lds	r26, 0x5f
    29b6:	b8 a7       	lds	r27, 0x78

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    29b8:	21 30       	cpi	r18, 0x01	; 1
    29ba:	e9 f5       	brne	.+122    	; 0x2a36 <vTaskNotifyGiveFromISR+0xaa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    29bc:	80 91 97 03 	lds	r24, 0x0397
    29c0:	88 23       	and	r24, r24
    29c2:	01 f5       	brne	.+64     	; 0x2a04 <vTaskNotifyGiveFromISR+0x78>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    29c4:	ee 24       	eor	r14, r14
    29c6:	ff 24       	eor	r15, r15
    29c8:	68 94       	set
    29ca:	e1 f8       	bld	r14, 1
    29cc:	ec 0e       	add	r14, r28
    29ce:	fd 1e       	adc	r15, r29
    29d0:	c7 01       	movw	r24, r14
    29d2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    29d6:	8e 89       	ldd	r24, Y+22	; 0x16
    29d8:	90 91 9e 03 	lds	r25, 0x039E
    29dc:	98 17       	cp	r25, r24
    29de:	10 f4       	brcc	.+4      	; 0x29e4 <vTaskNotifyGiveFromISR+0x58>
    29e0:	80 93 9e 03 	sts	0x039E, r24
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9c 01       	movw	r18, r24
    29e8:	22 0f       	add	r18, r18
    29ea:	33 1f       	adc	r19, r19
    29ec:	22 0f       	add	r18, r18
    29ee:	33 1f       	adc	r19, r19
    29f0:	22 0f       	add	r18, r18
    29f2:	33 1f       	adc	r19, r19
    29f4:	82 0f       	add	r24, r18
    29f6:	93 1f       	adc	r25, r19
    29f8:	88 55       	subi	r24, 0x58	; 88
    29fa:	9c 4f       	sbci	r25, 0xFC	; 252
    29fc:	b7 01       	movw	r22, r14
    29fe:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    2a02:	07 c0       	rjmp	.+14     	; 0x2a12 <vTaskNotifyGiveFromISR+0x86>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2a04:	be 01       	movw	r22, r28
    2a06:	64 5f       	subi	r22, 0xF4	; 244
    2a08:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0a:	87 ee       	ldi	r24, 0xE7	; 231
    2a0c:	93 e0       	ldi	r25, 0x03	; 3
    2a0e:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2a12:	e0 91 95 03 	lds	r30, 0x0395
    2a16:	f0 91 96 03 	lds	r31, 0x0396
    2a1a:	9e 89       	ldd	r25, Y+22	; 0x16
    2a1c:	86 89       	ldd	r24, Z+22	; 0x16
    2a1e:	89 17       	cp	r24, r25
    2a20:	50 f4       	brcc	.+20     	; 0x2a36 <vTaskNotifyGiveFromISR+0xaa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    2a22:	01 15       	cp	r16, r1
    2a24:	11 05       	cpc	r17, r1
    2a26:	21 f0       	breq	.+8      	; 0x2a30 <vTaskNotifyGiveFromISR+0xa4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	80 83       	st	Z, r24
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <vTaskNotifyGiveFromISR+0xaa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	80 93 9b 03 	sts	0x039B, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	ff 90       	pop	r15
    2a40:	ef 90       	pop	r14
    2a42:	08 95       	ret

00002a44 <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	29 f4       	brne	.+10     	; 0x2a52 <xTaskNotifyStateClear+0xe>
    2a48:	e0 91 95 03 	lds	r30, 0x0395
    2a4c:	f0 91 96 03 	lds	r31, 0x0396
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <xTaskNotifyStateClear+0x10>
    2a52:	fc 01       	movw	r30, r24

		taskENTER_CRITICAL();
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2a5a:	81 a5       	lds	r24, 0x61
    2a5c:	82 30       	cpi	r24, 0x02	; 2
    2a5e:	19 f4       	brne	.+6      	; 0x2a66 <xTaskNotifyStateClear+0x22>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2a60:	11 a6       	lds	r17, 0xb1
				xReturn = pdPASS;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	01 c0       	rjmp	.+2      	; 0x2a68 <xTaskNotifyStateClear+0x24>
			}
			else
			{
				xReturn = pdFAIL;
    2a66:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    2a68:	0f 90       	pop	r0
    2a6a:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    2a6c:	08 95       	ret

00002a6e <memcpy>:
    2a6e:	fb 01       	movw	r30, r22
    2a70:	dc 01       	movw	r26, r24
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <memcpy+0xa>
    2a74:	01 90       	ld	r0, Z+
    2a76:	0d 92       	st	X+, r0
    2a78:	41 50       	subi	r20, 0x01	; 1
    2a7a:	50 40       	sbci	r21, 0x00	; 0
    2a7c:	d8 f7       	brcc	.-10     	; 0x2a74 <memcpy+0x6>
    2a7e:	08 95       	ret

00002a80 <_exit>:
    2a80:	f8 94       	cli

00002a82 <__stop_program>:
    2a82:	ff cf       	rjmp	.-2      	; 0x2a82 <__stop_program>
