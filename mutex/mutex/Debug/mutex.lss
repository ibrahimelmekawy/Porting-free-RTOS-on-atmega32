
mutex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002acc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002acc  00002b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003be  0080006c  0080006c  00002b6c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00002b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000033a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035f0  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5a  00000000  00000000  00006af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000144d  00000000  00000000  00007752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b8c  00000000  00000000  00008ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001540  00000000  00000000  0000972c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040d3  00000000  00000000  0000ac6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000ed3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 32       	cpi	r26, 0x2A	; 42
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 05 	call	0xb30	; 0xb30 <main>
      8a:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:



void DIO_vsetPINDir(char portname,char pinnumber,char direction)
{
	switch(portname)
      92:	82 34       	cpi	r24, 0x42	; 66
      94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPINDir+0x58>
      96:	83 34       	cpi	r24, 0x43	; 67
      98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPINDir+0x10>
      9a:	81 34       	cpi	r24, 0x41	; 65
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPINDir+0xe>
      9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPINDir+0x104>
      a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPINDir+0x1e>
      a2:	83 34       	cpi	r24, 0x43	; 67
      a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
      a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPINDir+0x92>
      a8:	84 34       	cpi	r24, 0x44	; 68
      aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0x1c>
      ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPINDir+0x104>
      ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPINDir+0xcc>
	{
		
	
	case 'A':
	if(direction==1)
      b0:	41 30       	cpi	r20, 0x01	; 1
      b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPINDir+0x3c>
	{
		DDRA|=(1<<pinnumber);
      b4:	2a b3       	in	r18, 0x1a	; 26
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	ac 01       	movw	r20, r24
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPINDir+0x30>
      be:	44 0f       	add	r20, r20
      c0:	55 1f       	adc	r21, r21
      c2:	6a 95       	dec	r22
      c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPINDir+0x2c>
      c6:	ba 01       	movw	r22, r20
      c8:	62 2b       	or	r22, r18
      ca:	6a bb       	out	0x1a, r22	; 26
      cc:	08 95       	ret
	}
	else
	{
		DDRA&=(~(1<<pinnumber));
      ce:	2a b3       	in	r18, 0x1a	; 26
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	ac 01       	movw	r20, r24
      d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x4a>
      d8:	44 0f       	add	r20, r20
      da:	55 1f       	adc	r21, r21
      dc:	6a 95       	dec	r22
      de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x46>
      e0:	ba 01       	movw	r22, r20
      e2:	60 95       	com	r22
      e4:	62 23       	and	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
	}
	break;
	case 'B':
	if(direction==1)
      ea:	41 30       	cpi	r20, 0x01	; 1
      ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPINDir+0x76>
	{
		DDRB|=(1<<pinnumber);
      ee:	27 b3       	in	r18, 0x17	; 23
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	ac 01       	movw	r20, r24
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPINDir+0x6a>
      f8:	44 0f       	add	r20, r20
      fa:	55 1f       	adc	r21, r21
      fc:	6a 95       	dec	r22
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPINDir+0x66>
     100:	ba 01       	movw	r22, r20
     102:	62 2b       	or	r22, r18
     104:	67 bb       	out	0x17, r22	; 23
     106:	08 95       	ret
	}
	else
	{
		DDRB&=(~(1<<pinnumber));
     108:	27 b3       	in	r18, 0x17	; 23
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	ac 01       	movw	r20, r24
     110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x84>
     112:	44 0f       	add	r20, r20
     114:	55 1f       	adc	r21, r21
     116:	6a 95       	dec	r22
     118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x80>
     11a:	ba 01       	movw	r22, r20
     11c:	60 95       	com	r22
     11e:	62 23       	and	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
	}
	break;
	case 'C':
	if(direction==1)
     124:	41 30       	cpi	r20, 0x01	; 1
     126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPINDir+0xb0>
	{
		DDRC|=(1<<pinnumber);
     128:	24 b3       	in	r18, 0x14	; 20
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	ac 01       	movw	r20, r24
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0xa4>
     132:	44 0f       	add	r20, r20
     134:	55 1f       	adc	r21, r21
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0xa0>
     13a:	ba 01       	movw	r22, r20
     13c:	62 2b       	or	r22, r18
     13e:	64 bb       	out	0x14, r22	; 20
     140:	08 95       	ret
	}
	else
	{
		DDRC&=(~(1<<pinnumber));
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	ac 01       	movw	r20, r24
     14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
     14c:	44 0f       	add	r20, r20
     14e:	55 1f       	adc	r21, r21
     150:	6a 95       	dec	r22
     152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
     154:	ba 01       	movw	r22, r20
     156:	60 95       	com	r22
     158:	62 23       	and	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
	}
	break;
	case 'D':
	if(direction==1)
     15e:	41 30       	cpi	r20, 0x01	; 1
     160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPINDir+0xea>
	{
		DDRD|=(1<<pinnumber);
     162:	21 b3       	in	r18, 0x11	; 17
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	ac 01       	movw	r20, r24
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPINDir+0xde>
     16c:	44 0f       	add	r20, r20
     16e:	55 1f       	adc	r21, r21
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPINDir+0xda>
     174:	ba 01       	movw	r22, r20
     176:	62 2b       	or	r22, r18
     178:	61 bb       	out	0x11, r22	; 17
     17a:	08 95       	ret
	}
	else
	{
		DDRD&=(~(1<<pinnumber));
     17c:	21 b3       	in	r18, 0x11	; 17
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	ac 01       	movw	r20, r24
     184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xf8>
     186:	44 0f       	add	r20, r20
     188:	55 1f       	adc	r21, r21
     18a:	6a 95       	dec	r22
     18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xf4>
     18e:	ba 01       	movw	r22, r20
     190:	60 95       	com	r22
     192:	62 23       	and	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret

00000198 <DIO_write>:
}


void DIO_write(char portname,char pinnumber,char outputvalue)
{
	switch(portname)
     198:	82 34       	cpi	r24, 0x42	; 66
     19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
     19c:	83 34       	cpi	r24, 0x43	; 67
     19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
     1a0:	81 34       	cpi	r24, 0x41	; 65
     1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
     1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
     1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
     1a8:	83 34       	cpi	r24, 0x43	; 67
     1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
     1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
     1ae:	84 34       	cpi	r24, 0x44	; 68
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
     1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
     1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
	{
		case 'A' :
		
			if(outputvalue==1)
     1b6:	41 30       	cpi	r20, 0x01	; 1
     1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
			{
				PORTA|=(1<<pinnumber);
     1ba:	2b b3       	in	r18, 0x1b	; 27
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	ac 01       	movw	r20, r24
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
     1c4:	44 0f       	add	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	6a 95       	dec	r22
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
     1cc:	ba 01       	movw	r22, r20
     1ce:	62 2b       	or	r22, r18
     1d0:	6b bb       	out	0x1b, r22	; 27
     1d2:	08 95       	ret
			}
			else
			{
				PORTA&=(~(1<<pinnumber));
     1d4:	2b b3       	in	r18, 0x1b	; 27
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	ac 01       	movw	r20, r24
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
     1de:	44 0f       	add	r20, r20
     1e0:	55 1f       	adc	r21, r21
     1e2:	6a 95       	dec	r22
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
     1e6:	ba 01       	movw	r22, r20
     1e8:	60 95       	com	r22
     1ea:	62 23       	and	r22, r18
     1ec:	6b bb       	out	0x1b, r22	; 27
     1ee:	08 95       	ret
			}
			break ;
			case 'B':
			
			if(outputvalue==1)
     1f0:	41 30       	cpi	r20, 0x01	; 1
     1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
			{
				PORTB|=(1<<pinnumber);
     1f4:	28 b3       	in	r18, 0x18	; 24
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	ac 01       	movw	r20, r24
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
     206:	ba 01       	movw	r22, r20
     208:	62 2b       	or	r22, r18
     20a:	68 bb       	out	0x18, r22	; 24
     20c:	08 95       	ret
			}
			else
			{
				PORTB&=(~(1<<pinnumber));
     20e:	28 b3       	in	r18, 0x18	; 24
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	ac 01       	movw	r20, r24
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
     218:	44 0f       	add	r20, r20
     21a:	55 1f       	adc	r21, r21
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
     220:	ba 01       	movw	r22, r20
     222:	60 95       	com	r22
     224:	62 23       	and	r22, r18
     226:	68 bb       	out	0x18, r22	; 24
     228:	08 95       	ret
			}
			break ;
			case 'C' :
			
			if(outputvalue==1)
     22a:	41 30       	cpi	r20, 0x01	; 1
     22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
			{
				PORTC|=(1<<pinnumber);
     22e:	25 b3       	in	r18, 0x15	; 21
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	ac 01       	movw	r20, r24
     236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
     240:	ba 01       	movw	r22, r20
     242:	62 2b       	or	r22, r18
     244:	65 bb       	out	0x15, r22	; 21
     246:	08 95       	ret
			}
			else
			{
				PORTC&=(~(1<<pinnumber));
     248:	25 b3       	in	r18, 0x15	; 21
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	ac 01       	movw	r20, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	6a 95       	dec	r22
     258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
     25a:	ba 01       	movw	r22, r20
     25c:	60 95       	com	r22
     25e:	62 23       	and	r22, r18
     260:	65 bb       	out	0x15, r22	; 21
     262:	08 95       	ret
			}
			break ;
		case 'D':
		
		if(outputvalue==1)
     264:	41 30       	cpi	r20, 0x01	; 1
     266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
		{
			PORTD|=(1<<pinnumber);
     268:	22 b3       	in	r18, 0x12	; 18
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	ac 01       	movw	r20, r24
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
     272:	44 0f       	add	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
     27a:	ba 01       	movw	r22, r20
     27c:	62 2b       	or	r22, r18
     27e:	62 bb       	out	0x12, r22	; 18
     280:	08 95       	ret
		}
		else
	{
			PORTD&=(~(1<<pinnumber));
     282:	22 b3       	in	r18, 0x12	; 18
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	ac 01       	movw	r20, r24
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
     28c:	44 0f       	add	r20, r20
     28e:	55 1f       	adc	r21, r21
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
     294:	ba 01       	movw	r22, r20
     296:	60 95       	com	r22
     298:	62 23       	and	r22, r18
     29a:	62 bb       	out	0x12, r22	; 18
     29c:	08 95       	ret

0000029e <DIO_u8read>:


char DIO_u8read(char portname,char pinnumber)
{
	char x ;
	switch(portname)
     29e:	82 34       	cpi	r24, 0x42	; 66
     2a0:	f9 f0       	breq	.+62     	; 0x2e0 <DIO_u8read+0x42>
     2a2:	83 34       	cpi	r24, 0x43	; 67
     2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_u8read+0x10>
     2a6:	81 34       	cpi	r24, 0x41	; 65
     2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8read+0xe>
     2aa:	52 c0       	rjmp	.+164    	; 0x350 <DIO_u8read+0xb2>
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_u8read+0x1c>
     2ae:	83 34       	cpi	r24, 0x43	; 67
     2b0:	51 f1       	breq	.+84     	; 0x306 <DIO_u8read+0x68>
     2b2:	84 34       	cpi	r24, 0x44	; 68
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_u8read+0x1a>
     2b6:	4c c0       	rjmp	.+152    	; 0x350 <DIO_u8read+0xb2>
     2b8:	39 c0       	rjmp	.+114    	; 0x32c <DIO_u8read+0x8e>
	{
		case 'A' :
		x=((PINA&(1<<pinnumber))>>pinnumber);
     2ba:	29 b3       	in	r18, 0x19	; 25
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	06 2e       	mov	r0, r22
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x2a>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	0a 94       	dec	r0
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x26>
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	82 23       	and	r24, r18
     2d0:	93 23       	and	r25, r19
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8read+0x3a>
     2d4:	95 95       	asr	r25
     2d6:	87 95       	ror	r24
     2d8:	6a 95       	dec	r22
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8read+0x36>
     2dc:	98 2f       	mov	r25, r24
		break;
     2de:	38 c0       	rjmp	.+112    	; 0x350 <DIO_u8read+0xb2>
		
	case 'B' :
	x=((PINB&(1<<pinnumber))>>pinnumber) ;
     2e0:	26 b3       	in	r18, 0x16	; 22
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	06 2e       	mov	r0, r22
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_u8read+0x50>
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_u8read+0x4c>
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	82 23       	and	r24, r18
     2f6:	93 23       	and	r25, r19
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_u8read+0x60>
     2fa:	95 95       	asr	r25
     2fc:	87 95       	ror	r24
     2fe:	6a 95       	dec	r22
     300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_u8read+0x5c>
     302:	98 2f       	mov	r25, r24
	break;
     304:	25 c0       	rjmp	.+74     	; 0x350 <DIO_u8read+0xb2>
	
	case 'C' :
	x=((PINC&(1<<pinnumber))>>pinnumber) ;
     306:	23 b3       	in	r18, 0x13	; 19
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	06 2e       	mov	r0, r22
     30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8read+0x76>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8read+0x72>
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	82 23       	and	r24, r18
     31c:	93 23       	and	r25, r19
     31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_u8read+0x86>
     320:	95 95       	asr	r25
     322:	87 95       	ror	r24
     324:	6a 95       	dec	r22
     326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_u8read+0x82>
     328:	98 2f       	mov	r25, r24
	break;
     32a:	12 c0       	rjmp	.+36     	; 0x350 <DIO_u8read+0xb2>
	
	case 'D' :
	x=((PIND&(1<<pinnumber))>>pinnumber) ;
     32c:	20 b3       	in	r18, 0x10	; 16
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	06 2e       	mov	r0, r22
     334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_u8read+0x9c>
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	0a 94       	dec	r0
     33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_u8read+0x98>
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	82 23       	and	r24, r18
     342:	93 23       	and	r25, r19
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_u8read+0xac>
     346:	95 95       	asr	r25
     348:	87 95       	ror	r24
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_u8read+0xa8>
     34e:	98 2f       	mov	r25, r24
	break;
	default: break;
}
return x ;
}
     350:	89 2f       	mov	r24, r25
     352:	08 95       	ret

00000354 <DIO_toggle>:
void DIO_toggle(char portname,char pinnumber)
{
	switch(portname)
     354:	82 34       	cpi	r24, 0x42	; 66
     356:	b9 f0       	breq	.+46     	; 0x386 <DIO_toggle+0x32>
     358:	83 34       	cpi	r24, 0x43	; 67
     35a:	18 f4       	brcc	.+6      	; 0x362 <DIO_toggle+0xe>
     35c:	81 34       	cpi	r24, 0x41	; 65
     35e:	c9 f5       	brne	.+114    	; 0x3d2 <DIO_toggle+0x7e>
     360:	05 c0       	rjmp	.+10     	; 0x36c <DIO_toggle+0x18>
     362:	83 34       	cpi	r24, 0x43	; 67
     364:	e9 f0       	breq	.+58     	; 0x3a0 <DIO_toggle+0x4c>
     366:	84 34       	cpi	r24, 0x44	; 68
     368:	a1 f5       	brne	.+104    	; 0x3d2 <DIO_toggle+0x7e>
     36a:	27 c0       	rjmp	.+78     	; 0x3ba <DIO_toggle+0x66>
	{
		case 'A':
		PORTA^=(1<<pinnumber);
     36c:	2b b3       	in	r18, 0x1b	; 27
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	ac 01       	movw	r20, r24
     374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_toggle+0x26>
     376:	44 0f       	add	r20, r20
     378:	55 1f       	adc	r21, r21
     37a:	6a 95       	dec	r22
     37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_toggle+0x22>
     37e:	ba 01       	movw	r22, r20
     380:	62 27       	eor	r22, r18
     382:	6b bb       	out	0x1b, r22	; 27
		break;
     384:	08 95       	ret
		case 'B':
		PORTB^=(1<<pinnumber);
     386:	28 b3       	in	r18, 0x18	; 24
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	ac 01       	movw	r20, r24
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_toggle+0x40>
     390:	44 0f       	add	r20, r20
     392:	55 1f       	adc	r21, r21
     394:	6a 95       	dec	r22
     396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_toggle+0x3c>
     398:	ba 01       	movw	r22, r20
     39a:	62 27       	eor	r22, r18
     39c:	68 bb       	out	0x18, r22	; 24
		break;
     39e:	08 95       	ret
		case 'C':
		PORTC^=(1<<pinnumber);
     3a0:	25 b3       	in	r18, 0x15	; 21
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	ac 01       	movw	r20, r24
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_toggle+0x5a>
     3aa:	44 0f       	add	r20, r20
     3ac:	55 1f       	adc	r21, r21
     3ae:	6a 95       	dec	r22
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_toggle+0x56>
     3b2:	ba 01       	movw	r22, r20
     3b4:	62 27       	eor	r22, r18
     3b6:	65 bb       	out	0x15, r22	; 21
		break;
     3b8:	08 95       	ret
		case 'D':
		PORTD^=(1<<pinnumber);
     3ba:	22 b3       	in	r18, 0x12	; 18
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	ac 01       	movw	r20, r24
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_toggle+0x74>
     3c4:	44 0f       	add	r20, r20
     3c6:	55 1f       	adc	r21, r21
     3c8:	6a 95       	dec	r22
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_toggle+0x70>
     3cc:	ba 01       	movw	r22, r20
     3ce:	62 27       	eor	r22, r18
     3d0:	62 bb       	out	0x12, r22	; 18
     3d2:	08 95       	ret

000003d4 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(char portname,char portvalue)
{
	switch(portname)
     3d4:	82 34       	cpi	r24, 0x42	; 66
     3d6:	61 f0       	breq	.+24     	; 0x3f0 <DIO_write_port+0x1c>
     3d8:	83 34       	cpi	r24, 0x43	; 67
     3da:	18 f4       	brcc	.+6      	; 0x3e2 <DIO_write_port+0xe>
     3dc:	81 34       	cpi	r24, 0x41	; 65
     3de:	69 f4       	brne	.+26     	; 0x3fa <DIO_write_port+0x26>
     3e0:	05 c0       	rjmp	.+10     	; 0x3ec <DIO_write_port+0x18>
     3e2:	83 34       	cpi	r24, 0x43	; 67
     3e4:	39 f0       	breq	.+14     	; 0x3f4 <DIO_write_port+0x20>
     3e6:	84 34       	cpi	r24, 0x44	; 68
     3e8:	41 f4       	brne	.+16     	; 0x3fa <DIO_write_port+0x26>
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue;
     3ec:	6b bb       	out	0x1b, r22	; 27
		break ;
     3ee:	08 95       	ret
		case 'B':
		PORTB=portvalue;
     3f0:	68 bb       	out	0x18, r22	; 24
		break ;
     3f2:	08 95       	ret
		case 'C' :
		PORTC=portvalue;
     3f4:	65 bb       	out	0x15, r22	; 21
		break ;
     3f6:	08 95       	ret
		case 'D':
		PORTD=portvalue;
     3f8:	62 bb       	out	0x12, r22	; 18
     3fa:	08 95       	ret

000003fc <dio_write_highnibble>:
		default: break ;
	}
}
void dio_write_highnibble(char portname,char value)
{
		switch(portname)
     3fc:	82 34       	cpi	r24, 0x42	; 66
     3fe:	79 f0       	breq	.+30     	; 0x41e <dio_write_highnibble+0x22>
     400:	83 34       	cpi	r24, 0x43	; 67
     402:	18 f4       	brcc	.+6      	; 0x40a <dio_write_highnibble+0xe>
     404:	81 34       	cpi	r24, 0x41	; 65
     406:	c9 f4       	brne	.+50     	; 0x43a <dio_write_highnibble+0x3e>
     408:	05 c0       	rjmp	.+10     	; 0x414 <dio_write_highnibble+0x18>
     40a:	83 34       	cpi	r24, 0x43	; 67
     40c:	69 f0       	breq	.+26     	; 0x428 <dio_write_highnibble+0x2c>
     40e:	84 34       	cpi	r24, 0x44	; 68
     410:	a1 f4       	brne	.+40     	; 0x43a <dio_write_highnibble+0x3e>
     412:	0f c0       	rjmp	.+30     	; 0x432 <dio_write_highnibble+0x36>
		{
			case 'A' :
			PORTA|=(value&0xf0);
     414:	8b b3       	in	r24, 0x1b	; 27
     416:	60 7f       	andi	r22, 0xF0	; 240
     418:	68 2b       	or	r22, r24
     41a:	6b bb       	out	0x1b, r22	; 27
			break ;
     41c:	08 95       	ret
			case 'B':
			PORTB|=(value&0xf0);
     41e:	88 b3       	in	r24, 0x18	; 24
     420:	60 7f       	andi	r22, 0xF0	; 240
     422:	68 2b       	or	r22, r24
     424:	68 bb       	out	0x18, r22	; 24
			break ;
     426:	08 95       	ret
			case 'C' :
			PORTC|=(value&0xf0);
     428:	85 b3       	in	r24, 0x15	; 21
     42a:	60 7f       	andi	r22, 0xF0	; 240
     42c:	68 2b       	or	r22, r24
     42e:	65 bb       	out	0x15, r22	; 21
			break ;
     430:	08 95       	ret
			case 'D':
			PORTD|=(value&0xf0);
     432:	82 b3       	in	r24, 0x12	; 18
     434:	60 7f       	andi	r22, 0xF0	; 240
     436:	68 2b       	or	r22, r24
     438:	62 bb       	out	0x12, r22	; 18
     43a:	08 95       	ret

0000043c <clear_high_nibble>:
	
}
}
void clear_high_nibble(char portname)
{
	switch(portname)
     43c:	82 34       	cpi	r24, 0x42	; 66
     43e:	71 f0       	breq	.+28     	; 0x45c <clear_high_nibble+0x20>
     440:	83 34       	cpi	r24, 0x43	; 67
     442:	18 f4       	brcc	.+6      	; 0x44a <clear_high_nibble+0xe>
     444:	81 34       	cpi	r24, 0x41	; 65
     446:	a9 f4       	brne	.+42     	; 0x472 <clear_high_nibble+0x36>
     448:	05 c0       	rjmp	.+10     	; 0x454 <clear_high_nibble+0x18>
     44a:	83 34       	cpi	r24, 0x43	; 67
     44c:	59 f0       	breq	.+22     	; 0x464 <clear_high_nibble+0x28>
     44e:	84 34       	cpi	r24, 0x44	; 68
     450:	81 f4       	brne	.+32     	; 0x472 <clear_high_nibble+0x36>
     452:	0c c0       	rjmp	.+24     	; 0x46c <clear_high_nibble+0x30>
	{
		case 'A' :
		PORTA&=0x0f;
     454:	8b b3       	in	r24, 0x1b	; 27
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	8b bb       	out	0x1b, r24	; 27
		break ;
     45a:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
     45c:	88 b3       	in	r24, 0x18	; 24
     45e:	8f 70       	andi	r24, 0x0F	; 15
     460:	88 bb       	out	0x18, r24	; 24
		break ;
     462:	08 95       	ret
		case 'C' :
		PORTC&=0x0f;
     464:	85 b3       	in	r24, 0x15	; 21
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	85 bb       	out	0x15, r24	; 21
		break ;
     46a:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
     46c:	82 b3       	in	r24, 0x12	; 18
     46e:	8f 70       	andi	r24, 0x0F	; 15
     470:	82 bb       	out	0x12, r24	; 18
     472:	08 95       	ret

00000474 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
     474:	44 23       	and	r20, r20
     476:	41 f4       	brne	.+16     	; 0x488 <prvTestWaitCondition+0x14>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     478:	68 23       	and	r22, r24
     47a:	79 23       	and	r23, r25
		{
			xWaitConditionMet = pdTRUE;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	61 15       	cp	r22, r1
     480:	71 05       	cpc	r23, r1
     482:	51 f4       	brne	.+20     	; 0x498 <prvTestWaitCondition+0x24>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	08 95       	ret
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     488:	9b 01       	movw	r18, r22
     48a:	28 23       	and	r18, r24
     48c:	39 23       	and	r19, r25
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
		{
			xWaitConditionMet = pdTRUE;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	62 17       	cp	r22, r18
     492:	73 07       	cpc	r23, r19
     494:	09 f0       	breq	.+2      	; 0x498 <prvTestWaitCondition+0x24>
     496:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
     498:	08 95       	ret

0000049a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
     49e:	8b e0       	ldi	r24, 0x0B	; 11
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <pvPortMalloc>
     4a6:	ec 01       	movw	r28, r24

		if( pxEventBits != NULL )
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	31 f0       	breq	.+12     	; 0x4b8 <xEventGroupCreate+0x1e>
		{
			pxEventBits->uxEventBits = 0;
     4ac:	fc 01       	movw	r30, r24
     4ae:	11 92       	st	Z+, r1
     4b0:	11 92       	st	Z+, r1
     4b2:	cf 01       	movw	r24, r30
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     4b4:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
     4b8:	8c 2f       	mov	r24, r28
     4ba:	9d 2f       	mov	r25, r29
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     4c2:	af 92       	push	r10
     4c4:	bf 92       	push	r11
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	5c 01       	movw	r10, r24
     4d8:	6b 01       	movw	r12, r22
     4da:	e4 2e       	mov	r14, r20
     4dc:	f2 2e       	mov	r15, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     4de:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     4e2:	f5 01       	movw	r30, r10
     4e4:	c0 81       	ld	r28, Z
     4e6:	d1 81       	ldd	r29, Z+1	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     4e8:	ce 01       	movw	r24, r28
     4ea:	b6 01       	movw	r22, r12
     4ec:	4f 2d       	mov	r20, r15
     4ee:	0e 94 3a 02 	call	0x474	; 0x474 <prvTestWaitCondition>

		if( xWaitConditionMet != pdFALSE )
     4f2:	88 23       	and	r24, r24
     4f4:	51 f0       	breq	.+20     	; 0x50a <xEventGroupWaitBits+0x48>
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     4f6:	ee 20       	and	r14, r14
     4f8:	01 f1       	breq	.+64     	; 0x53a <xEventGroupWaitBits+0x78>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     4fa:	c0 94       	com	r12
     4fc:	d0 94       	com	r13
     4fe:	cc 22       	and	r12, r28
     500:	dd 22       	and	r13, r29
     502:	f5 01       	movw	r30, r10
     504:	d1 82       	std	Z+1, r13	; 0x01
     506:	c0 82       	st	Z, r12
     508:	18 c0       	rjmp	.+48     	; 0x53a <xEventGroupWaitBits+0x78>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     50a:	01 15       	cp	r16, r1
     50c:	11 05       	cpc	r17, r1
     50e:	a9 f0       	breq	.+42     	; 0x53a <xEventGroupWaitBits+0x78>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     510:	ee 20       	and	r14, r14
     512:	19 f4       	brne	.+6      	; 0x51a <xEventGroupWaitBits+0x58>
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn, uxControlBits = 0;
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	02 c0       	rjmp	.+4      	; 0x51e <xEventGroupWaitBits+0x5c>
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	71 e0       	ldi	r23, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     51e:	f1 10       	cpse	r15, r1
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     520:	74 60       	ori	r23, 0x04	; 4
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     522:	6c 29       	or	r22, r12
     524:	7d 29       	or	r23, r13
     526:	c5 01       	movw	r24, r10
     528:	02 96       	adiw	r24, 0x02	; 2
     52a:	a8 01       	movw	r20, r16
     52c:	0e 94 56 11 	call	0x22ac	; 0x22ac <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     530:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     534:	88 23       	and	r24, r24
     536:	39 f4       	brne	.+14     	; 0x546 <xEventGroupWaitBits+0x84>
     538:	04 c0       	rjmp	.+8      	; 0x542 <xEventGroupWaitBits+0x80>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     53a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
     53e:	ce 01       	movw	r24, r28
     540:	21 c0       	rjmp	.+66     	; 0x584 <xEventGroupWaitBits+0xc2>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     542:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     546:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <uxTaskResetEventItemValue>
     54a:	ec 01       	movw	r28, r24

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     54c:	91 fd       	sbrc	r25, 1
     54e:	18 c0       	rjmp	.+48     	; 0x580 <xEventGroupWaitBits+0xbe>
		{
			taskENTER_CRITICAL();
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     556:	f5 01       	movw	r30, r10
     558:	c0 81       	ld	r28, Z
     55a:	d1 81       	ldd	r29, Z+1	; 0x01

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     55c:	ce 01       	movw	r24, r28
     55e:	b6 01       	movw	r22, r12
     560:	4f 2d       	mov	r20, r15
     562:	0e 94 3a 02 	call	0x474	; 0x474 <prvTestWaitCondition>
     566:	88 23       	and	r24, r24
     568:	49 f0       	breq	.+18     	; 0x57c <xEventGroupWaitBits+0xba>
				{
					if( xClearOnExit != pdFALSE )
     56a:	ee 20       	and	r14, r14
     56c:	39 f0       	breq	.+14     	; 0x57c <xEventGroupWaitBits+0xba>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     56e:	c0 94       	com	r12
     570:	d0 94       	com	r13
     572:	cc 22       	and	r12, r28
     574:	dd 22       	and	r13, r29
     576:	f5 01       	movw	r30, r10
     578:	d1 82       	std	Z+1, r13	; 0x01
     57a:	c0 82       	st	Z, r12
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     580:	ce 01       	movw	r24, r28
     582:	90 70       	andi	r25, 0x00	; 0
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	bf 90       	pop	r11
     596:	af 90       	pop	r10
     598:	08 95       	ret

0000059a <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     59a:	fc 01       	movw	r30, r24
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     5a6:	60 95       	com	r22
     5a8:	70 95       	com	r23
     5aa:	68 23       	and	r22, r24
     5ac:	79 23       	and	r23, r25
     5ae:	71 83       	std	Z+1, r23	; 0x01
     5b0:	60 83       	st	Z, r22
	}
	taskEXIT_CRITICAL();
     5b2:	0f 90       	pop	r0
     5b4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
     5b6:	08 95       	ret

000005b8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     5b8:	fc 01       	movw	r30, r24
		uxReturn = pxEventBits->uxEventBits;
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
}
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	08 95       	ret

000005c0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     5c0:	af 92       	push	r10
     5c2:	bf 92       	push	r11
     5c4:	cf 92       	push	r12
     5c6:	df 92       	push	r13
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	8c 01       	movw	r16, r24
     5d6:	eb 01       	movw	r28, r22
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5d8:	0f 2e       	mov	r0, r31
     5da:	f5 e0       	ldi	r31, 0x05	; 5
     5dc:	cf 2e       	mov	r12, r31
     5de:	dd 24       	eor	r13, r13
     5e0:	f0 2d       	mov	r31, r0
     5e2:	c8 0e       	add	r12, r24
     5e4:	d9 1e       	adc	r13, r25
	vTaskSuspendAll();
     5e6:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     5ea:	d8 01       	movw	r26, r16
     5ec:	17 96       	adiw	r26, 0x07	; 7
     5ee:	ed 91       	ld	r30, X+
     5f0:	fc 91       	ld	r31, X
     5f2:	18 97       	sbiw	r26, 0x08	; 8

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     5f4:	8d 91       	ld	r24, X+
     5f6:	9c 91       	ld	r25, X
     5f8:	11 97       	sbiw	r26, 0x01	; 1
     5fa:	8c 2b       	or	r24, r28
     5fc:	9d 2b       	or	r25, r29
     5fe:	11 96       	adiw	r26, 0x01	; 1
     600:	9c 93       	st	X, r25
     602:	8e 93       	st	-X, r24

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     604:	ce 16       	cp	r12, r30
     606:	df 06       	cpc	r13, r31
     608:	c1 f1       	breq	.+112    	; 0x67a <xEventGroupSetBits+0xba>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     60a:	aa 24       	eor	r10, r10
     60c:	bb 24       	eor	r11, r11
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     60e:	ff 24       	eor	r15, r15
     610:	f3 94       	inc	r15
     612:	ee 24       	eor	r14, r14
     614:	01 c0       	rjmp	.+2      	; 0x618 <xEventGroupSetBits+0x58>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     616:	fe 01       	movw	r30, r28
		{
			pxNext = listGET_NEXT( pxListItem );
     618:	c2 81       	ldd	r28, Z+2	; 0x02
     61a:	d3 81       	ldd	r29, Z+3	; 0x03
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     620:	bc 01       	movw	r22, r24
     622:	60 70       	andi	r22, 0x00	; 0
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     624:	9c 01       	movw	r18, r24
     626:	30 70       	andi	r19, 0x00	; 0

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     628:	92 fd       	sbrc	r25, 2
     62a:	0b c0       	rjmp	.+22     	; 0x642 <xEventGroupSetBits+0x82>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     62c:	d8 01       	movw	r26, r16
     62e:	8d 91       	ld	r24, X+
     630:	9c 91       	ld	r25, X
     632:	11 97       	sbiw	r26, 0x01	; 1
     634:	82 23       	and	r24, r18
     636:	93 23       	and	r25, r19
				{
					xMatchFound = pdTRUE;
     638:	4f 2d       	mov	r20, r15
     63a:	00 97       	sbiw	r24, 0x00	; 0
     63c:	69 f4       	brne	.+26     	; 0x658 <xEventGroupSetBits+0x98>
     63e:	4e 2d       	mov	r20, r14
     640:	0b c0       	rjmp	.+22     	; 0x658 <xEventGroupSetBits+0x98>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     642:	d8 01       	movw	r26, r16
     644:	8d 91       	ld	r24, X+
     646:	9c 91       	ld	r25, X
     648:	11 97       	sbiw	r26, 0x01	; 1
     64a:	82 23       	and	r24, r18
     64c:	93 23       	and	r25, r19
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     64e:	4f 2d       	mov	r20, r15
     650:	28 17       	cp	r18, r24
     652:	39 07       	cpc	r19, r25
     654:	09 f0       	breq	.+2      	; 0x658 <xEventGroupSetBits+0x98>
     656:	4e 2d       	mov	r20, r14
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     658:	44 23       	and	r20, r20
     65a:	59 f0       	breq	.+22     	; 0x672 <xEventGroupSetBits+0xb2>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     65c:	70 ff       	sbrs	r23, 0
     65e:	02 c0       	rjmp	.+4      	; 0x664 <xEventGroupSetBits+0xa4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     660:	a2 2a       	or	r10, r18
     662:	b3 2a       	or	r11, r19
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     664:	d8 01       	movw	r26, r16
     666:	6d 91       	ld	r22, X+
     668:	7c 91       	ld	r23, X
     66a:	72 60       	ori	r23, 0x02	; 2
     66c:	cf 01       	movw	r24, r30
     66e:	0e 94 ba 11 	call	0x2374	; 0x2374 <xTaskRemoveFromUnorderedEventList>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     672:	cc 16       	cp	r12, r28
     674:	dd 06       	cpc	r13, r29
     676:	79 f6       	brne	.-98     	; 0x616 <xEventGroupSetBits+0x56>
     678:	02 c0       	rjmp	.+4      	; 0x67e <xEventGroupSetBits+0xbe>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     67a:	aa 24       	eor	r10, r10
     67c:	bb 24       	eor	r11, r11
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     67e:	c5 01       	movw	r24, r10
     680:	80 95       	com	r24
     682:	90 95       	com	r25
     684:	f8 01       	movw	r30, r16
     686:	a0 80       	ld	r10, Z
     688:	b1 80       	ldd	r11, Z+1	; 0x01
     68a:	a8 22       	and	r10, r24
     68c:	b9 22       	and	r11, r25
     68e:	b1 82       	std	Z+1, r11	; 0x01
     690:	a0 82       	st	Z, r10
	}
	( void ) xTaskResumeAll();
     692:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
     696:	d8 01       	movw	r26, r16
     698:	8c 91       	ld	r24, X
     69a:	11 96       	adiw	r26, 0x01	; 1
     69c:	9c 91       	ld	r25, X
     69e:	11 97       	sbiw	r26, 0x01	; 1
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	df 90       	pop	r13
     6ae:	cf 90       	pop	r12
     6b0:	bf 90       	pop	r11
     6b2:	af 90       	pop	r10
     6b4:	08 95       	ret

000006b6 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     6b6:	af 92       	push	r10
     6b8:	bf 92       	push	r11
     6ba:	cf 92       	push	r12
     6bc:	df 92       	push	r13
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	6c 01       	movw	r12, r24
     6cc:	eb 01       	movw	r28, r22
     6ce:	7a 01       	movw	r14, r20
     6d0:	59 01       	movw	r10, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     6d2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     6d6:	f6 01       	movw	r30, r12
     6d8:	00 81       	ld	r16, Z
     6da:	11 81       	ldd	r17, Z+1	; 0x01

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     6dc:	c6 01       	movw	r24, r12
     6de:	be 01       	movw	r22, r28
     6e0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     6e4:	c0 2b       	or	r28, r16
     6e6:	d1 2b       	or	r29, r17
     6e8:	c7 01       	movw	r24, r14
     6ea:	8c 23       	and	r24, r28
     6ec:	9d 23       	and	r25, r29
     6ee:	8e 15       	cp	r24, r14
     6f0:	9f 05       	cpc	r25, r15
     6f2:	51 f4       	brne	.+20     	; 0x708 <xEventGroupSync+0x52>
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     6f4:	80 95       	com	r24
     6f6:	90 95       	com	r25
     6f8:	f6 01       	movw	r30, r12
     6fa:	20 81       	ld	r18, Z
     6fc:	31 81       	ldd	r19, Z+1	; 0x01
     6fe:	82 23       	and	r24, r18
     700:	93 23       	and	r25, r19
     702:	91 83       	std	Z+1, r25	; 0x01
     704:	80 83       	st	Z, r24
     706:	12 c0       	rjmp	.+36     	; 0x72c <xEventGroupSync+0x76>

			xTicksToWait = 0;
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     708:	a1 14       	cp	r10, r1
     70a:	b1 04       	cpc	r11, r1
     70c:	61 f0       	breq	.+24     	; 0x726 <xEventGroupSync+0x70>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     70e:	b7 01       	movw	r22, r14
     710:	75 60       	ori	r23, 0x05	; 5
     712:	c6 01       	movw	r24, r12
     714:	02 96       	adiw	r24, 0x02	; 2
     716:	a5 01       	movw	r20, r10
     718:	0e 94 56 11 	call	0x22ac	; 0x22ac <vTaskPlaceOnUnorderedEventList>
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     71c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     720:	88 23       	and	r24, r24
     722:	49 f4       	brne	.+18     	; 0x736 <xEventGroupSync+0x80>
     724:	06 c0       	rjmp	.+12     	; 0x732 <xEventGroupSync+0x7c>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     726:	f6 01       	movw	r30, r12
     728:	c0 81       	ld	r28, Z
     72a:	d1 81       	ldd	r29, Z+1	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     72c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
     730:	1c c0       	rjmp	.+56     	; 0x76a <xEventGroupSync+0xb4>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     732:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     736:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     73a:	91 fd       	sbrc	r25, 1
     73c:	14 c0       	rjmp	.+40     	; 0x766 <xEventGroupSync+0xb0>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
     744:	f6 01       	movw	r30, r12
     746:	80 81       	ld	r24, Z
     748:	91 81       	ldd	r25, Z+1	; 0x01

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     74a:	97 01       	movw	r18, r14
     74c:	28 23       	and	r18, r24
     74e:	39 23       	and	r19, r25
     750:	2e 15       	cp	r18, r14
     752:	3f 05       	cpc	r19, r15
     754:	31 f4       	brne	.+12     	; 0x762 <xEventGroupSync+0xac>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     756:	20 95       	com	r18
     758:	30 95       	com	r19
     75a:	28 23       	and	r18, r24
     75c:	39 23       	and	r19, r25
     75e:	31 83       	std	Z+1, r19	; 0x01
     760:	20 83       	st	Z, r18
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     766:	ec 01       	movw	r28, r24
     768:	d0 70       	andi	r29, 0x00	; 0
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     76a:	8c 2f       	mov	r24, r28
     76c:	9d 2f       	mov	r25, r29
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	08 95       	ret

00000784 <vEventGroupDelete>:
	return pxEventBits->uxEventBits;
}
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

	vTaskSuspendAll();
     78a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	88 23       	and	r24, r24
     792:	49 f0       	breq	.+18     	; 0x7a6 <vEventGroupDelete+0x22>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     794:	8f 81       	ldd	r24, Y+7	; 0x07
     796:	98 85       	ldd	r25, Y+8	; 0x08
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	72 e0       	ldi	r23, 0x02	; 2
     79c:	0e 94 ba 11 	call	0x2374	; 0x2374 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	88 23       	and	r24, r24
     7a4:	b9 f7       	brne	.-18     	; 0x794 <vEventGroupDelete+0x10>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
     7a6:	ce 01       	movw	r24, r28
     7a8:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
     7ac:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     7b6:	ba 01       	movw	r22, r20
     7b8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <xEventGroupSetBits>
}
     7bc:	08 95       	ret

000007be <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     7be:	ba 01       	movw	r22, r20
     7c0:	0e 94 cd 02 	call	0x59a	; 0x59a <xEventGroupClearBits>
}
     7c4:	08 95       	ret

000007c6 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     7d0:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     7d4:	80 91 6c 00 	lds	r24, 0x006C
     7d8:	88 23       	and	r24, r24
     7da:	f9 f4       	brne	.+62     	; 0x81a <pvPortMalloc+0x54>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     7dc:	86 e7       	ldi	r24, 0x76	; 118
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	90 93 6e 00 	sts	0x006E, r25
     7e4:	80 93 6d 00 	sts	0x006D, r24
	xStart.xBlockSize = ( size_t ) 0;
     7e8:	10 92 70 00 	sts	0x0070, r1
     7ec:	10 92 6f 00 	sts	0x006F, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     7f0:	8f e1       	ldi	r24, 0x1F	; 31
     7f2:	93 e0       	ldi	r25, 0x03	; 3
     7f4:	90 93 74 00 	sts	0x0074, r25
     7f8:	80 93 73 00 	sts	0x0073, r24
	xEnd.pxNextFreeBlock = NULL;
     7fc:	e3 e7       	ldi	r30, 0x73	; 115
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	12 92       	st	-Z, r1
     802:	12 92       	st	-Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     804:	90 93 79 00 	sts	0x0079, r25
     808:	80 93 78 00 	sts	0x0078, r24
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     80c:	f0 93 77 00 	sts	0x0077, r31
     810:	e0 93 76 00 	sts	0x0076, r30
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 6c 00 	sts	0x006C, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     81a:	20 97       	sbiw	r28, 0x00	; 0
     81c:	09 f4       	brne	.+2      	; 0x820 <pvPortMalloc+0x5a>
     81e:	62 c0       	rjmp	.+196    	; 0x8e4 <__stack+0x85>
		{
			xWantedSize += heapSTRUCT_SIZE;
     820:	9e 01       	movw	r18, r28
     822:	2c 5f       	subi	r18, 0xFC	; 252
     824:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     826:	23 96       	adiw	r28, 0x03	; 3
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	ce 31       	cpi	r28, 0x1E	; 30
     82c:	d8 07       	cpc	r29, r24
     82e:	08 f0       	brcs	.+2      	; 0x832 <pvPortMalloc+0x6c>
     830:	5c c0       	rjmp	.+184    	; 0x8ea <__stack+0x8b>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     832:	e0 91 6d 00 	lds	r30, 0x006D
     836:	f0 91 6e 00 	lds	r31, 0x006E

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     83a:	ad e6       	ldi	r26, 0x6D	; 109
     83c:	b0 e0       	ldi	r27, 0x00	; 0
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     83e:	02 c0       	rjmp	.+4      	; 0x844 <pvPortMalloc+0x7e>
     840:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     842:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     844:	82 81       	ldd	r24, Z+2	; 0x02
     846:	93 81       	ldd	r25, Z+3	; 0x03
     848:	82 17       	cp	r24, r18
     84a:	93 07       	cpc	r25, r19
     84c:	20 f4       	brcc	.+8      	; 0x856 <pvPortMalloc+0x90>
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	00 97       	sbiw	r24, 0x00	; 0
     854:	a9 f7       	brne	.-22     	; 0x840 <pvPortMalloc+0x7a>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	e1 37       	cpi	r30, 0x71	; 113
     85a:	fc 07       	cpc	r31, r28
     85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
     85e:	48 c0       	rjmp	.+144    	; 0x8f0 <__stack+0x91>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     860:	8d 91       	ld	r24, X+
     862:	9c 91       	ld	r25, X
     864:	11 97       	sbiw	r26, 0x01	; 1
     866:	8c 01       	movw	r16, r24
     868:	0c 5f       	subi	r16, 0xFC	; 252
     86a:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     86c:	80 81       	ld	r24, Z
     86e:	91 81       	ldd	r25, Z+1	; 0x01
     870:	11 96       	adiw	r26, 0x01	; 1
     872:	9c 93       	st	X, r25
     874:	8e 93       	st	-X, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     876:	82 81       	ldd	r24, Z+2	; 0x02
     878:	93 81       	ldd	r25, Z+3	; 0x03
     87a:	82 1b       	sub	r24, r18
     87c:	93 0b       	sbc	r25, r19
     87e:	89 30       	cpi	r24, 0x09	; 9
     880:	91 05       	cpc	r25, r1
     882:	18 f1       	brcs	.+70     	; 0x8ca <__stack+0x6b>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     884:	af 01       	movw	r20, r30
     886:	42 0f       	add	r20, r18
     888:	53 1f       	adc	r21, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     88a:	da 01       	movw	r26, r20
     88c:	13 96       	adiw	r26, 0x03	; 3
     88e:	9c 93       	st	X, r25
     890:	8e 93       	st	-X, r24
     892:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     894:	33 83       	std	Z+3, r19	; 0x03
     896:	22 83       	std	Z+2, r18	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     898:	12 96       	adiw	r26, 0x02	; 2
     89a:	2d 91       	ld	r18, X+
     89c:	3c 91       	ld	r19, X
     89e:	13 97       	sbiw	r26, 0x03	; 3
     8a0:	6d e6       	ldi	r22, 0x6D	; 109
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	bd 01       	movw	r22, r26
     8a8:	eb 01       	movw	r28, r22
     8aa:	a8 81       	ld	r26, Y
     8ac:	b9 81       	ldd	r27, Y+1	; 0x01
     8ae:	12 96       	adiw	r26, 0x02	; 2
     8b0:	8d 91       	ld	r24, X+
     8b2:	9c 91       	ld	r25, X
     8b4:	13 97       	sbiw	r26, 0x03	; 3
     8b6:	82 17       	cp	r24, r18
     8b8:	93 07       	cpc	r25, r19
     8ba:	a8 f3       	brcs	.-22     	; 0x8a6 <__stack+0x47>
     8bc:	ea 01       	movw	r28, r20
     8be:	b9 83       	std	Y+1, r27	; 0x01
     8c0:	a8 83       	st	Y, r26
     8c2:	db 01       	movw	r26, r22
     8c4:	11 96       	adiw	r26, 0x01	; 1
     8c6:	5c 93       	st	X, r21
     8c8:	4e 93       	st	-X, r20
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     8ca:	80 91 60 00 	lds	r24, 0x0060
     8ce:	90 91 61 00 	lds	r25, 0x0061
     8d2:	22 81       	ldd	r18, Z+2	; 0x02
     8d4:	33 81       	ldd	r19, Z+3	; 0x03
     8d6:	82 1b       	sub	r24, r18
     8d8:	93 0b       	sbc	r25, r19
     8da:	90 93 61 00 	sts	0x0061, r25
     8de:	80 93 60 00 	sts	0x0060, r24
     8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <__stack+0x95>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     8e4:	00 e0       	ldi	r16, 0x00	; 0
     8e6:	10 e0       	ldi	r17, 0x00	; 0
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <__stack+0x95>
     8ea:	00 e0       	ldi	r16, 0x00	; 0
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__stack+0x95>
     8f0:	00 e0       	ldi	r16, 0x00	; 0
     8f2:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     8f4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     8f8:	80 2f       	mov	r24, r16
     8fa:	91 2f       	mov	r25, r17
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	ec 01       	movw	r28, r24
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	39 f1       	breq	.+78     	; 0x962 <vPortFree+0x5c>
		before it. */
		puc -= heapSTRUCT_SIZE;

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     914:	8c 01       	movw	r16, r24
     916:	04 50       	subi	r16, 0x04	; 4
     918:	10 40       	sbci	r17, 0x00	; 0

		vTaskSuspendAll();
     91a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     91e:	f8 01       	movw	r30, r16
     920:	22 81       	ldd	r18, Z+2	; 0x02
     922:	33 81       	ldd	r19, Z+3	; 0x03
     924:	ad e6       	ldi	r26, 0x6D	; 109
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	01 c0       	rjmp	.+2      	; 0x92c <vPortFree+0x26>
     92a:	df 01       	movw	r26, r30
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	11 97       	sbiw	r26, 0x01	; 1
     932:	82 81       	ldd	r24, Z+2	; 0x02
     934:	93 81       	ldd	r25, Z+3	; 0x03
     936:	82 17       	cp	r24, r18
     938:	93 07       	cpc	r25, r19
     93a:	b8 f3       	brcs	.-18     	; 0x92a <vPortFree+0x24>
     93c:	24 97       	sbiw	r28, 0x04	; 4
     93e:	f9 83       	std	Y+1, r31	; 0x01
     940:	e8 83       	st	Y, r30
     942:	0d 93       	st	X+, r16
     944:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     946:	80 91 60 00 	lds	r24, 0x0060
     94a:	90 91 61 00 	lds	r25, 0x0061
     94e:	2a 81       	ldd	r18, Y+2	; 0x02
     950:	3b 81       	ldd	r19, Y+3	; 0x03
     952:	82 0f       	add	r24, r18
     954:	93 1f       	adc	r25, r19
     956:	90 93 61 00 	sts	0x0061, r25
     95a:	80 93 60 00 	sts	0x0060, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     95e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
	}
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	08 95       	ret

0000096c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
     96c:	80 91 60 00 	lds	r24, 0x0060
     970:	90 91 61 00 	lds	r25, 0x0061
     974:	08 95       	ret

00000976 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     976:	08 95       	ret

00000978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     978:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     97a:	03 96       	adiw	r24, 0x03	; 3
     97c:	92 83       	std	Z+2, r25	; 0x02
     97e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     980:	2f ef       	ldi	r18, 0xFF	; 255
     982:	3f ef       	ldi	r19, 0xFF	; 255
     984:	34 83       	std	Z+4, r19	; 0x04
     986:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     988:	96 83       	std	Z+6, r25	; 0x06
     98a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     98c:	90 87       	std	Z+8, r25	; 0x08
     98e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     990:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     992:	08 95       	ret

00000994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     994:	fc 01       	movw	r30, r24
     996:	11 86       	std	Z+9, r1	; 0x09
     998:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     99a:	08 95       	ret

0000099c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     9a2:	dc 01       	movw	r26, r24
     9a4:	11 96       	adiw	r26, 0x01	; 1
     9a6:	cd 91       	ld	r28, X+
     9a8:	dc 91       	ld	r29, X
     9aa:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     9ac:	d3 83       	std	Z+3, r29	; 0x03
     9ae:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     9b0:	2c 81       	ldd	r18, Y+4	; 0x04
     9b2:	3d 81       	ldd	r19, Y+5	; 0x05
     9b4:	35 83       	std	Z+5, r19	; 0x05
     9b6:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     9b8:	ac 81       	ldd	r26, Y+4	; 0x04
     9ba:	bd 81       	ldd	r27, Y+5	; 0x05
     9bc:	13 96       	adiw	r26, 0x03	; 3
     9be:	7c 93       	st	X, r23
     9c0:	6e 93       	st	-X, r22
     9c2:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     9c4:	7d 83       	std	Y+5, r23	; 0x05
     9c6:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     9c8:	91 87       	std	Z+9, r25	; 0x09
     9ca:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     9cc:	fc 01       	movw	r30, r24
     9ce:	20 81       	ld	r18, Z
     9d0:	2f 5f       	subi	r18, 0xFF	; 255
     9d2:	20 83       	st	Z, r18
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ac 01       	movw	r20, r24
     9e0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9e2:	28 81       	ld	r18, Y
     9e4:	39 81       	ldd	r19, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	2f 3f       	cpi	r18, 0xFF	; 255
     9ea:	38 07       	cpc	r19, r24
     9ec:	21 f4       	brne	.+8      	; 0x9f6 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     9ee:	fa 01       	movw	r30, r20
     9f0:	a7 81       	ldd	r26, Z+7	; 0x07
     9f2:	b0 85       	ldd	r27, Z+8	; 0x08
     9f4:	0d c0       	rjmp	.+26     	; 0xa10 <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9f6:	da 01       	movw	r26, r20
     9f8:	13 96       	adiw	r26, 0x03	; 3
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <vListInsert+0x24>
     9fc:	df 01       	movw	r26, r30
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	ed 91       	ld	r30, X+
     a02:	fc 91       	ld	r31, X
     a04:	13 97       	sbiw	r26, 0x03	; 3
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	28 17       	cp	r18, r24
     a0c:	39 07       	cpc	r19, r25
     a0e:	b0 f7       	brcc	.-20     	; 0x9fc <vListInsert+0x22>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     a10:	12 96       	adiw	r26, 0x02	; 2
     a12:	ed 91       	ld	r30, X+
     a14:	fc 91       	ld	r31, X
     a16:	13 97       	sbiw	r26, 0x03	; 3
     a18:	fb 83       	std	Y+3, r31	; 0x03
     a1a:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a1c:	d5 83       	std	Z+5, r29	; 0x05
     a1e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     a20:	bd 83       	std	Y+5, r27	; 0x05
     a22:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     a24:	13 96       	adiw	r26, 0x03	; 3
     a26:	dc 93       	st	X, r29
     a28:	ce 93       	st	-X, r28
     a2a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     a2c:	59 87       	std	Y+9, r21	; 0x09
     a2e:	48 87       	std	Y+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
     a30:	fa 01       	movw	r30, r20
     a32:	80 81       	ld	r24, Z
     a34:	8f 5f       	subi	r24, 0xFF	; 255
     a36:	80 83       	st	Z, r24
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     a44:	c0 85       	ldd	r28, Z+8	; 0x08
     a46:	d1 85       	ldd	r29, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a48:	a2 81       	ldd	r26, Z+2	; 0x02
     a4a:	b3 81       	ldd	r27, Z+3	; 0x03
     a4c:	84 81       	ldd	r24, Z+4	; 0x04
     a4e:	95 81       	ldd	r25, Z+5	; 0x05
     a50:	15 96       	adiw	r26, 0x05	; 5
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a58:	a4 81       	ldd	r26, Z+4	; 0x04
     a5a:	b5 81       	ldd	r27, Z+5	; 0x05
     a5c:	82 81       	ldd	r24, Z+2	; 0x02
     a5e:	93 81       	ldd	r25, Z+3	; 0x03
     a60:	13 96       	adiw	r26, 0x03	; 3
     a62:	9c 93       	st	X, r25
     a64:	8e 93       	st	-X, r24
     a66:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     a68:	a9 81       	ldd	r26, Y+1	; 0x01
     a6a:	ba 81       	ldd	r27, Y+2	; 0x02
     a6c:	ae 17       	cp	r26, r30
     a6e:	bf 07       	cpc	r27, r31
     a70:	31 f4       	brne	.+12     	; 0xa7e <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     a72:	14 96       	adiw	r26, 0x04	; 4
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	15 97       	sbiw	r26, 0x05	; 5
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     a7e:	11 86       	std	Z+9, r1	; 0x09
     a80:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     a82:	88 81       	ld	r24, Y
     a84:	81 50       	subi	r24, 0x01	; 1
     a86:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <task2>:
}	
void task2 (void *pv)
{
	while(1)
	{
		xSemaphoreTake(my_mutex,1000);
     a8e:	80 91 06 04 	lds	r24, 0x0406
     a92:	90 91 07 04 	lds	r25, 0x0407
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	48 ee       	ldi	r20, 0xE8	; 232
     a9c:	53 e0       	ldi	r21, 0x03	; 3
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericReceive>
		++x;
     aa4:	80 91 04 04 	lds	r24, 0x0404
     aa8:	90 91 05 04 	lds	r25, 0x0405
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	90 93 05 04 	sts	0x0405, r25
     ab2:	80 93 04 04 	sts	0x0404, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	91 ee       	ldi	r25, 0xE1	; 225
     aba:	a4 e0       	ldi	r26, 0x04	; 4
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	90 40       	sbci	r25, 0x00	; 0
     ac0:	a0 40       	sbci	r26, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <task2+0x2e>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <task2+0x38>
     ac6:	00 00       	nop
		_delay_ms(200);
		++y;
     ac8:	80 91 08 04 	lds	r24, 0x0408
     acc:	90 91 09 04 	lds	r25, 0x0409
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	90 93 09 04 	sts	0x0409, r25
     ad6:	80 93 08 04 	sts	0x0408, r24
     ada:	d9 cf       	rjmp	.-78     	; 0xa8e <task2>

00000adc <task1>:
        
    }
}
void task1(void *pv)
{
	DDRD|=(1<<7);
     adc:	8f 9a       	sbi	0x11, 7	; 17
	while(1)
	{
		xSemaphoreTake(my_mutex,20);
     ade:	80 91 06 04 	lds	r24, 0x0406
     ae2:	90 91 07 04 	lds	r25, 0x0407
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	44 e1       	ldi	r20, 0x14	; 20
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	0e 94 a7 09 	call	0x134e	; 0x134e <xQueueGenericReceive>
		if(x!=y)
     af4:	20 91 04 04 	lds	r18, 0x0404
     af8:	30 91 05 04 	lds	r19, 0x0405
     afc:	80 91 08 04 	lds	r24, 0x0408
     b00:	90 91 09 04 	lds	r25, 0x0409
     b04:	28 17       	cp	r18, r24
     b06:	39 07       	cpc	r19, r25
     b08:	19 f0       	breq	.+6      	; 0xb10 <task1+0x34>
		{
			PORTD^=(1<<7);
     b0a:	82 b3       	in	r24, 0x12	; 18
     b0c:	80 58       	subi	r24, 0x80	; 128
     b0e:	82 bb       	out	0x12, r24	; 18
		}
		xSemaphoreGive(my_mutex);
     b10:	80 91 06 04 	lds	r24, 0x0406
     b14:	90 91 07 04 	lds	r25, 0x0407
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	0e 94 84 08 	call	0x1108	; 0x1108 <xQueueGenericSend>
		vTaskDelay(100);
     b26:	84 e6       	ldi	r24, 0x64	; 100
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 46 10 	call	0x208c	; 0x208c <vTaskDelay>
	}
     b2e:	d7 cf       	rjmp	.-82     	; 0xade <task1+0x2>

00000b30 <main>:
void task1(void *pv);
void task2 (void *pv);
SemaphoreHandle_t my_mutex;
int main(void)
{
	xTaskCreate(task1,"M",100,NULL,2,NULL);
     b30:	8e e6       	ldi	r24, 0x6E	; 110
     b32:	95 e0       	ldi	r25, 0x05	; 5
     b34:	62 e6       	ldi	r22, 0x62	; 98
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	44 e6       	ldi	r20, 0x64	; 100
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	02 e0       	ldi	r16, 0x02	; 2
     b42:	ee 24       	eor	r14, r14
     b44:	ff 24       	eor	r15, r15
     b46:	0e 94 00 0c 	call	0x1800	; 0x1800 <xTaskCreate>
	xTaskCreate(task2,"N",100,NULL,1,NULL);
     b4a:	87 e4       	ldi	r24, 0x47	; 71
     b4c:	95 e0       	ldi	r25, 0x05	; 5
     b4e:	64 e6       	ldi	r22, 0x64	; 100
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	44 e6       	ldi	r20, 0x64	; 100
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	01 e0       	ldi	r16, 0x01	; 1
     b5c:	0e 94 00 0c 	call	0x1800	; 0x1800 <xTaskCreate>
	my_mutex=xSemaphoreCreateMutex();
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	0e 94 2a 09 	call	0x1254	; 0x1254 <xQueueCreateMutex>
     b66:	90 93 07 04 	sts	0x0407, r25
     b6a:	80 93 06 04 	sts	0x0406, r24
	vTaskStartScheduler();
     b6e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <vTaskStartScheduler>
     b72:	ff cf       	rjmp	.-2      	; 0xb72 <main+0x42>

00000b74 <pxPortInitialiseStack>:
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     b74:	21 e1       	ldi	r18, 0x11	; 17
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
     b7a:	31 97       	sbiw	r30, 0x01	; 1
     b7c:	32 e2       	ldi	r19, 0x22	; 34
     b7e:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
     b80:	fc 01       	movw	r30, r24
     b82:	32 97       	sbiw	r30, 0x02	; 2
     b84:	a3 e3       	ldi	r26, 0x33	; 51
     b86:	a0 83       	st	Z, r26
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     b88:	fc 01       	movw	r30, r24
     b8a:	33 97       	sbiw	r30, 0x03	; 3
     b8c:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     b8e:	fc 01       	movw	r30, r24
     b90:	34 97       	sbiw	r30, 0x04	; 4
     b92:	70 83       	st	Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
     b94:	fc 01       	movw	r30, r24
     b96:	35 97       	sbiw	r30, 0x05	; 5
     b98:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     b9a:	fc 01       	movw	r30, r24
     b9c:	36 97       	sbiw	r30, 0x06	; 6
     b9e:	60 e8       	ldi	r22, 0x80	; 128
     ba0:	60 83       	st	Z, r22
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
     ba2:	fc 01       	movw	r30, r24
     ba4:	37 97       	sbiw	r30, 0x07	; 7
     ba6:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
     ba8:	fc 01       	movw	r30, r24
     baa:	38 97       	sbiw	r30, 0x08	; 8
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
     bb0:	fc 01       	movw	r30, r24
     bb2:	39 97       	sbiw	r30, 0x09	; 9
     bb4:	63 e0       	ldi	r22, 0x03	; 3
     bb6:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
     bb8:	fc 01       	movw	r30, r24
     bba:	3a 97       	sbiw	r30, 0x0a	; 10
     bbc:	64 e0       	ldi	r22, 0x04	; 4
     bbe:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
     bc0:	fc 01       	movw	r30, r24
     bc2:	3b 97       	sbiw	r30, 0x0b	; 11
     bc4:	65 e0       	ldi	r22, 0x05	; 5
     bc6:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
     bc8:	fc 01       	movw	r30, r24
     bca:	3c 97       	sbiw	r30, 0x0c	; 12
     bcc:	66 e0       	ldi	r22, 0x06	; 6
     bce:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
     bd0:	fc 01       	movw	r30, r24
     bd2:	3d 97       	sbiw	r30, 0x0d	; 13
     bd4:	67 e0       	ldi	r22, 0x07	; 7
     bd6:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
     bd8:	fc 01       	movw	r30, r24
     bda:	3e 97       	sbiw	r30, 0x0e	; 14
     bdc:	68 e0       	ldi	r22, 0x08	; 8
     bde:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
     be0:	fc 01       	movw	r30, r24
     be2:	3f 97       	sbiw	r30, 0x0f	; 15
     be4:	69 e0       	ldi	r22, 0x09	; 9
     be6:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
     be8:	fc 01       	movw	r30, r24
     bea:	70 97       	sbiw	r30, 0x10	; 16
     bec:	60 e1       	ldi	r22, 0x10	; 16
     bee:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
     bf0:	fc 01       	movw	r30, r24
     bf2:	71 97       	sbiw	r30, 0x11	; 17
     bf4:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
     bf6:	fc 01       	movw	r30, r24
     bf8:	72 97       	sbiw	r30, 0x12	; 18
     bfa:	22 e1       	ldi	r18, 0x12	; 18
     bfc:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
     bfe:	fc 01       	movw	r30, r24
     c00:	73 97       	sbiw	r30, 0x13	; 19
     c02:	23 e1       	ldi	r18, 0x13	; 19
     c04:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
     c06:	fc 01       	movw	r30, r24
     c08:	74 97       	sbiw	r30, 0x14	; 20
     c0a:	24 e1       	ldi	r18, 0x14	; 20
     c0c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
     c0e:	fc 01       	movw	r30, r24
     c10:	75 97       	sbiw	r30, 0x15	; 21
     c12:	25 e1       	ldi	r18, 0x15	; 21
     c14:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
     c16:	fc 01       	movw	r30, r24
     c18:	76 97       	sbiw	r30, 0x16	; 22
     c1a:	26 e1       	ldi	r18, 0x16	; 22
     c1c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
     c1e:	fc 01       	movw	r30, r24
     c20:	77 97       	sbiw	r30, 0x17	; 23
     c22:	27 e1       	ldi	r18, 0x17	; 23
     c24:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
     c26:	fc 01       	movw	r30, r24
     c28:	78 97       	sbiw	r30, 0x18	; 24
     c2a:	28 e1       	ldi	r18, 0x18	; 24
     c2c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
     c2e:	fc 01       	movw	r30, r24
     c30:	79 97       	sbiw	r30, 0x19	; 25
     c32:	29 e1       	ldi	r18, 0x19	; 25
     c34:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
     c36:	fc 01       	movw	r30, r24
     c38:	7a 97       	sbiw	r30, 0x1a	; 26
     c3a:	20 e2       	ldi	r18, 0x20	; 32
     c3c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
     c3e:	fc 01       	movw	r30, r24
     c40:	7b 97       	sbiw	r30, 0x1b	; 27
     c42:	21 e2       	ldi	r18, 0x21	; 33
     c44:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
     c46:	fc 01       	movw	r30, r24
     c48:	7c 97       	sbiw	r30, 0x1c	; 28
     c4a:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
     c4c:	fc 01       	movw	r30, r24
     c4e:	7d 97       	sbiw	r30, 0x1d	; 29
     c50:	23 e2       	ldi	r18, 0x23	; 35
     c52:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     c54:	fc 01       	movw	r30, r24
     c56:	7e 97       	sbiw	r30, 0x1e	; 30
     c58:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     c5a:	fc 01       	movw	r30, r24
     c5c:	7f 97       	sbiw	r30, 0x1f	; 31
     c5e:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
     c60:	fc 01       	movw	r30, r24
     c62:	b0 97       	sbiw	r30, 0x20	; 32
     c64:	26 e2       	ldi	r18, 0x26	; 38
     c66:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
     c68:	fc 01       	movw	r30, r24
     c6a:	b1 97       	sbiw	r30, 0x21	; 33
     c6c:	27 e2       	ldi	r18, 0x27	; 39
     c6e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
     c70:	fc 01       	movw	r30, r24
     c72:	b2 97       	sbiw	r30, 0x22	; 34
     c74:	28 e2       	ldi	r18, 0x28	; 40
     c76:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
     c78:	fc 01       	movw	r30, r24
     c7a:	b3 97       	sbiw	r30, 0x23	; 35
     c7c:	29 e2       	ldi	r18, 0x29	; 41
     c7e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
     c80:	fc 01       	movw	r30, r24
     c82:	b4 97       	sbiw	r30, 0x24	; 36
     c84:	20 e3       	ldi	r18, 0x30	; 48
     c86:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
     c88:	fc 01       	movw	r30, r24
     c8a:	b5 97       	sbiw	r30, 0x25	; 37
     c8c:	21 e3       	ldi	r18, 0x31	; 49
     c8e:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     c90:	86 97       	sbiw	r24, 0x26	; 38
}
     c92:	08 95       	ret

00000c94 <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
     c94:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
     c96:	8c e7       	ldi	r24, 0x7C	; 124
     c98:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
     c9a:	8b e0       	ldi	r24, 0x0B	; 11
     c9c:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
     c9e:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     ca0:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
     ca2:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     ca4:	a0 91 95 03 	lds	r26, 0x0395
     ca8:	b0 91 96 03 	lds	r27, 0x0396
     cac:	cd 91       	ld	r28, X+
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	dd 91       	ld	r29, X+
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	bf 91       	pop	r27
     cbe:	af 91       	pop	r26
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	7f 91       	pop	r23
     cc6:	6f 91       	pop	r22
     cc8:	5f 91       	pop	r21
     cca:	4f 91       	pop	r20
     ccc:	3f 91       	pop	r19
     cce:	2f 91       	pop	r18
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	bf 90       	pop	r11
     cde:	af 90       	pop	r10
     ce0:	9f 90       	pop	r9
     ce2:	8f 90       	pop	r8
     ce4:	7f 90       	pop	r7
     ce6:	6f 90       	pop	r6
     ce8:	5f 90       	pop	r5
     cea:	4f 90       	pop	r4
     cec:	3f 90       	pop	r3
     cee:	2f 90       	pop	r2
     cf0:	1f 90       	pop	r1
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     cf8:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	08 95       	ret

00000cfe <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     cfe:	08 95       	ret

00000d00 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	0f 92       	push	r0
     d08:	1f 92       	push	r1
     d0a:	11 24       	eor	r1, r1
     d0c:	2f 92       	push	r2
     d0e:	3f 92       	push	r3
     d10:	4f 92       	push	r4
     d12:	5f 92       	push	r5
     d14:	6f 92       	push	r6
     d16:	7f 92       	push	r7
     d18:	8f 92       	push	r8
     d1a:	9f 92       	push	r9
     d1c:	af 92       	push	r10
     d1e:	bf 92       	push	r11
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
     d48:	a0 91 95 03 	lds	r26, 0x0395
     d4c:	b0 91 96 03 	lds	r27, 0x0396
     d50:	0d b6       	in	r0, 0x3d	; 61
     d52:	0d 92       	st	X+, r0
     d54:	0e b6       	in	r0, 0x3e	; 62
     d56:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d58:	0e 94 99 10 	call	0x2132	; 0x2132 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d5c:	a0 91 95 03 	lds	r26, 0x0395
     d60:	b0 91 96 03 	lds	r27, 0x0396
     d64:	cd 91       	ld	r28, X+
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	dd 91       	ld	r29, X+
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	cf 90       	pop	r12
     d94:	bf 90       	pop	r11
     d96:	af 90       	pop	r10
     d98:	9f 90       	pop	r9
     d9a:	8f 90       	pop	r8
     d9c:	7f 90       	pop	r7
     d9e:	6f 90       	pop	r6
     da0:	5f 90       	pop	r5
     da2:	4f 90       	pop	r4
     da4:	3f 90       	pop	r3
     da6:	2f 90       	pop	r2
     da8:	1f 90       	pop	r1
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	0f 90       	pop	r0

	asm volatile ( "ret" );
     db0:	08 95       	ret

00000db2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	0f 92       	push	r0
     dba:	1f 92       	push	r1
     dbc:	11 24       	eor	r1, r1
     dbe:	2f 92       	push	r2
     dc0:	3f 92       	push	r3
     dc2:	4f 92       	push	r4
     dc4:	5f 92       	push	r5
     dc6:	6f 92       	push	r6
     dc8:	7f 92       	push	r7
     dca:	8f 92       	push	r8
     dcc:	9f 92       	push	r9
     dce:	af 92       	push	r10
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31
     dfa:	a0 91 95 03 	lds	r26, 0x0395
     dfe:	b0 91 96 03 	lds	r27, 0x0396
     e02:	0d b6       	in	r0, 0x3d	; 61
     e04:	0d 92       	st	X+, r0
     e06:	0e b6       	in	r0, 0x3e	; 62
     e08:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     e0a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <xTaskIncrementTick>
     e0e:	88 23       	and	r24, r24
     e10:	11 f0       	breq	.+4      	; 0xe16 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
     e12:	0e 94 99 10 	call	0x2132	; 0x2132 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     e16:	a0 91 95 03 	lds	r26, 0x0395
     e1a:	b0 91 96 03 	lds	r27, 0x0396
     e1e:	cd 91       	ld	r28, X+
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	dd 91       	ld	r29, X+
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	ff 91       	pop	r31
     e28:	ef 91       	pop	r30
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	bf 90       	pop	r11
     e50:	af 90       	pop	r10
     e52:	9f 90       	pop	r9
     e54:	8f 90       	pop	r8
     e56:	7f 90       	pop	r7
     e58:	6f 90       	pop	r6
     e5a:	5f 90       	pop	r5
     e5c:	4f 90       	pop	r4
     e5e:	3f 90       	pop	r3
     e60:	2f 90       	pop	r2
     e62:	1f 90       	pop	r1
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e6a:	08 95       	ret

00000e6c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     e6c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vPortYieldFromTick>
		asm volatile ( "reti" );
     e70:	18 95       	reti

00000e72 <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     e78:	fc 01       	movw	r30, r24
     e7a:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63

	taskENTER_CRITICAL();
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
		{
			xReturn = pdTRUE;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	91 11       	cpse	r25, r1
     e84:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	taskEXIT_CRITICAL();

	return xReturn;
}
     e86:	08 95       	ret

00000e88 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     e88:	fc 01       	movw	r30, r24
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     e8a:	44 8d       	ldd	r20, Z+28	; 0x1c
     e8c:	44 23       	and	r20, r20
     e8e:	c1 f0       	breq	.+48     	; 0xec0 <prvCopyDataFromQueue+0x38>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     e90:	26 81       	ldd	r18, Z+6	; 0x06
     e92:	37 81       	ldd	r19, Z+7	; 0x07
     e94:	24 0f       	add	r18, r20
     e96:	31 1d       	adc	r19, r1
     e98:	37 83       	std	Z+7, r19	; 0x07
     e9a:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     e9c:	a2 81       	ldd	r26, Z+2	; 0x02
     e9e:	b3 81       	ldd	r27, Z+3	; 0x03
     ea0:	2a 17       	cp	r18, r26
     ea2:	3b 07       	cpc	r19, r27
     ea4:	20 f0       	brcs	.+8      	; 0xeae <prvCopyDataFromQueue+0x26>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     ea6:	20 81       	ld	r18, Z
     ea8:	31 81       	ldd	r19, Z+1	; 0x01
     eaa:	37 83       	std	Z+7, r19	; 0x07
     eac:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     eae:	36 81       	ldd	r19, Z+6	; 0x06
     eb0:	27 81       	ldd	r18, Z+7	; 0x07
     eb2:	86 2f       	mov	r24, r22
     eb4:	97 2f       	mov	r25, r23
     eb6:	63 2f       	mov	r22, r19
     eb8:	72 2f       	mov	r23, r18
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <memcpy>
     ec0:	08 95       	ret

00000ec2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	8c 01       	movw	r16, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
     ed4:	fc 01       	movw	r30, r24
     ed6:	c6 8d       	ldd	r28, Z+30	; 0x1e

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     ed8:	1c 16       	cp	r1, r28
     eda:	cc f4       	brge	.+50     	; 0xf0e <prvUnlockQueue+0x4c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     edc:	81 89       	ldd	r24, Z+17	; 0x11
     ede:	88 23       	and	r24, r24
     ee0:	31 f4       	brne	.+12     	; 0xeee <prvUnlockQueue+0x2c>
     ee2:	15 c0       	rjmp	.+42     	; 0xf0e <prvUnlockQueue+0x4c>
     ee4:	f8 01       	movw	r30, r16
     ee6:	81 89       	ldd	r24, Z+17	; 0x11
     ee8:	88 23       	and	r24, r24
     eea:	41 f4       	brne	.+16     	; 0xefc <prvUnlockQueue+0x3a>
     eec:	10 c0       	rjmp	.+32     	; 0xf0e <prvUnlockQueue+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     eee:	0f 2e       	mov	r0, r31
     ef0:	f1 e1       	ldi	r31, 0x11	; 17
     ef2:	ef 2e       	mov	r14, r31
     ef4:	ff 24       	eor	r15, r15
     ef6:	f0 2d       	mov	r31, r0
     ef8:	e0 0e       	add	r14, r16
     efa:	f1 1e       	adc	r15, r17
     efc:	c7 01       	movw	r24, r14
     efe:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskRemoveFromEventList>
     f02:	88 23       	and	r24, r24
     f04:	11 f0       	breq	.+4      	; 0xf0a <prvUnlockQueue+0x48>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
     f06:	0e 94 34 12 	call	0x2468	; 0x2468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
     f0a:	c1 50       	subi	r28, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     f0c:	59 f7       	brne	.-42     	; 0xee4 <prvUnlockQueue+0x22>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	f8 01       	movw	r30, r16
     f12:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
     f1e:	f8 01       	movw	r30, r16
     f20:	c5 8d       	ldd	r28, Z+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
     f22:	1c 16       	cp	r1, r28
     f24:	c4 f4       	brge	.+48     	; 0xf56 <prvUnlockQueue+0x94>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     f26:	80 85       	ldd	r24, Z+8	; 0x08
     f28:	88 23       	and	r24, r24
     f2a:	31 f4       	brne	.+12     	; 0xf38 <prvUnlockQueue+0x76>
     f2c:	14 c0       	rjmp	.+40     	; 0xf56 <prvUnlockQueue+0x94>
     f2e:	f8 01       	movw	r30, r16
     f30:	80 85       	ldd	r24, Z+8	; 0x08
     f32:	88 23       	and	r24, r24
     f34:	39 f4       	brne	.+14     	; 0xf44 <prvUnlockQueue+0x82>
     f36:	0f c0       	rjmp	.+30     	; 0xf56 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     f38:	ee 24       	eor	r14, r14
     f3a:	ff 24       	eor	r15, r15
     f3c:	68 94       	set
     f3e:	e3 f8       	bld	r14, 3
     f40:	e0 0e       	add	r14, r16
     f42:	f1 1e       	adc	r15, r17
     f44:	c7 01       	movw	r24, r14
     f46:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskRemoveFromEventList>
     f4a:	88 23       	and	r24, r24
     f4c:	11 f0       	breq	.+4      	; 0xf52 <prvUnlockQueue+0x90>
				{
					vTaskMissedYield();
     f4e:	0e 94 34 12 	call	0x2468	; 0x2468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
     f52:	c1 50       	subi	r28, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
     f54:	61 f7       	brne	.-40     	; 0xf2e <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	f8 01       	movw	r30, r16
     f5a:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
}
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	08 95       	ret

00000f6c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ec 01       	movw	r28, r24
     f76:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     f78:	0a 8d       	ldd	r16, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     f7a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     f7c:	44 23       	and	r20, r20
     f7e:	61 f4       	brne	.+24     	; 0xf98 <prvCopyDataToQueue+0x2c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     f80:	88 81       	ld	r24, Y
     f82:	99 81       	ldd	r25, Y+1	; 0x01
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	09 f0       	breq	.+2      	; 0xf8a <prvCopyDataToQueue+0x1e>
     f88:	42 c0       	rjmp	.+132    	; 0x100e <prvCopyDataToQueue+0xa2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	0e 94 9b 12 	call	0x2536	; 0x2536 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     f92:	1b 82       	std	Y+3, r1	; 0x03
     f94:	1a 82       	std	Y+2, r1	; 0x02
     f96:	42 c0       	rjmp	.+132    	; 0x101c <prvCopyDataToQueue+0xb0>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     f98:	11 23       	and	r17, r17
     f9a:	b9 f4       	brne	.+46     	; 0xfca <prvCopyDataToQueue+0x5e>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     fa6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	9d 81       	ldd	r25, Y+5	; 0x05
     fac:	82 0f       	add	r24, r18
     fae:	91 1d       	adc	r25, r1
     fb0:	9d 83       	std	Y+5, r25	; 0x05
     fb2:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     fb4:	2a 81       	ldd	r18, Y+2	; 0x02
     fb6:	3b 81       	ldd	r19, Y+3	; 0x03
     fb8:	82 17       	cp	r24, r18
     fba:	93 07       	cpc	r25, r19
     fbc:	50 f1       	brcs	.+84     	; 0x1012 <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     fbe:	88 81       	ld	r24, Y
     fc0:	99 81       	ldd	r25, Y+1	; 0x01
     fc2:	9d 83       	std	Y+5, r25	; 0x05
     fc4:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	29 c0       	rjmp	.+82     	; 0x101c <prvCopyDataToQueue+0xb0>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     fca:	8e 81       	ldd	r24, Y+6	; 0x06
     fcc:	9f 81       	ldd	r25, Y+7	; 0x07
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     fd4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	50 95       	com	r21
     fda:	41 95       	neg	r20
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	9f 81       	ldd	r25, Y+7	; 0x07
     fe2:	84 0f       	add	r24, r20
     fe4:	95 1f       	adc	r25, r21
     fe6:	9f 83       	std	Y+7, r25	; 0x07
     fe8:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     fea:	28 81       	ld	r18, Y
     fec:	39 81       	ldd	r19, Y+1	; 0x01
     fee:	82 17       	cp	r24, r18
     ff0:	93 07       	cpc	r25, r19
     ff2:	30 f4       	brcc	.+12     	; 0x1000 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	84 0f       	add	r24, r20
     ffa:	95 1f       	adc	r25, r21
     ffc:	9f 83       	std	Y+7, r25	; 0x07
     ffe:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1000:	12 30       	cpi	r17, 0x02	; 2
    1002:	49 f4       	brne	.+18     	; 0x1016 <prvCopyDataToQueue+0xaa>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1004:	00 23       	and	r16, r16
    1006:	49 f0       	breq	.+18     	; 0x101a <prvCopyDataToQueue+0xae>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    1008:	01 50       	subi	r16, 0x01	; 1
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	07 c0       	rjmp	.+14     	; 0x101c <prvCopyDataToQueue+0xb0>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	05 c0       	rjmp	.+10     	; 0x101c <prvCopyDataToQueue+0xb0>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	03 c0       	rjmp	.+6      	; 0x101c <prvCopyDataToQueue+0xb0>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	01 c0       	rjmp	.+2      	; 0x101c <prvCopyDataToQueue+0xb0>
    101a:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    101c:	0f 5f       	subi	r16, 0xFF	; 255
    101e:	0a 8f       	std	Y+26, r16	; 0x1a

	return xReturn;
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret

0000102a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1036:	48 81       	ld	r20, Y
    1038:	59 81       	ldd	r21, Y+1	; 0x01
    103a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	2e 9f       	mul	r18, r30
    1044:	c0 01       	movw	r24, r0
    1046:	2f 9f       	mul	r18, r31
    1048:	90 0d       	add	r25, r0
    104a:	3e 9f       	mul	r19, r30
    104c:	90 0d       	add	r25, r0
    104e:	11 24       	eor	r1, r1
    1050:	84 0f       	add	r24, r20
    1052:	95 1f       	adc	r25, r21
    1054:	9b 83       	std	Y+3, r25	; 0x03
    1056:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1058:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    105a:	5d 83       	std	Y+5, r21	; 0x05
    105c:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    105e:	c9 01       	movw	r24, r18
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	e8 9f       	mul	r30, r24
    1064:	90 01       	movw	r18, r0
    1066:	e9 9f       	mul	r30, r25
    1068:	30 0d       	add	r19, r0
    106a:	f8 9f       	mul	r31, r24
    106c:	30 0d       	add	r19, r0
    106e:	11 24       	eor	r1, r1
    1070:	24 0f       	add	r18, r20
    1072:	35 1f       	adc	r19, r21
    1074:	3f 83       	std	Y+7, r19	; 0x07
    1076:	2e 83       	std	Y+6, r18	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    107c:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    107e:	66 23       	and	r22, r22
    1080:	61 f4       	brne	.+24     	; 0x109a <xQueueGenericReset+0x70>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1082:	88 85       	ldd	r24, Y+8	; 0x08
    1084:	88 23       	and	r24, r24
    1086:	89 f0       	breq	.+34     	; 0x10aa <xQueueGenericReset+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1088:	ce 01       	movw	r24, r28
    108a:	08 96       	adiw	r24, 0x08	; 8
    108c:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskRemoveFromEventList>
    1090:	88 23       	and	r24, r24
    1092:	59 f0       	breq	.+22     	; 0x10aa <xQueueGenericReset+0x80>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1094:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
    1098:	08 c0       	rjmp	.+16     	; 0x10aa <xQueueGenericReset+0x80>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    109a:	ce 01       	movw	r24, r28
    109c:	08 96       	adiw	r24, 0x08	; 8
    109e:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    10a2:	ce 01       	movw	r24, r28
    10a4:	41 96       	adiw	r24, 0x11	; 17
    10a6:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	08 2f       	mov	r16, r24
    10c0:	16 2f       	mov	r17, r22
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    10c2:	66 23       	and	r22, r22
    10c4:	21 f0       	breq	.+8      	; 0x10ce <xQueueGenericCreate+0x18>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    10c6:	68 9f       	mul	r22, r24
    10c8:	c0 01       	movw	r24, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <xQueueGenericCreate+0x1c>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    10d2:	4f 96       	adiw	r24, 0x1f	; 31
    10d4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <pvPortMalloc>
    10d8:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	71 f0       	breq	.+28     	; 0x10fa <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    10de:	11 23       	and	r17, r17
    10e0:	19 f4       	brne	.+6      	; 0x10e8 <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    10e2:	99 83       	std	Y+1, r25	; 0x01
    10e4:	88 83       	st	Y, r24
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <xQueueGenericCreate+0x38>

		if( pxNewQueue != NULL )
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    10e8:	4f 96       	adiw	r24, 0x1f	; 31
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    10ea:	99 83       	std	Y+1, r25	; 0x01
    10ec:	88 83       	st	Y, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    10ee:	0b 8f       	std	Y+27, r16	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    10f0:	1c 8f       	std	Y+28, r17	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    10f2:	ce 01       	movw	r24, r28
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	0e 94 15 08 	call	0x102a	; 0x102a <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
    10fa:	8c 2f       	mov	r24, r28
    10fc:	9d 2f       	mov	r25, r29
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	08 95       	ret

00001108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1108:	8f 92       	push	r8
    110a:	9f 92       	push	r9
    110c:	bf 92       	push	r11
    110e:	cf 92       	push	r12
    1110:	df 92       	push	r13
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	00 d0       	rcall	.+0      	; 0x1120 <xQueueGenericSend+0x18>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <xQueueGenericSend+0x1a>
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	8c 01       	movw	r16, r24
    112a:	4b 01       	movw	r8, r22
    112c:	5d 83       	std	Y+5, r21	; 0x05
    112e:	4c 83       	std	Y+4, r20	; 0x04
    1130:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1132:	ff 24       	eor	r15, r15
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1134:	bb 24       	eor	r11, r11
    1136:	b3 94       	inc	r11
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1138:	cc 24       	eor	r12, r12
    113a:	dd 24       	eor	r13, r13
    113c:	68 94       	set
    113e:	c3 f8       	bld	r12, 3
    1140:	c8 0e       	add	r12, r24
    1142:	d9 1e       	adc	r13, r25
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    114a:	f8 01       	movw	r30, r16
    114c:	92 8d       	ldd	r25, Z+26	; 0x1a
    114e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1150:	98 17       	cp	r25, r24
    1152:	18 f0       	brcs	.+6      	; 0x115a <xQueueGenericSend+0x52>
    1154:	f2 e0       	ldi	r31, 0x02	; 2
    1156:	ef 16       	cp	r14, r31
    1158:	d1 f4       	brne	.+52     	; 0x118e <xQueueGenericSend+0x86>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    115a:	c8 01       	movw	r24, r16
    115c:	b4 01       	movw	r22, r8
    115e:	4e 2d       	mov	r20, r14
    1160:	0e 94 b6 07 	call	0xf6c	; 0xf6c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1164:	f8 01       	movw	r30, r16
    1166:	91 89       	ldd	r25, Z+17	; 0x11
    1168:	99 23       	and	r25, r25
    116a:	49 f0       	breq	.+18     	; 0x117e <xQueueGenericSend+0x76>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    116c:	c8 01       	movw	r24, r16
    116e:	41 96       	adiw	r24, 0x11	; 17
    1170:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskRemoveFromEventList>
    1174:	88 23       	and	r24, r24
    1176:	39 f0       	breq	.+14     	; 0x1186 <xQueueGenericSend+0x7e>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1178:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <xQueueGenericSend+0x7e>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    117e:	88 23       	and	r24, r24
    1180:	11 f0       	breq	.+4      	; 0x1186 <xQueueGenericSend+0x7e>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1182:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	52 c0       	rjmp	.+164    	; 0x1232 <xQueueGenericSend+0x12a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	21 f4       	brne	.+8      	; 0x119e <xQueueGenericSend+0x96>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	4a c0       	rjmp	.+148    	; 0x1232 <xQueueGenericSend+0x12a>
				}
				else if( xEntryTimeSet == pdFALSE )
    119e:	ff 20       	and	r15, r15
    11a0:	29 f4       	brne	.+10     	; 0x11ac <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    11aa:	fb 2c       	mov	r15, r11
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    11b0:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	0f 92       	push	r0
    11ba:	f8 01       	movw	r30, r16
    11bc:	85 8d       	ldd	r24, Z+29	; 0x1d
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <xQueueGenericSend+0xbc>
    11c2:	15 8e       	std	Z+29, r1	; 0x1d
    11c4:	f8 01       	movw	r30, r16
    11c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    11c8:	8f 3f       	cpi	r24, 0xFF	; 255
    11ca:	09 f4       	brne	.+2      	; 0x11ce <xQueueGenericSend+0xc6>
    11cc:	16 8e       	std	Z+30, r1	; 0x1e
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	be 01       	movw	r22, r28
    11d8:	6c 5f       	subi	r22, 0xFC	; 252
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	0e 94 ff 11 	call	0x23fe	; 0x23fe <xTaskCheckForTimeOut>
    11e0:	88 23       	and	r24, r24
    11e2:	09 f5       	brne	.+66     	; 0x1226 <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    11ea:	f8 01       	movw	r30, r16
    11ec:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    11f2:	f8 01       	movw	r30, r16
    11f4:	83 8d       	ldd	r24, Z+27	; 0x1b
    11f6:	98 17       	cp	r25, r24
    11f8:	81 f4       	brne	.+32     	; 0x121a <xQueueGenericSend+0x112>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    11fa:	6c 81       	ldd	r22, Y+4	; 0x04
    11fc:	7d 81       	ldd	r23, Y+5	; 0x05
    11fe:	c6 01       	movw	r24, r12
    1200:	0e 94 44 11 	call	0x2288	; 0x2288 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1204:	c8 01       	movw	r24, r16
    1206:	0e 94 61 07 	call	0xec2	; 0xec2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    120a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
    120e:	88 23       	and	r24, r24
    1210:	09 f0       	breq	.+2      	; 0x1214 <xQueueGenericSend+0x10c>
    1212:	98 cf       	rjmp	.-208    	; 0x1144 <xQueueGenericSend+0x3c>
				{
					portYIELD_WITHIN_API();
    1214:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
    1218:	95 cf       	rjmp	.-214    	; 0x1144 <xQueueGenericSend+0x3c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    121a:	c8 01       	movw	r24, r16
    121c:	0e 94 61 07 	call	0xec2	; 0xec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1220:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
    1224:	8f cf       	rjmp	.-226    	; 0x1144 <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1226:	c8 01       	movw	r24, r16
    1228:	0e 94 61 07 	call	0xec2	; 0xec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    122c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1230:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	cf 90       	pop	r12
    124c:	bf 90       	pop	r11
    124e:	9f 90       	pop	r9
    1250:	8f 90       	pop	r8
    1252:	08 95       	ret

00001254 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	48 2f       	mov	r20, r24
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <xQueueGenericCreate>
    1262:	ec 01       	movw	r28, r24

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
		if( pxNewQueue != NULL )
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	61 f0       	breq	.+24     	; 0x1280 <xQueueCreateMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1268:	1b 82       	std	Y+3, r1	; 0x03
    126a:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    126c:	19 82       	std	Y+1, r1	; 0x01
    126e:	18 82       	st	Y, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    1270:	1e 82       	std	Y+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	0e 94 84 08 	call	0x1108	; 0x1108 <xQueueGenericSend>

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
		prvInitialiseMutex( pxNewQueue );

		return pxNewQueue;
	}
    1280:	8c 2f       	mov	r24, r28
    1282:	9d 2f       	mov	r25, r29
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	8c 01       	movw	r16, r24
    1296:	7a 01       	movw	r14, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1298:	fc 01       	movw	r30, r24
    129a:	92 8d       	ldd	r25, Z+26	; 0x1a
    129c:	83 8d       	ldd	r24, Z+27	; 0x1b
    129e:	98 17       	cp	r25, r24
    12a0:	10 f0       	brcs	.+4      	; 0x12a6 <xQueueGenericSendFromISR+0x1c>
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	f1 f4       	brne	.+60     	; 0x12e2 <xQueueGenericSendFromISR+0x58>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    12a6:	f8 01       	movw	r30, r16
    12a8:	c6 8d       	ldd	r28, Z+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    12aa:	c8 01       	movw	r24, r16
    12ac:	42 2f       	mov	r20, r18
    12ae:	0e 94 b6 07 	call	0xf6c	; 0xf6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    12b2:	cf 3f       	cpi	r28, 0xFF	; 255
    12b4:	89 f4       	brne	.+34     	; 0x12d8 <xQueueGenericSendFromISR+0x4e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    12b6:	f8 01       	movw	r30, r16
    12b8:	81 89       	ldd	r24, Z+17	; 0x11
    12ba:	88 23       	and	r24, r24
    12bc:	a1 f0       	breq	.+40     	; 0x12e6 <xQueueGenericSendFromISR+0x5c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    12be:	c8 01       	movw	r24, r16
    12c0:	41 96       	adiw	r24, 0x11	; 17
    12c2:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskRemoveFromEventList>
    12c6:	88 23       	and	r24, r24
    12c8:	81 f0       	breq	.+32     	; 0x12ea <xQueueGenericSendFromISR+0x60>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    12ca:	e1 14       	cp	r14, r1
    12cc:	f1 04       	cpc	r15, r1
    12ce:	79 f0       	breq	.+30     	; 0x12ee <xQueueGenericSendFromISR+0x64>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	f7 01       	movw	r30, r14
    12d4:	80 83       	st	Z, r24
    12d6:	0c c0       	rjmp	.+24     	; 0x12f0 <xQueueGenericSendFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    12d8:	cf 5f       	subi	r28, 0xFF	; 255
    12da:	f8 01       	movw	r30, r16
    12dc:	c6 8f       	std	Z+30, r28	; 0x1e
			}

			xReturn = pdPASS;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	07 c0       	rjmp	.+14     	; 0x12f0 <xQueueGenericSendFromISR+0x66>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <xQueueGenericSendFromISR+0x66>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <xQueueGenericSendFromISR+0x66>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <xQueueGenericSendFromISR+0x66>
    12ee:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	08 95       	ret

000012fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	fc 01       	movw	r30, r24
    1302:	eb 01       	movw	r28, r22
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1304:	82 8d       	ldd	r24, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    1306:	93 8d       	ldd	r25, Z+27	; 0x1b
    1308:	89 17       	cp	r24, r25
    130a:	b8 f4       	brcc	.+46     	; 0x133a <xQueueGiveFromISR+0x3e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    130c:	96 8d       	ldd	r25, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    130e:	8f 5f       	subi	r24, 0xFF	; 255
    1310:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1312:	9f 3f       	cpi	r25, 0xFF	; 255
    1314:	71 f4       	brne	.+28     	; 0x1332 <xQueueGiveFromISR+0x36>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1316:	81 89       	ldd	r24, Z+17	; 0x11
    1318:	88 23       	and	r24, r24
    131a:	89 f0       	breq	.+34     	; 0x133e <xQueueGiveFromISR+0x42>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    131c:	cf 01       	movw	r24, r30
    131e:	41 96       	adiw	r24, 0x11	; 17
    1320:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskRemoveFromEventList>
    1324:	88 23       	and	r24, r24
    1326:	69 f0       	breq	.+26     	; 0x1342 <xQueueGiveFromISR+0x46>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1328:	20 97       	sbiw	r28, 0x00	; 0
    132a:	69 f0       	breq	.+26     	; 0x1346 <xQueueGiveFromISR+0x4a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	88 83       	st	Y, r24
    1330:	0b c0       	rjmp	.+22     	; 0x1348 <xQueueGiveFromISR+0x4c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1332:	9f 5f       	subi	r25, 0xFF	; 255
    1334:	96 8f       	std	Z+30, r25	; 0x1e
			}

			xReturn = pdPASS;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	07 c0       	rjmp	.+14     	; 0x1348 <xQueueGiveFromISR+0x4c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <xQueueGiveFromISR+0x4c>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <xQueueGiveFromISR+0x4c>
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <xQueueGiveFromISR+0x4c>
    1346:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	00 d0       	rcall	.+0      	; 0x1368 <xQueueGenericReceive+0x1a>
    1368:	00 d0       	rcall	.+0      	; 0x136a <xQueueGenericReceive+0x1c>
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	7c 01       	movw	r14, r24
    1372:	4b 01       	movw	r8, r22
    1374:	5d 83       	std	Y+5, r21	; 0x05
    1376:	4c 83       	std	Y+4, r20	; 0x04
    1378:	c2 2e       	mov	r12, r18
BaseType_t xEntryTimeSet = pdFALSE;
    137a:	00 e0       	ldi	r16, 0x00	; 0
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    137c:	dd 24       	eor	r13, r13
    137e:	d3 94       	inc	r13
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1380:	0f 2e       	mov	r0, r31
    1382:	f1 e1       	ldi	r31, 0x11	; 17
    1384:	af 2e       	mov	r10, r31
    1386:	bb 24       	eor	r11, r11
    1388:	f0 2d       	mov	r31, r0
    138a:	a8 0e       	add	r10, r24
    138c:	b9 1e       	adc	r11, r25
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1394:	f7 01       	movw	r30, r14
    1396:	12 8d       	ldd	r17, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1398:	11 23       	and	r17, r17
    139a:	99 f1       	breq	.+102    	; 0x1402 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    139c:	a6 80       	ldd	r10, Z+6	; 0x06
    139e:	b7 80       	ldd	r11, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    13a0:	c7 01       	movw	r24, r14
    13a2:	b4 01       	movw	r22, r8
    13a4:	0e 94 44 07 	call	0xe88	; 0xe88 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    13a8:	cc 20       	and	r12, r12
    13aa:	c9 f4       	brne	.+50     	; 0x13de <xQueueGenericReceive+0x90>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    13ac:	11 50       	subi	r17, 0x01	; 1
    13ae:	f7 01       	movw	r30, r14
    13b0:	12 8f       	std	Z+26, r17	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <xQueueGenericReceive+0x76>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    13ba:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <pvTaskIncrementMutexHeldCount>
    13be:	f7 01       	movw	r30, r14
    13c0:	93 83       	std	Z+3, r25	; 0x03
    13c2:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13c4:	f7 01       	movw	r30, r14
    13c6:	80 85       	ldd	r24, Z+8	; 0x08
    13c8:	88 23       	and	r24, r24
    13ca:	b9 f0       	breq	.+46     	; 0x13fa <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13cc:	c7 01       	movw	r24, r14
    13ce:	08 96       	adiw	r24, 0x08	; 8
    13d0:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskRemoveFromEventList>
    13d4:	88 23       	and	r24, r24
    13d6:	89 f0       	breq	.+34     	; 0x13fa <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
    13d8:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
    13dc:	0e c0       	rjmp	.+28     	; 0x13fa <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    13de:	f7 01       	movw	r30, r14
    13e0:	b7 82       	std	Z+7, r11	; 0x07
    13e2:	a6 82       	std	Z+6, r10	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    13e4:	81 89       	ldd	r24, Z+17	; 0x11
    13e6:	88 23       	and	r24, r24
    13e8:	41 f0       	breq	.+16     	; 0x13fa <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    13ea:	c7 01       	movw	r24, r14
    13ec:	41 96       	adiw	r24, 0x11	; 17
    13ee:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskRemoveFromEventList>
    13f2:	88 23       	and	r24, r24
    13f4:	11 f0       	breq	.+4      	; 0x13fa <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    13f6:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	61 c0       	rjmp	.+194    	; 0x14c4 <xQueueGenericReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	21 f4       	brne	.+8      	; 0x1412 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	59 c0       	rjmp	.+178    	; 0x14c4 <xQueueGenericReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
    1412:	00 23       	and	r16, r16
    1414:	29 f4       	brne	.+10     	; 0x1420 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    141e:	0d 2d       	mov	r16, r13
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1424:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	0f 92       	push	r0
    142e:	f7 01       	movw	r30, r14
    1430:	85 8d       	ldd	r24, Z+29	; 0x1d
    1432:	8f 3f       	cpi	r24, 0xFF	; 255
    1434:	09 f4       	brne	.+2      	; 0x1438 <xQueueGenericReceive+0xea>
    1436:	15 8e       	std	Z+29, r1	; 0x1d
    1438:	f7 01       	movw	r30, r14
    143a:	86 8d       	ldd	r24, Z+30	; 0x1e
    143c:	8f 3f       	cpi	r24, 0xFF	; 255
    143e:	09 f4       	brne	.+2      	; 0x1442 <xQueueGenericReceive+0xf4>
    1440:	16 8e       	std	Z+30, r1	; 0x1e
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	be 01       	movw	r22, r28
    144c:	6c 5f       	subi	r22, 0xFC	; 252
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	0e 94 ff 11 	call	0x23fe	; 0x23fe <xTaskCheckForTimeOut>
    1454:	88 23       	and	r24, r24
    1456:	51 f5       	brne	.+84     	; 0x14ac <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1458:	c7 01       	movw	r24, r14
    145a:	0e 94 39 07 	call	0xe72	; 0xe72 <prvIsQueueEmpty>
    145e:	88 23       	and	r24, r24
    1460:	f9 f0       	breq	.+62     	; 0x14a0 <xQueueGenericReceive+0x152>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1462:	f7 01       	movw	r30, r14
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	51 f4       	brne	.+20     	; 0x1480 <xQueueGenericReceive+0x132>
					{
						taskENTER_CRITICAL();
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1472:	f7 01       	movw	r30, r14
    1474:	82 81       	ldd	r24, Z+2	; 0x02
    1476:	93 81       	ldd	r25, Z+3	; 0x03
    1478:	0e 94 3d 12 	call	0x247a	; 0x247a <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1480:	6c 81       	ldd	r22, Y+4	; 0x04
    1482:	7d 81       	ldd	r23, Y+5	; 0x05
    1484:	c5 01       	movw	r24, r10
    1486:	0e 94 44 11 	call	0x2288	; 0x2288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    148a:	c7 01       	movw	r24, r14
    148c:	0e 94 61 07 	call	0xec2	; 0xec2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1490:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
    1494:	88 23       	and	r24, r24
    1496:	09 f0       	breq	.+2      	; 0x149a <xQueueGenericReceive+0x14c>
    1498:	7a cf       	rjmp	.-268    	; 0x138e <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
    149a:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
    149e:	77 cf       	rjmp	.-274    	; 0x138e <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    14a0:	c7 01       	movw	r24, r14
    14a2:	0e 94 61 07 	call	0xec2	; 0xec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    14a6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
    14aa:	71 cf       	rjmp	.-286    	; 0x138e <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    14ac:	c7 01       	movw	r24, r14
    14ae:	0e 94 61 07 	call	0xec2	; 0xec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    14b2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    14b6:	c7 01       	movw	r24, r14
    14b8:	0e 94 39 07 	call	0xe72	; 0xe72 <prvIsQueueEmpty>
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <xQueueGenericReceive+0x174>
    14c0:	66 cf       	rjmp	.-308    	; 0x138e <xQueueGenericReceive+0x40>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	cf 90       	pop	r12
    14de:	bf 90       	pop	r11
    14e0:	af 90       	pop	r10
    14e2:	9f 90       	pop	r9
    14e4:	8f 90       	pop	r8
    14e6:	08 95       	ret

000014e8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	8c 01       	movw	r16, r24
    14f6:	7a 01       	movw	r14, r20
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    14f8:	fc 01       	movw	r30, r24
    14fa:	c2 8d       	ldd	r28, Z+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    14fc:	cc 23       	and	r28, r28
    14fe:	e9 f0       	breq	.+58     	; 0x153a <xQueueReceiveFromISR+0x52>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    1500:	d5 8d       	ldd	r29, Z+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1502:	0e 94 44 07 	call	0xe88	; 0xe88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1506:	c1 50       	subi	r28, 0x01	; 1
    1508:	f8 01       	movw	r30, r16
    150a:	c2 8f       	std	Z+26, r28	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    150c:	df 3f       	cpi	r29, 0xFF	; 255
    150e:	81 f4       	brne	.+32     	; 0x1530 <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1510:	80 85       	ldd	r24, Z+8	; 0x08
    1512:	88 23       	and	r24, r24
    1514:	a1 f0       	breq	.+40     	; 0x153e <xQueueReceiveFromISR+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1516:	c8 01       	movw	r24, r16
    1518:	08 96       	adiw	r24, 0x08	; 8
    151a:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskRemoveFromEventList>
    151e:	88 23       	and	r24, r24
    1520:	81 f0       	breq	.+32     	; 0x1542 <xQueueReceiveFromISR+0x5a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1522:	e1 14       	cp	r14, r1
    1524:	f1 04       	cpc	r15, r1
    1526:	79 f0       	breq	.+30     	; 0x1546 <xQueueReceiveFromISR+0x5e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	f7 01       	movw	r30, r14
    152c:	80 83       	st	Z, r24
    152e:	0c c0       	rjmp	.+24     	; 0x1548 <xQueueReceiveFromISR+0x60>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    1530:	df 5f       	subi	r29, 0xFF	; 255
    1532:	f8 01       	movw	r30, r16
    1534:	d5 8f       	std	Z+29, r29	; 0x1d
			}

			xReturn = pdPASS;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <xQueueReceiveFromISR+0x60>
		}
		else
		{
			xReturn = pdFAIL;
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	05 c0       	rjmp	.+10     	; 0x1548 <xQueueReceiveFromISR+0x60>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
			}

			xReturn = pdPASS;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <xQueueReceiveFromISR+0x60>
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <xQueueReceiveFromISR+0x60>
    1546:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	08 95       	ret

00001556 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1560:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1562:	88 23       	and	r24, r24
    1564:	49 f0       	breq	.+18     	; 0x1578 <xQueuePeekFromISR+0x22>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1566:	0e 81       	ldd	r16, Y+6	; 0x06
    1568:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    156a:	ce 01       	movw	r24, r28
    156c:	0e 94 44 07 	call	0xe88	; 0xe88 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1570:	1f 83       	std	Y+7, r17	; 0x07
    1572:	0e 83       	std	Y+6, r16	; 0x06

			xReturn = pdPASS;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	01 c0       	rjmp	.+2      	; 0x157a <xQueuePeekFromISR+0x24>
		}
		else
		{
			xReturn = pdFAIL;
    1578:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    158a:	fc 01       	movw	r30, r24
    158c:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1592:	08 95       	ret

00001594 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    1594:	fc 01       	movw	r30, r24
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    159c:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    15a2:	83 8d       	ldd	r24, Z+27	; 0x1b
	}
	taskEXIT_CRITICAL();

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    15a4:	89 1b       	sub	r24, r25
    15a6:	08 95       	ret

000015a8 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    15a8:	fc 01       	movw	r30, r24
    15aa:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    15ac:	08 95       	ret

000015ae <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    15ae:	fc 01       	movw	r30, r24
    15b0:	92 8d       	ldd	r25, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	91 11       	cpse	r25, r1
    15b6:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    15b8:	08 95       	ret

000015ba <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    15ba:	fc 01       	movw	r30, r24
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    15bc:	22 8d       	ldd	r18, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	93 8d       	ldd	r25, Z+27	; 0x1b
    15c2:	29 13       	cpse	r18, r25
    15c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    15c6:	08 95       	ret

000015c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    15c8:	dc 01       	movw	r26, r24

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    15ca:	80 91 0a 04 	lds	r24, 0x040A
    15ce:	90 91 0b 04 	lds	r25, 0x040B
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	51 f0       	breq	.+20     	; 0x15ea <vQueueAddToRegistry+0x22>
    15d6:	ee e0       	ldi	r30, 0x0E	; 14
    15d8:	f4 e0       	ldi	r31, 0x04	; 4
    15da:	21 e0       	ldi	r18, 0x01	; 1
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	a9 01       	movw	r20, r18
    15e0:	80 81       	ld	r24, Z
    15e2:	91 81       	ldd	r25, Z+1	; 0x01
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	79 f4       	brne	.+30     	; 0x1606 <vQueueAddToRegistry+0x3e>
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <vQueueAddToRegistry+0x26>
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	50 e0       	ldi	r21, 0x00	; 0
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    15ee:	fa 01       	movw	r30, r20
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	e6 5f       	subi	r30, 0xF6	; 246
    15fa:	fb 4f       	sbci	r31, 0xFB	; 251
    15fc:	71 83       	std	Z+1, r23	; 0x01
    15fe:	60 83       	st	Z, r22
				xQueueRegistry[ ux ].xHandle = xQueue;
    1600:	b3 83       	std	Z+3, r27	; 0x03
    1602:	a2 83       	std	Z+2, r26	; 0x02

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    1604:	08 95       	ret
    1606:	2f 5f       	subi	r18, 0xFF	; 255
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    160c:	28 30       	cpi	r18, 0x08	; 8
    160e:	31 05       	cpc	r19, r1
    1610:	31 f7       	brne	.-52     	; 0x15de <vQueueAddToRegistry+0x16>
    1612:	08 95       	ret

00001614 <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1614:	ac 01       	movw	r20, r24

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    1616:	80 91 0c 04 	lds	r24, 0x040C
    161a:	90 91 0d 04 	lds	r25, 0x040D
    161e:	84 17       	cp	r24, r20
    1620:	95 07       	cpc	r25, r21
    1622:	59 f0       	breq	.+22     	; 0x163a <pcQueueGetName+0x26>
    1624:	e0 e1       	ldi	r30, 0x10	; 16
    1626:	f4 e0       	ldi	r31, 0x04	; 4
    1628:	21 e0       	ldi	r18, 0x01	; 1
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	b9 01       	movw	r22, r18
    162e:	80 81       	ld	r24, Z
    1630:	91 81       	ldd	r25, Z+1	; 0x01
    1632:	84 17       	cp	r24, r20
    1634:	95 07       	cpc	r25, r21
    1636:	69 f4       	brne	.+26     	; 0x1652 <pcQueueGetName+0x3e>
    1638:	02 c0       	rjmp	.+4      	; 0x163e <pcQueueGetName+0x2a>
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	70 e0       	ldi	r23, 0x00	; 0
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    163e:	fb 01       	movw	r30, r22
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	e6 5f       	subi	r30, 0xF6	; 246
    164a:	fb 4f       	sbci	r31, 0xFB	; 251
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
				break;
    1650:	08 95       	ret
    1652:	2f 5f       	subi	r18, 0xFF	; 255
    1654:	3f 4f       	sbci	r19, 0xFF	; 255
    1656:	34 96       	adiw	r30, 0x04	; 4
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1658:	28 30       	cpi	r18, 0x08	; 8
    165a:	31 05       	cpc	r19, r1
    165c:	39 f7       	brne	.-50     	; 0x162c <pcQueueGetName+0x18>
#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
	}
    1662:	08 95       	ret

00001664 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    1664:	ac 01       	movw	r20, r24

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    1666:	80 91 0c 04 	lds	r24, 0x040C
    166a:	90 91 0d 04 	lds	r25, 0x040D
    166e:	84 17       	cp	r24, r20
    1670:	95 07       	cpc	r25, r21
    1672:	59 f0       	breq	.+22     	; 0x168a <vQueueUnregisterQueue+0x26>
    1674:	e0 e1       	ldi	r30, 0x10	; 16
    1676:	f4 e0       	ldi	r31, 0x04	; 4
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	b9 01       	movw	r22, r18
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	84 17       	cp	r24, r20
    1684:	95 07       	cpc	r25, r21
    1686:	79 f4       	brne	.+30     	; 0x16a6 <vQueueUnregisterQueue+0x42>
    1688:	02 c0       	rjmp	.+4      	; 0x168e <vQueueUnregisterQueue+0x2a>
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	70 e0       	ldi	r23, 0x00	; 0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    168e:	fb 01       	movw	r30, r22
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	e6 5f       	subi	r30, 0xF6	; 246
    169a:	fb 4f       	sbci	r31, 0xFB	; 251
    169c:	11 82       	std	Z+1, r1	; 0x01
    169e:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    16a0:	13 82       	std	Z+3, r1	; 0x03
    16a2:	12 82       	std	Z+2, r1	; 0x02
				break;
    16a4:	08 95       	ret
    16a6:	2f 5f       	subi	r18, 0xFF	; 255
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    16ac:	28 30       	cpi	r18, 0x08	; 8
    16ae:	31 05       	cpc	r19, r1
    16b0:	29 f7       	brne	.-54     	; 0x167c <vQueueUnregisterQueue+0x18>
    16b2:	08 95       	ret

000016b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	ec 01       	movw	r28, r24
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    16ba:	0e 94 32 0b 	call	0x1664	; 0x1664 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    16be:	ce 01       	movw	r24, r28
    16c0:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	08 95       	ret

000016ca <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    16ca:	fc 01       	movw	r30, r24

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    16cc:	82 85       	ldd	r24, Z+10	; 0x0a
    16ce:	93 85       	ldd	r25, Z+11	; 0x0b
    16d0:	23 e0       	ldi	r18, 0x03	; 3
    16d2:	89 3f       	cpi	r24, 0xF9	; 249
    16d4:	92 07       	cpc	r25, r18
    16d6:	61 f4       	brne	.+24     	; 0x16f0 <prvTaskIsTaskSuspended+0x26>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    16d8:	24 89       	ldd	r18, Z+20	; 0x14
    16da:	35 89       	ldd	r19, Z+21	; 0x15
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	27 3e       	cpi	r18, 0xE7	; 231
    16e0:	38 07       	cpc	r19, r24
    16e2:	41 f0       	breq	.+16     	; 0x16f4 <prvTaskIsTaskSuspended+0x2a>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	21 15       	cp	r18, r1
    16e8:	31 05       	cpc	r19, r1
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <prvTaskIsTaskSuspended+0x2c>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	08 95       	ret
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	08 95       	ret
    16f4:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    16f6:	08 95       	ret

000016f8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    16f8:	e0 91 a5 03 	lds	r30, 0x03A5
    16fc:	f0 91 a6 03 	lds	r31, 0x03A6
    1700:	80 81       	ld	r24, Z
    1702:	88 23       	and	r24, r24
    1704:	39 f4       	brne	.+14     	; 0x1714 <prvResetNextTaskUnblockTime+0x1c>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	9f ef       	ldi	r25, 0xFF	; 255
    170a:	90 93 99 03 	sts	0x0399, r25
    170e:	80 93 98 03 	sts	0x0398, r24
    1712:	08 95       	ret
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1714:	e0 91 a5 03 	lds	r30, 0x03A5
    1718:	f0 91 a6 03 	lds	r31, 0x03A6
    171c:	05 80       	ldd	r0, Z+5	; 0x05
    171e:	f6 81       	ldd	r31, Z+6	; 0x06
    1720:	e0 2d       	mov	r30, r0
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1722:	06 80       	ldd	r0, Z+6	; 0x06
    1724:	f7 81       	ldd	r31, Z+7	; 0x07
    1726:	e0 2d       	mov	r30, r0
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	90 93 99 03 	sts	0x0399, r25
    1730:	80 93 98 03 	sts	0x0398, r24
    1734:	08 95       	ret

00001736 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
    1742:	16 2f       	mov	r17, r22
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    1744:	e0 90 9f 03 	lds	r14, 0x039F
    1748:	f0 90 a0 03 	lds	r15, 0x03A0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    174c:	80 91 95 03 	lds	r24, 0x0395
    1750:	90 91 96 03 	lds	r25, 0x0396
    1754:	02 96       	adiw	r24, 0x02	; 2
    1756:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	cf 3f       	cpi	r28, 0xFF	; 255
    175e:	d8 07       	cpc	r29, r24
    1760:	69 f4       	brne	.+26     	; 0x177c <prvAddCurrentTaskToDelayedList+0x46>
    1762:	11 23       	and	r17, r17
    1764:	59 f0       	breq	.+22     	; 0x177c <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1766:	60 91 95 03 	lds	r22, 0x0395
    176a:	70 91 96 03 	lds	r23, 0x0396
    176e:	6e 5f       	subi	r22, 0xFE	; 254
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	89 ef       	ldi	r24, 0xF9	; 249
    1774:	93 e0       	ldi	r25, 0x03	; 3
    1776:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    177a:	2f c0       	rjmp	.+94     	; 0x17da <prvAddCurrentTaskToDelayedList+0xa4>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    177c:	ce 0d       	add	r28, r14
    177e:	df 1d       	adc	r29, r15

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1780:	e0 91 95 03 	lds	r30, 0x0395
    1784:	f0 91 96 03 	lds	r31, 0x0396
    1788:	d3 83       	std	Z+3, r29	; 0x03
    178a:	c2 83       	std	Z+2, r28	; 0x02

			if( xTimeToWake < xConstTickCount )
    178c:	ce 15       	cp	r28, r14
    178e:	df 05       	cpc	r29, r15
    1790:	68 f4       	brcc	.+26     	; 0x17ac <prvAddCurrentTaskToDelayedList+0x76>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1792:	80 91 a3 03 	lds	r24, 0x03A3
    1796:	90 91 a4 03 	lds	r25, 0x03A4
    179a:	60 91 95 03 	lds	r22, 0x0395
    179e:	70 91 96 03 	lds	r23, 0x0396
    17a2:	6e 5f       	subi	r22, 0xFE	; 254
    17a4:	7f 4f       	sbci	r23, 0xFF	; 255
    17a6:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>
    17aa:	17 c0       	rjmp	.+46     	; 0x17da <prvAddCurrentTaskToDelayedList+0xa4>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    17ac:	80 91 a5 03 	lds	r24, 0x03A5
    17b0:	90 91 a6 03 	lds	r25, 0x03A6
    17b4:	60 91 95 03 	lds	r22, 0x0395
    17b8:	70 91 96 03 	lds	r23, 0x0396
    17bc:	6e 5f       	subi	r22, 0xFE	; 254
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    17c4:	80 91 98 03 	lds	r24, 0x0398
    17c8:	90 91 99 03 	lds	r25, 0x0399
    17cc:	c8 17       	cp	r28, r24
    17ce:	d9 07       	cpc	r29, r25
    17d0:	20 f4       	brcc	.+8      	; 0x17da <prvAddCurrentTaskToDelayedList+0xa4>
				{
					xNextTaskUnblockTime = xTimeToWake;
    17d2:	d0 93 99 03 	sts	0x0399, r29
    17d6:	c0 93 98 03 	sts	0x0398, r28

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	08 95       	ret

000017e6 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	ec 01       	movw	r28, r24

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    17ec:	8f 89       	ldd	r24, Y+23	; 0x17
    17ee:	98 8d       	ldd	r25, Y+24	; 0x18
    17f0:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
			vPortFree( pxTCB );
    17f4:	ce 01       	movw	r24, r28
    17f6:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1800:	2f 92       	push	r2
    1802:	3f 92       	push	r3
    1804:	4f 92       	push	r4
    1806:	5f 92       	push	r5
    1808:	6f 92       	push	r6
    180a:	7f 92       	push	r7
    180c:	8f 92       	push	r8
    180e:	9f 92       	push	r9
    1810:	af 92       	push	r10
    1812:	bf 92       	push	r11
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	3c 01       	movw	r6, r24
    1824:	5b 01       	movw	r10, r22
    1826:	ea 01       	movw	r28, r20
    1828:	29 01       	movw	r4, r18
    182a:	d0 2e       	mov	r13, r16
    182c:	47 01       	movw	r8, r14
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    182e:	ca 01       	movw	r24, r20
    1830:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <pvPortMalloc>
    1834:	7c 01       	movw	r14, r24

			if( pxStack != NULL )
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	09 f4       	brne	.+2      	; 0x183c <xTaskCreate+0x3c>
    183a:	ed c0       	rjmp	.+474    	; 0x1a16 <xTaskCreate+0x216>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    183c:	8a e2       	ldi	r24, 0x2A	; 42
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <pvPortMalloc>
    1844:	8c 01       	movw	r16, r24

				if( pxNewTCB != NULL )
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	81 f0       	breq	.+32     	; 0x186a <xTaskCreate+0x6a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    184a:	fc 01       	movw	r30, r24
    184c:	f0 8e       	std	Z+24, r15	; 0x18
    184e:	e7 8a       	std	Z+23, r14	; 0x17
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1850:	21 97       	sbiw	r28, 0x01	; 1
    1852:	17 01       	movw	r2, r14
    1854:	2c 0e       	add	r2, r28
    1856:	3d 1e       	adc	r3, r29
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1858:	f5 01       	movw	r30, r10
    185a:	80 81       	ld	r24, Z
    185c:	f8 01       	movw	r30, r16
    185e:	81 8f       	std	Z+25, r24	; 0x19

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1860:	f5 01       	movw	r30, r10
    1862:	80 81       	ld	r24, Z
    1864:	88 23       	and	r24, r24
    1866:	31 f4       	brne	.+12     	; 0x1874 <xTaskCreate+0x74>
    1868:	13 c0       	rjmp	.+38     	; 0x1890 <xTaskCreate+0x90>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    186a:	c7 01       	movw	r24, r14
    186c:	0e 94 83 04 	call	0x906	; 0x906 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	d6 c0       	rjmp	.+428    	; 0x1a20 <xTaskCreate+0x220>
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    1874:	e8 01       	movw	r28, r16
    1876:	6a 96       	adiw	r28, 0x1a	; 26
    1878:	d5 01       	movw	r26, r10
    187a:	11 96       	adiw	r26, 0x01	; 1
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    187c:	81 e0       	ldi	r24, 0x01	; 1
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    187e:	fd 01       	movw	r30, r26
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1880:	9d 91       	ld	r25, X+
    1882:	99 93       	st	Y+, r25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1884:	90 81       	ld	r25, Z
    1886:	99 23       	and	r25, r25
    1888:	19 f0       	breq	.+6      	; 0x1890 <xTaskCreate+0x90>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	8a 30       	cpi	r24, 0x0A	; 10
    188e:	b9 f7       	brne	.-18     	; 0x187e <xTaskCreate+0x7e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1890:	f8 01       	movw	r30, r16
    1892:	12 a2       	lds	r17, 0x92
    1894:	cd 2d       	mov	r28, r13
    1896:	c5 30       	cpi	r28, 0x05	; 5
    1898:	08 f0       	brcs	.+2      	; 0x189c <xTaskCreate+0x9c>
    189a:	c4 e0       	ldi	r28, 0x04	; 4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    189c:	f8 01       	movw	r30, r16
    189e:	c6 8b       	std	Z+22, r28	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    18a0:	c3 a3       	lds	r28, 0x53
		pxNewTCB->uxMutexesHeld = 0;
    18a2:	14 a2       	lds	r17, 0x94
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    18a4:	ee 24       	eor	r14, r14
    18a6:	ff 24       	eor	r15, r15
    18a8:	68 94       	set
    18aa:	e1 f8       	bld	r14, 1
    18ac:	e0 0e       	add	r14, r16
    18ae:	f1 1e       	adc	r15, r17
    18b0:	c7 01       	movw	r24, r14
    18b2:	0e 94 ca 04 	call	0x994	; 0x994 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    18b6:	c8 01       	movw	r24, r16
    18b8:	0c 96       	adiw	r24, 0x0c	; 12
    18ba:	0e 94 ca 04 	call	0x994	; 0x994 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    18be:	f8 01       	movw	r30, r16
    18c0:	11 87       	std	Z+9, r17	; 0x09
    18c2:	00 87       	std	Z+8, r16	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    18c4:	85 e0       	ldi	r24, 0x05	; 5
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	8c 1b       	sub	r24, r28
    18ca:	91 09       	sbc	r25, r1
    18cc:	95 87       	std	Z+13, r25	; 0x0d
    18ce:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    18d0:	13 8b       	std	Z+19, r17	; 0x13
    18d2:	02 8b       	std	Z+18, r16	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    18d4:	15 a2       	lds	r17, 0x95
    18d6:	16 a2       	lds	r17, 0x96
    18d8:	17 a2       	lds	r17, 0x97
    18da:	10 a6       	lds	r17, 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    18dc:	11 a6       	lds	r17, 0xb1
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    18de:	c1 01       	movw	r24, r2
    18e0:	b3 01       	movw	r22, r6
    18e2:	a2 01       	movw	r20, r4
    18e4:	0e 94 ba 05 	call	0xb74	; 0xb74 <pxPortInitialiseStack>
    18e8:	f8 01       	movw	r30, r16
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    18ee:	81 14       	cp	r8, r1
    18f0:	91 04       	cpc	r9, r1
    18f2:	19 f0       	breq	.+6      	; 0x18fa <xTaskCreate+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    18f4:	f4 01       	movw	r30, r8
    18f6:	11 83       	std	Z+1, r17	; 0x01
    18f8:	00 83       	st	Z, r16

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    1900:	80 91 a1 03 	lds	r24, 0x03A1
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	80 93 a1 03 	sts	0x03A1, r24
		if( pxCurrentTCB == NULL )
    190a:	80 91 95 03 	lds	r24, 0x0395
    190e:	90 91 96 03 	lds	r25, 0x0396
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	09 f0       	breq	.+2      	; 0x1918 <xTaskCreate+0x118>
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <xTaskCreate+0x196>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    1918:	10 93 96 03 	sts	0x0396, r17
    191c:	00 93 95 03 	sts	0x0395, r16

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1920:	80 91 a1 03 	lds	r24, 0x03A1
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	09 f0       	breq	.+2      	; 0x192a <xTaskCreate+0x12a>
    1928:	47 c0       	rjmp	.+142    	; 0x19b8 <xTaskCreate+0x1b8>
    192a:	c0 e0       	ldi	r28, 0x00	; 0
    192c:	d0 e0       	ldi	r29, 0x00	; 0
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    192e:	ce 01       	movw	r24, r28
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	8c 0f       	add	r24, r28
    193e:	9d 1f       	adc	r25, r29
    1940:	88 55       	subi	r24, 0x58	; 88
    1942:	9c 4f       	sbci	r25, 0xFC	; 252
    1944:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
    1948:	21 96       	adiw	r28, 0x01	; 1

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    194a:	c5 30       	cpi	r28, 0x05	; 5
    194c:	d1 05       	cpc	r29, r1
    194e:	79 f7       	brne	.-34     	; 0x192e <xTaskCreate+0x12e>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1950:	c5 ed       	ldi	r28, 0xD5	; 213
    1952:	d3 e0       	ldi	r29, 0x03	; 3
    1954:	ce 01       	movw	r24, r28
    1956:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    195a:	0f 2e       	mov	r0, r31
    195c:	fe ed       	ldi	r31, 0xDE	; 222
    195e:	af 2e       	mov	r10, r31
    1960:	f3 e0       	ldi	r31, 0x03	; 3
    1962:	bf 2e       	mov	r11, r31
    1964:	f0 2d       	mov	r31, r0
    1966:	c5 01       	movw	r24, r10
    1968:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    196c:	87 ee       	ldi	r24, 0xE7	; 231
    196e:	93 e0       	ldi	r25, 0x03	; 3
    1970:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1974:	80 ef       	ldi	r24, 0xF0	; 240
    1976:	93 e0       	ldi	r25, 0x03	; 3
    1978:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    197c:	89 ef       	ldi	r24, 0xF9	; 249
    197e:	93 e0       	ldi	r25, 0x03	; 3
    1980:	0e 94 bc 04 	call	0x978	; 0x978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1984:	d0 93 a6 03 	sts	0x03A6, r29
    1988:	c0 93 a5 03 	sts	0x03A5, r28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    198c:	b0 92 a4 03 	sts	0x03A4, r11
    1990:	a0 92 a3 03 	sts	0x03A3, r10
    1994:	11 c0       	rjmp	.+34     	; 0x19b8 <xTaskCreate+0x1b8>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    1996:	80 91 9d 03 	lds	r24, 0x039D
    199a:	88 23       	and	r24, r24
    199c:	69 f4       	brne	.+26     	; 0x19b8 <xTaskCreate+0x1b8>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    199e:	e0 91 95 03 	lds	r30, 0x0395
    19a2:	f0 91 96 03 	lds	r31, 0x0396
    19a6:	96 89       	ldd	r25, Z+22	; 0x16
    19a8:	f8 01       	movw	r30, r16
    19aa:	86 89       	ldd	r24, Z+22	; 0x16
    19ac:	89 17       	cp	r24, r25
    19ae:	20 f0       	brcs	.+8      	; 0x19b8 <xTaskCreate+0x1b8>
				{
					pxCurrentTCB = pxNewTCB;
    19b0:	10 93 96 03 	sts	0x0396, r17
    19b4:	00 93 95 03 	sts	0x0395, r16
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    19b8:	80 91 a7 03 	lds	r24, 0x03A7
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	80 93 a7 03 	sts	0x03A7, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    19c2:	f8 01       	movw	r30, r16
    19c4:	86 89       	ldd	r24, Z+22	; 0x16
    19c6:	90 91 9e 03 	lds	r25, 0x039E
    19ca:	98 17       	cp	r25, r24
    19cc:	10 f4       	brcc	.+4      	; 0x19d2 <xTaskCreate+0x1d2>
    19ce:	80 93 9e 03 	sts	0x039E, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9c 01       	movw	r18, r24
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	22 0f       	add	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	82 0f       	add	r24, r18
    19e4:	93 1f       	adc	r25, r19
    19e6:	88 55       	subi	r24, 0x58	; 88
    19e8:	9c 4f       	sbci	r25, 0xFC	; 252
    19ea:	b7 01       	movw	r22, r14
    19ec:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    19f4:	80 91 9d 03 	lds	r24, 0x039D
    19f8:	88 23       	and	r24, r24
    19fa:	79 f0       	breq	.+30     	; 0x1a1a <xTaskCreate+0x21a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    19fc:	e0 91 95 03 	lds	r30, 0x0395
    1a00:	f0 91 96 03 	lds	r31, 0x0396
    1a04:	96 89       	ldd	r25, Z+22	; 0x16
    1a06:	f8 01       	movw	r30, r16
    1a08:	86 89       	ldd	r24, Z+22	; 0x16
    1a0a:	98 17       	cp	r25, r24
    1a0c:	40 f4       	brcc	.+16     	; 0x1a1e <xTaskCreate+0x21e>
		{
			taskYIELD_IF_USING_PREEMPTION();
    1a0e:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	05 c0       	rjmp	.+10     	; 0x1a20 <xTaskCreate+0x220>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1a16:	8f ef       	ldi	r24, 0xFF	; 255
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <xTaskCreate+0x220>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <xTaskCreate+0x220>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	bf 90       	pop	r11
    1a30:	af 90       	pop	r10
    1a32:	9f 90       	pop	r9
    1a34:	8f 90       	pop	r8
    1a36:	7f 90       	pop	r7
    1a38:	6f 90       	pop	r6
    1a3a:	5f 90       	pop	r5
    1a3c:	4f 90       	pop	r4
    1a3e:	3f 90       	pop	r3
    1a40:	2f 90       	pop	r2
    1a42:	08 95       	ret

00001a44 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	29 f4       	brne	.+10     	; 0x1a60 <vTaskDelete+0x1c>
    1a56:	c0 91 95 03 	lds	r28, 0x0395
    1a5a:	d0 91 96 03 	lds	r29, 0x0396
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <vTaskDelete+0x1e>
    1a60:	ec 01       	movw	r28, r24

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1a62:	8e 01       	movw	r16, r28
    1a64:	0e 5f       	subi	r16, 0xFE	; 254
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	c8 01       	movw	r24, r16
    1a6a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1a6e:	8c 89       	ldd	r24, Y+20	; 0x14
    1a70:	9d 89       	ldd	r25, Y+21	; 0x15
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	21 f0       	breq	.+8      	; 0x1a7e <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1a76:	ce 01       	movw	r24, r28
    1a78:	0c 96       	adiw	r24, 0x0c	; 12
    1a7a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    1a7e:	80 91 a7 03 	lds	r24, 0x03A7
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	80 93 a7 03 	sts	0x03A7, r24

			if( pxTCB == pxCurrentTCB )
    1a88:	80 91 95 03 	lds	r24, 0x0395
    1a8c:	90 91 96 03 	lds	r25, 0x0396
    1a90:	c8 17       	cp	r28, r24
    1a92:	d9 07       	cpc	r29, r25
    1a94:	59 f4       	brne	.+22     	; 0x1aac <vTaskDelete+0x68>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    1a96:	80 ef       	ldi	r24, 0xF0	; 240
    1a98:	93 e0       	ldi	r25, 0x03	; 3
    1a9a:	b8 01       	movw	r22, r16
    1a9c:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    1aa0:	80 91 a2 03 	lds	r24, 0x03A2
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	80 93 a2 03 	sts	0x03A2, r24
    1aaa:	0a c0       	rjmp	.+20     	; 0x1ac0 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    1aac:	80 91 a1 03 	lds	r24, 0x03A1
    1ab0:	81 50       	subi	r24, 0x01	; 1
    1ab2:	80 93 a1 03 	sts	0x03A1, r24
				prvDeleteTCB( pxTCB );
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    1abc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    1ac4:	80 91 9d 03 	lds	r24, 0x039D
    1ac8:	88 23       	and	r24, r24
    1aca:	49 f0       	breq	.+18     	; 0x1ade <vTaskDelete+0x9a>
		{
			if( pxTCB == pxCurrentTCB )
    1acc:	80 91 95 03 	lds	r24, 0x0395
    1ad0:	90 91 96 03 	lds	r25, 0x0396
    1ad4:	c8 17       	cp	r28, r24
    1ad6:	d9 07       	cpc	r29, r25
    1ad8:	11 f4       	brne	.+4      	; 0x1ade <vTaskDelete+0x9a>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    1ada:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <uxTaskPriorityGet>:
	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	29 f4       	brne	.+10     	; 0x1afc <uxTaskPriorityGet+0x14>
    1af2:	e0 91 95 03 	lds	r30, 0x0395
    1af6:	f0 91 96 03 	lds	r31, 0x0396
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <uxTaskPriorityGet+0x16>
    1afc:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		taskEXIT_CRITICAL();
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
	}
    1b02:	86 89       	ldd	r24, Z+22	; 0x16
    1b04:	08 95       	ret

00001b06 <uxTaskPriorityGetFromISR>:

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	29 f4       	brne	.+10     	; 0x1b14 <uxTaskPriorityGetFromISR+0xe>
    1b0a:	e0 91 95 03 	lds	r30, 0x0395
    1b0e:	f0 91 96 03 	lds	r31, 0x0396
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <uxTaskPriorityGetFromISR+0x10>
    1b14:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
	}
    1b16:	86 89       	ldd	r24, Z+22	; 0x16
    1b18:	08 95       	ret

00001b1a <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	1f 93       	push	r17
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    1b24:	65 30       	cpi	r22, 0x05	; 5
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <vTaskPrioritySet+0x10>
    1b28:	64 e0       	ldi	r22, 0x04	; 4
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	29 f4       	brne	.+10     	; 0x1b3e <vTaskPrioritySet+0x24>
    1b34:	c0 91 95 03 	lds	r28, 0x0395
    1b38:	d0 91 96 03 	lds	r29, 0x0396
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <vTaskPrioritySet+0x26>
    1b3e:	ec 01       	movw	r28, r24

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    1b40:	2b a1       	lds	r18, 0x4b
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    1b42:	26 17       	cp	r18, r22
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <vTaskPrioritySet+0x2e>
    1b46:	61 c0       	rjmp	.+194    	; 0x1c0a <vTaskPrioritySet+0xf0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    1b48:	26 17       	cp	r18, r22
    1b4a:	88 f4       	brcc	.+34     	; 0x1b6e <vTaskPrioritySet+0x54>
				{
					if( pxTCB != pxCurrentTCB )
    1b4c:	80 91 95 03 	lds	r24, 0x0395
    1b50:	90 91 96 03 	lds	r25, 0x0396
    1b54:	c8 17       	cp	r28, r24
    1b56:	d9 07       	cpc	r29, r25
    1b58:	a1 f0       	breq	.+40     	; 0x1b82 <vTaskPrioritySet+0x68>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    1b5a:	e0 91 95 03 	lds	r30, 0x0395
    1b5e:	f0 91 96 03 	lds	r31, 0x0396
						{
							xYieldRequired = pdTRUE;
    1b62:	11 e0       	ldi	r17, 0x01	; 1
    1b64:	86 89       	ldd	r24, Z+22	; 0x16
    1b66:	68 17       	cp	r22, r24
    1b68:	68 f4       	brcc	.+26     	; 0x1b84 <vTaskPrioritySet+0x6a>
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	0b c0       	rjmp	.+22     	; 0x1b84 <vTaskPrioritySet+0x6a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    1b6e:	80 91 95 03 	lds	r24, 0x0395
    1b72:	90 91 96 03 	lds	r25, 0x0396
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
    1b76:	11 e0       	ldi	r17, 0x01	; 1
    1b78:	c8 17       	cp	r28, r24
    1b7a:	d9 07       	cpc	r29, r25
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <vTaskPrioritySet+0x6a>
    1b7e:	10 e0       	ldi	r17, 0x00	; 0
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <vTaskPrioritySet+0x6a>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    1b82:	10 e0       	ldi	r17, 0x00	; 0
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    1b84:	8e 89       	ldd	r24, Y+22	; 0x16

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    1b86:	28 17       	cp	r18, r24
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <vTaskPrioritySet+0x72>
					{
						pxTCB->uxPriority = uxNewPriority;
    1b8a:	6e 8b       	std	Y+22, r22	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    1b8c:	6b a3       	lds	r22, 0x5b
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1b8e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b90:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b92:	33 23       	and	r19, r19
    1b94:	34 f0       	brlt	.+12     	; 0x1ba2 <vTaskPrioritySet+0x88>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b96:	25 e0       	ldi	r18, 0x05	; 5
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	26 1b       	sub	r18, r22
    1b9c:	31 09       	sbc	r19, r1
    1b9e:	3d 87       	std	Y+13, r19	; 0x0d
    1ba0:	2c 87       	std	Y+12, r18	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	22 0f       	add	r18, r18
    1ba8:	33 1f       	adc	r19, r19
    1baa:	22 0f       	add	r18, r18
    1bac:	33 1f       	adc	r19, r19
    1bae:	22 0f       	add	r18, r18
    1bb0:	33 1f       	adc	r19, r19
    1bb2:	82 0f       	add	r24, r18
    1bb4:	93 1f       	adc	r25, r19
    1bb6:	88 55       	subi	r24, 0x58	; 88
    1bb8:	9c 4f       	sbci	r25, 0xFC	; 252
    1bba:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bbc:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bbe:	28 17       	cp	r18, r24
    1bc0:	39 07       	cpc	r19, r25
    1bc2:	f9 f4       	brne	.+62     	; 0x1c02 <vTaskPrioritySet+0xe8>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1bc4:	ee 24       	eor	r14, r14
    1bc6:	ff 24       	eor	r15, r15
    1bc8:	68 94       	set
    1bca:	e1 f8       	bld	r14, 1
    1bcc:	ec 0e       	add	r14, r28
    1bce:	fd 1e       	adc	r15, r29
    1bd0:	c7 01       	movw	r24, r14
    1bd2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    1bd6:	8e 89       	ldd	r24, Y+22	; 0x16
    1bd8:	90 91 9e 03 	lds	r25, 0x039E
    1bdc:	98 17       	cp	r25, r24
    1bde:	10 f4       	brcc	.+4      	; 0x1be4 <vTaskPrioritySet+0xca>
    1be0:	80 93 9e 03 	sts	0x039E, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 01       	movw	r18, r24
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	22 0f       	add	r18, r18
    1bee:	33 1f       	adc	r19, r19
    1bf0:	22 0f       	add	r18, r18
    1bf2:	33 1f       	adc	r19, r19
    1bf4:	82 0f       	add	r24, r18
    1bf6:	93 1f       	adc	r25, r19
    1bf8:	88 55       	subi	r24, 0x58	; 88
    1bfa:	9c 4f       	sbci	r25, 0xFC	; 252
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    1c02:	11 23       	and	r17, r17
    1c04:	11 f0       	breq	.+4      	; 0x1c0a <vTaskPrioritySet+0xf0>
				{
					taskYIELD_IF_USING_PREEMPTION();
    1c06:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
	}
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	08 95       	ret

00001c1a <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	ec 01       	movw	r28, r24
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	b9 f1       	breq	.+110    	; 0x1c96 <vTaskResume+0x7c>
    1c28:	80 91 95 03 	lds	r24, 0x0395
    1c2c:	90 91 96 03 	lds	r25, 0x0396
    1c30:	c8 17       	cp	r28, r24
    1c32:	d9 07       	cpc	r29, r25
    1c34:	81 f1       	breq	.+96     	; 0x1c96 <vTaskResume+0x7c>
		{
			taskENTER_CRITICAL();
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <prvTaskIsTaskSuspended>
    1c42:	88 23       	and	r24, r24
    1c44:	31 f1       	breq	.+76     	; 0x1c92 <vTaskResume+0x78>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    1c46:	8e 01       	movw	r16, r28
    1c48:	0e 5f       	subi	r16, 0xFE	; 254
    1c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1c52:	8e 89       	ldd	r24, Y+22	; 0x16
    1c54:	90 91 9e 03 	lds	r25, 0x039E
    1c58:	98 17       	cp	r25, r24
    1c5a:	10 f4       	brcc	.+4      	; 0x1c60 <vTaskResume+0x46>
    1c5c:	80 93 9e 03 	sts	0x039E, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9c 01       	movw	r18, r24
    1c64:	22 0f       	add	r18, r18
    1c66:	33 1f       	adc	r19, r19
    1c68:	22 0f       	add	r18, r18
    1c6a:	33 1f       	adc	r19, r19
    1c6c:	22 0f       	add	r18, r18
    1c6e:	33 1f       	adc	r19, r19
    1c70:	82 0f       	add	r24, r18
    1c72:	93 1f       	adc	r25, r19
    1c74:	88 55       	subi	r24, 0x58	; 88
    1c76:	9c 4f       	sbci	r25, 0xFC	; 252
    1c78:	b8 01       	movw	r22, r16
    1c7a:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1c7e:	e0 91 95 03 	lds	r30, 0x0395
    1c82:	f0 91 96 03 	lds	r31, 0x0396
    1c86:	9e 89       	ldd	r25, Y+22	; 0x16
    1c88:	86 89       	ldd	r24, Z+22	; 0x16
    1c8a:	98 17       	cp	r25, r24
    1c8c:	10 f0       	brcs	.+4      	; 0x1c92 <vTaskResume+0x78>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    1c8e:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1c92:	0f 90       	pop	r0
    1c94:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	08 95       	ret

00001ca0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	ec 01       	movw	r28, r24
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    1cac:	0e 94 65 0b 	call	0x16ca	; 0x16ca <prvTaskIsTaskSuspended>
    1cb0:	88 23       	and	r24, r24
    1cb2:	b9 f1       	breq	.+110    	; 0x1d22 <xTaskResumeFromISR+0x82>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1cb4:	80 91 97 03 	lds	r24, 0x0397
    1cb8:	88 23       	and	r24, r24
    1cba:	51 f5       	brne	.+84     	; 0x1d10 <xTaskResumeFromISR+0x70>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1cbc:	e0 91 95 03 	lds	r30, 0x0395
    1cc0:	f0 91 96 03 	lds	r31, 0x0396

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    1cc4:	11 e0       	ldi	r17, 0x01	; 1
    1cc6:	9e 89       	ldd	r25, Y+22	; 0x16
    1cc8:	86 89       	ldd	r24, Z+22	; 0x16
    1cca:	98 17       	cp	r25, r24
    1ccc:	08 f4       	brcc	.+2      	; 0x1cd0 <xTaskResumeFromISR+0x30>
    1cce:	10 e0       	ldi	r17, 0x00	; 0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1cd0:	ee 24       	eor	r14, r14
    1cd2:	ff 24       	eor	r15, r15
    1cd4:	68 94       	set
    1cd6:	e1 f8       	bld	r14, 1
    1cd8:	ec 0e       	add	r14, r28
    1cda:	fd 1e       	adc	r15, r29
    1cdc:	c7 01       	movw	r24, r14
    1cde:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1ce2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ce4:	90 91 9e 03 	lds	r25, 0x039E
    1ce8:	98 17       	cp	r25, r24
    1cea:	10 f4       	brcc	.+4      	; 0x1cf0 <xTaskResumeFromISR+0x50>
    1cec:	80 93 9e 03 	sts	0x039E, r24
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9c 01       	movw	r18, r24
    1cf4:	22 0f       	add	r18, r18
    1cf6:	33 1f       	adc	r19, r19
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	82 0f       	add	r24, r18
    1d02:	93 1f       	adc	r25, r19
    1d04:	88 55       	subi	r24, 0x58	; 88
    1d06:	9c 4f       	sbci	r25, 0xFC	; 252
    1d08:	b7 01       	movw	r22, r14
    1d0a:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1d0e:	0a c0       	rjmp	.+20     	; 0x1d24 <xTaskResumeFromISR+0x84>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1d10:	be 01       	movw	r22, r28
    1d12:	64 5f       	subi	r22, 0xF4	; 244
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	87 ee       	ldi	r24, 0xE7	; 231
    1d18:	93 e0       	ldi	r25, 0x03	; 3
    1d1a:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    1d1e:	10 e0       	ldi	r17, 0x00	; 0
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <xTaskResumeFromISR+0x84>
    1d22:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
	}
    1d24:	81 2f       	mov	r24, r17
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	08 95       	ret

00001d32 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1d38:	8e e0       	ldi	r24, 0x0E	; 14
    1d3a:	90 e1       	ldi	r25, 0x10	; 16
    1d3c:	66 e6       	ldi	r22, 0x66	; 102
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	48 ec       	ldi	r20, 0xC8	; 200
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	00 e0       	ldi	r16, 0x00	; 0
    1d4a:	0f 2e       	mov	r0, r31
    1d4c:	f2 e0       	ldi	r31, 0x02	; 2
    1d4e:	ef 2e       	mov	r14, r31
    1d50:	f4 e0       	ldi	r31, 0x04	; 4
    1d52:	ff 2e       	mov	r15, r31
    1d54:	f0 2d       	mov	r31, r0
    1d56:	0e 94 00 0c 	call	0x1800	; 0x1800 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	81 f4       	brne	.+32     	; 0x1d7e <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1d5e:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1d60:	8f ef       	ldi	r24, 0xFF	; 255
    1d62:	9f ef       	ldi	r25, 0xFF	; 255
    1d64:	90 93 99 03 	sts	0x0399, r25
    1d68:	80 93 98 03 	sts	0x0398, r24
		xSchedulerRunning = pdTRUE;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	80 93 9d 03 	sts	0x039D, r24
		xTickCount = ( TickType_t ) 0U;
    1d72:	10 92 a0 03 	sts	0x03A0, r1
    1d76:	10 92 9f 03 	sts	0x039F, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1d7a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	08 95       	ret

00001d86 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1d86:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1d88:	10 92 9d 03 	sts	0x039D, r1
	vPortEndScheduler();
    1d8c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <vPortEndScheduler>
}
    1d90:	08 95       	ret

00001d92 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1d92:	80 91 97 03 	lds	r24, 0x0397
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	80 93 97 03 	sts	0x0397, r24
}
    1d9c:	08 95       	ret

00001d9e <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1da4:	80 91 9f 03 	lds	r24, 0x039F
    1da8:	90 91 a0 03 	lds	r25, 0x03A0
	}
	portTICK_TYPE_EXIT_CRITICAL();
    1dac:	0f 90       	pop	r0
    1dae:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    1db0:	08 95       	ret

00001db2 <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
    1db2:	80 91 9f 03 	lds	r24, 0x039F
    1db6:	90 91 a0 03 	lds	r25, 0x03A0
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1dba:	08 95       	ret

00001dbc <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    1dbc:	80 91 a1 03 	lds	r24, 0x03A1
}
    1dc0:	08 95       	ret

00001dc2 <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	21 f4       	brne	.+8      	; 0x1dce <pcTaskGetName+0xc>
    1dc6:	80 91 95 03 	lds	r24, 0x0395
    1dca:	90 91 96 03 	lds	r25, 0x0396
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    1dce:	49 96       	adiw	r24, 0x19	; 25
}
    1dd0:	08 95       	ret

00001dd2 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1de2:	80 91 97 03 	lds	r24, 0x0397
    1de6:	88 23       	and	r24, r24
    1de8:	09 f0       	breq	.+2      	; 0x1dec <xTaskIncrementTick+0x1a>
    1dea:	82 c0       	rjmp	.+260    	; 0x1ef0 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    1dec:	c0 90 9f 03 	lds	r12, 0x039F
    1df0:	d0 90 a0 03 	lds	r13, 0x03A0
    1df4:	08 94       	sec
    1df6:	c1 1c       	adc	r12, r1
    1df8:	d1 1c       	adc	r13, r1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    1dfa:	d0 92 a0 03 	sts	0x03A0, r13
    1dfe:	c0 92 9f 03 	sts	0x039F, r12

		if( xConstTickCount == ( TickType_t ) 0U )
    1e02:	c1 14       	cp	r12, r1
    1e04:	d1 04       	cpc	r13, r1
    1e06:	b9 f4       	brne	.+46     	; 0x1e36 <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
    1e08:	80 91 a5 03 	lds	r24, 0x03A5
    1e0c:	90 91 a6 03 	lds	r25, 0x03A6
    1e10:	20 91 a3 03 	lds	r18, 0x03A3
    1e14:	30 91 a4 03 	lds	r19, 0x03A4
    1e18:	30 93 a6 03 	sts	0x03A6, r19
    1e1c:	20 93 a5 03 	sts	0x03A5, r18
    1e20:	90 93 a4 03 	sts	0x03A4, r25
    1e24:	80 93 a3 03 	sts	0x03A3, r24
    1e28:	80 91 9a 03 	lds	r24, 0x039A
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	80 93 9a 03 	sts	0x039A, r24
    1e32:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1e36:	80 91 98 03 	lds	r24, 0x0398
    1e3a:	90 91 99 03 	lds	r25, 0x0399
    1e3e:	c8 16       	cp	r12, r24
    1e40:	d9 06       	cpc	r13, r25
    1e42:	20 f4       	brcc	.+8      	; 0x1e4c <xTaskIncrementTick+0x7a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1e44:	ff 24       	eor	r15, r15
    1e46:	5a c0       	rjmp	.+180    	; 0x1efc <xTaskIncrementTick+0x12a>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1e48:	fe 2c       	mov	r15, r14
    1e4a:	03 c0       	rjmp	.+6      	; 0x1e52 <xTaskIncrementTick+0x80>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1e4c:	ff 24       	eor	r15, r15
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1e4e:	ee 24       	eor	r14, r14
    1e50:	e3 94       	inc	r14
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1e52:	e0 91 a5 03 	lds	r30, 0x03A5
    1e56:	f0 91 a6 03 	lds	r31, 0x03A6
    1e5a:	80 81       	ld	r24, Z
    1e5c:	88 23       	and	r24, r24
    1e5e:	39 f4       	brne	.+14     	; 0x1e6e <xTaskIncrementTick+0x9c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e60:	8f ef       	ldi	r24, 0xFF	; 255
    1e62:	9f ef       	ldi	r25, 0xFF	; 255
    1e64:	90 93 99 03 	sts	0x0399, r25
    1e68:	80 93 98 03 	sts	0x0398, r24
					break;
    1e6c:	47 c0       	rjmp	.+142    	; 0x1efc <xTaskIncrementTick+0x12a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1e6e:	e0 91 a5 03 	lds	r30, 0x03A5
    1e72:	f0 91 a6 03 	lds	r31, 0x03A6
    1e76:	05 80       	ldd	r0, Z+5	; 0x05
    1e78:	f6 81       	ldd	r31, Z+6	; 0x06
    1e7a:	e0 2d       	mov	r30, r0
    1e7c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e7e:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
    1e84:	c8 16       	cp	r12, r24
    1e86:	d9 06       	cpc	r13, r25
    1e88:	28 f4       	brcc	.+10     	; 0x1e94 <xTaskIncrementTick+0xc2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1e8a:	90 93 99 03 	sts	0x0399, r25
    1e8e:	80 93 98 03 	sts	0x0398, r24
						break;
    1e92:	34 c0       	rjmp	.+104    	; 0x1efc <xTaskIncrementTick+0x12a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1e94:	8e 01       	movw	r16, r28
    1e96:	0e 5f       	subi	r16, 0xFE	; 254
    1e98:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1ea0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ea2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	21 f0       	breq	.+8      	; 0x1eb0 <xTaskIncrementTick+0xde>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	0c 96       	adiw	r24, 0x0c	; 12
    1eac:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1eb0:	8e 89       	ldd	r24, Y+22	; 0x16
    1eb2:	90 91 9e 03 	lds	r25, 0x039E
    1eb6:	98 17       	cp	r25, r24
    1eb8:	10 f4       	brcc	.+4      	; 0x1ebe <xTaskIncrementTick+0xec>
    1eba:	80 93 9e 03 	sts	0x039E, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	22 0f       	add	r18, r18
    1ec4:	33 1f       	adc	r19, r19
    1ec6:	22 0f       	add	r18, r18
    1ec8:	33 1f       	adc	r19, r19
    1eca:	22 0f       	add	r18, r18
    1ecc:	33 1f       	adc	r19, r19
    1ece:	82 0f       	add	r24, r18
    1ed0:	93 1f       	adc	r25, r19
    1ed2:	88 55       	subi	r24, 0x58	; 88
    1ed4:	9c 4f       	sbci	r25, 0xFC	; 252
    1ed6:	b8 01       	movw	r22, r16
    1ed8:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1edc:	e0 91 95 03 	lds	r30, 0x0395
    1ee0:	f0 91 96 03 	lds	r31, 0x0396
    1ee4:	9e 89       	ldd	r25, Y+22	; 0x16
    1ee6:	86 89       	ldd	r24, Z+22	; 0x16
    1ee8:	98 17       	cp	r25, r24
    1eea:	08 f0       	brcs	.+2      	; 0x1eee <xTaskIncrementTick+0x11c>
    1eec:	ad cf       	rjmp	.-166    	; 0x1e48 <xTaskIncrementTick+0x76>
    1eee:	b1 cf       	rjmp	.-158    	; 0x1e52 <xTaskIncrementTick+0x80>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1ef0:	80 91 9c 03 	lds	r24, 0x039C
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	80 93 9c 03 	sts	0x039C, r24

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1efa:	ff 24       	eor	r15, r15
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1efc:	80 91 9b 03 	lds	r24, 0x039B
    1f00:	88 23       	and	r24, r24
    1f02:	11 f0       	breq	.+4      	; 0x1f08 <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
    1f04:	ff 24       	eor	r15, r15
    1f06:	f3 94       	inc	r15
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1f08:	8f 2d       	mov	r24, r15
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	ff 90       	pop	r15
    1f14:	ef 90       	pop	r14
    1f16:	df 90       	pop	r13
    1f18:	cf 90       	pop	r12
    1f1a:	08 95       	ret

00001f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1f30:	80 91 97 03 	lds	r24, 0x0397
    1f34:	81 50       	subi	r24, 0x01	; 1
    1f36:	80 93 97 03 	sts	0x0397, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1f3a:	80 91 97 03 	lds	r24, 0x0397
    1f3e:	88 23       	and	r24, r24
    1f40:	09 f0       	breq	.+2      	; 0x1f44 <xTaskResumeAll+0x28>
    1f42:	5f c0       	rjmp	.+190    	; 0x2002 <xTaskResumeAll+0xe6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1f44:	80 91 a1 03 	lds	r24, 0x03A1
    1f48:	88 23       	and	r24, r24
    1f4a:	91 f5       	brne	.+100    	; 0x1fb0 <xTaskResumeAll+0x94>
    1f4c:	5d c0       	rjmp	.+186    	; 0x2008 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1f4e:	e0 91 ec 03 	lds	r30, 0x03EC
    1f52:	f0 91 ed 03 	lds	r31, 0x03ED
    1f56:	c6 81       	ldd	r28, Z+6	; 0x06
    1f58:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	0c 96       	adiw	r24, 0x0c	; 12
    1f5e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1f62:	8e 01       	movw	r16, r28
    1f64:	0e 5f       	subi	r16, 0xFE	; 254
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	c8 01       	movw	r24, r16
    1f6a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1f6e:	8e 89       	ldd	r24, Y+22	; 0x16
    1f70:	90 91 9e 03 	lds	r25, 0x039E
    1f74:	98 17       	cp	r25, r24
    1f76:	10 f4       	brcc	.+4      	; 0x1f7c <xTaskResumeAll+0x60>
    1f78:	80 93 9e 03 	sts	0x039E, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9c 01       	movw	r18, r24
    1f80:	22 0f       	add	r18, r18
    1f82:	33 1f       	adc	r19, r19
    1f84:	22 0f       	add	r18, r18
    1f86:	33 1f       	adc	r19, r19
    1f88:	22 0f       	add	r18, r18
    1f8a:	33 1f       	adc	r19, r19
    1f8c:	82 0f       	add	r24, r18
    1f8e:	93 1f       	adc	r25, r19
    1f90:	88 55       	subi	r24, 0x58	; 88
    1f92:	9c 4f       	sbci	r25, 0xFC	; 252
    1f94:	b8 01       	movw	r22, r16
    1f96:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1f9a:	e0 91 95 03 	lds	r30, 0x0395
    1f9e:	f0 91 96 03 	lds	r31, 0x0396
    1fa2:	9e 89       	ldd	r25, Y+22	; 0x16
    1fa4:	86 89       	ldd	r24, Z+22	; 0x16
    1fa6:	98 17       	cp	r25, r24
    1fa8:	68 f0       	brcs	.+26     	; 0x1fc4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
    1faa:	d0 92 9b 03 	sts	0x039B, r13
    1fae:	0a c0       	rjmp	.+20     	; 0x1fc4 <xTaskResumeAll+0xa8>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1fb0:	c0 e0       	ldi	r28, 0x00	; 0
    1fb2:	d0 e0       	ldi	r29, 0x00	; 0
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1fb4:	0f 2e       	mov	r0, r31
    1fb6:	f7 ee       	ldi	r31, 0xE7	; 231
    1fb8:	ef 2e       	mov	r14, r31
    1fba:	f3 e0       	ldi	r31, 0x03	; 3
    1fbc:	ff 2e       	mov	r15, r31
    1fbe:	f0 2d       	mov	r31, r0

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
    1fc0:	dd 24       	eor	r13, r13
    1fc2:	d3 94       	inc	r13
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1fc4:	f7 01       	movw	r30, r14
    1fc6:	80 81       	ld	r24, Z
    1fc8:	88 23       	and	r24, r24
    1fca:	09 f6       	brne	.-126    	; 0x1f4e <xTaskResumeAll+0x32>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    1fcc:	20 97       	sbiw	r28, 0x00	; 0
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <xTaskResumeAll+0xb8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    1fd0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1fd4:	c0 91 9c 03 	lds	r28, 0x039C

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1fd8:	cc 23       	and	r28, r28
    1fda:	59 f0       	breq	.+22     	; 0x1ff2 <xTaskResumeAll+0xd6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
    1fdc:	01 e0       	ldi	r16, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    1fde:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <xTaskIncrementTick>
    1fe2:	88 23       	and	r24, r24
    1fe4:	11 f0       	breq	.+4      	; 0x1fea <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
    1fe6:	00 93 9b 03 	sts	0x039B, r16
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    1fea:	c1 50       	subi	r28, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1fec:	c1 f7       	brne	.-16     	; 0x1fde <xTaskResumeAll+0xc2>

						uxPendedTicks = 0;
    1fee:	10 92 9c 03 	sts	0x039C, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1ff2:	80 91 9b 03 	lds	r24, 0x039B
    1ff6:	88 23       	and	r24, r24
    1ff8:	31 f0       	breq	.+12     	; 0x2006 <xTaskResumeAll+0xea>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1ffa:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	03 c0       	rjmp	.+6      	; 0x2008 <xTaskResumeAll+0xec>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	01 c0       	rjmp	.+2      	; 0x2008 <xTaskResumeAll+0xec>
    2006:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2008:	0f 90       	pop	r0
    200a:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	df 90       	pop	r13
    201a:	08 95       	ret

0000201c <prvIdleTask>:
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    201c:	00 ef       	ldi	r16, 0xF0	; 240
    201e:	13 e0       	ldi	r17, 0x03	; 3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2020:	0f 2e       	mov	r0, r31
    2022:	f8 ea       	ldi	r31, 0xA8	; 168
    2024:	ef 2e       	mov	r14, r31
    2026:	f3 e0       	ldi	r31, 0x03	; 3
    2028:	ff 2e       	mov	r15, r31
    202a:	f0 2d       	mov	r31, r0
    202c:	24 c0       	rjmp	.+72     	; 0x2076 <prvIdleTask+0x5a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    202e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2032:	f8 01       	movw	r30, r16
    2034:	c0 81       	ld	r28, Z
			}
			( void ) xTaskResumeAll();
    2036:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    203a:	cc 23       	and	r28, r28
    203c:	e1 f0       	breq	.+56     	; 0x2076 <prvIdleTask+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2044:	e0 91 f5 03 	lds	r30, 0x03F5
    2048:	f0 91 f6 03 	lds	r31, 0x03F6
    204c:	c6 81       	ldd	r28, Z+6	; 0x06
    204e:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2050:	ce 01       	movw	r24, r28
    2052:	02 96       	adiw	r24, 0x02	; 2
    2054:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					--uxCurrentNumberOfTasks;
    2058:	80 91 a1 03 	lds	r24, 0x03A1
    205c:	81 50       	subi	r24, 0x01	; 1
    205e:	80 93 a1 03 	sts	0x03A1, r24
					--uxDeletedTasksWaitingCleanUp;
    2062:	80 91 a2 03 	lds	r24, 0x03A2
    2066:	81 50       	subi	r24, 0x01	; 1
    2068:	80 93 a2 03 	sts	0x03A2, r24
				}
				taskEXIT_CRITICAL();
    206c:	0f 90       	pop	r0
    206e:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    2070:	ce 01       	movw	r24, r28
    2072:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2076:	80 91 a2 03 	lds	r24, 0x03A2
    207a:	88 23       	and	r24, r24
    207c:	c1 f6       	brne	.-80     	; 0x202e <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    207e:	f7 01       	movw	r30, r14
    2080:	80 81       	ld	r24, Z
    2082:	82 30       	cpi	r24, 0x02	; 2
    2084:	c0 f3       	brcs	.-16     	; 0x2076 <prvIdleTask+0x5a>
			{
				taskYIELD();
    2086:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
    208a:	f5 cf       	rjmp	.-22     	; 0x2076 <prvIdleTask+0x5a>

0000208c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	51 f0       	breq	.+20     	; 0x20aa <vTaskDelay+0x1e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2096:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    209a:	ce 01       	movw	r24, r28
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    20a2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    20a6:	88 23       	and	r24, r24
    20a8:	11 f4       	brne	.+4      	; 0x20ae <vTaskDelay+0x22>
		{
			portYIELD_WITHIN_API();
    20aa:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret

000020b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	8c 01       	movw	r16, r24
    20be:	eb 01       	movw	r28, r22

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    20c0:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    20c4:	80 91 9f 03 	lds	r24, 0x039F
    20c8:	90 91 a0 03 	lds	r25, 0x03A0

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    20cc:	f8 01       	movw	r30, r16
    20ce:	20 81       	ld	r18, Z
    20d0:	31 81       	ldd	r19, Z+1	; 0x01
    20d2:	c2 0f       	add	r28, r18
    20d4:	d3 1f       	adc	r29, r19

			if( xConstTickCount < *pxPreviousWakeTime )
    20d6:	82 17       	cp	r24, r18
    20d8:	93 07       	cpc	r25, r19
    20da:	48 f4       	brcc	.+18     	; 0x20ee <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    20dc:	c2 17       	cp	r28, r18
    20de:	d3 07       	cpc	r29, r19
    20e0:	f8 f4       	brcc	.+62     	; 0x2120 <vTaskDelayUntil+0x6c>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    20e2:	d1 83       	std	Z+1, r29	; 0x01
    20e4:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    20e6:	8c 17       	cp	r24, r28
    20e8:	9d 07       	cpc	r25, r29
    20ea:	78 f4       	brcc	.+30     	; 0x210a <vTaskDelayUntil+0x56>
    20ec:	07 c0       	rjmp	.+14     	; 0x20fc <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    20ee:	c2 17       	cp	r28, r18
    20f0:	d3 07       	cpc	r29, r19
    20f2:	90 f0       	brcs	.+36     	; 0x2118 <vTaskDelayUntil+0x64>
    20f4:	8c 17       	cp	r24, r28
    20f6:	9d 07       	cpc	r25, r29
    20f8:	78 f0       	brcs	.+30     	; 0x2118 <vTaskDelayUntil+0x64>
    20fa:	12 c0       	rjmp	.+36     	; 0x2120 <vTaskDelayUntil+0x6c>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    20fc:	9e 01       	movw	r18, r28
    20fe:	28 1b       	sub	r18, r24
    2100:	39 0b       	sbc	r19, r25
    2102:	c9 01       	movw	r24, r18
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	0e 94 9b 0b 	call	0x1736	; 0x1736 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    210a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    210e:	88 23       	and	r24, r24
    2110:	59 f4       	brne	.+22     	; 0x2128 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
    2112:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
    2116:	08 c0       	rjmp	.+16     	; 0x2128 <vTaskDelayUntil+0x74>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2118:	f8 01       	movw	r30, r16
    211a:	d1 83       	std	Z+1, r29	; 0x01
    211c:	c0 83       	st	Z, r28
    211e:	ee cf       	rjmp	.-36     	; 0x20fc <vTaskDelayUntil+0x48>
    2120:	f8 01       	movw	r30, r16
    2122:	d1 83       	std	Z+1, r29	; 0x01
    2124:	c0 83       	st	Z, r28
    2126:	f1 cf       	rjmp	.-30     	; 0x210a <vTaskDelayUntil+0x56>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	08 95       	ret

00002132 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2132:	80 91 97 03 	lds	r24, 0x0397
    2136:	88 23       	and	r24, r24
    2138:	21 f0       	breq	.+8      	; 0x2142 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	80 93 9b 03 	sts	0x039B, r24
    2140:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    2142:	10 92 9b 03 	sts	0x039B, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2146:	20 91 9e 03 	lds	r18, 0x039E
    214a:	82 2f       	mov	r24, r18
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	fc 01       	movw	r30, r24
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	ee 0f       	add	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	ee 0f       	add	r30, r30
    215a:	ff 1f       	adc	r31, r31
    215c:	e8 0f       	add	r30, r24
    215e:	f9 1f       	adc	r31, r25
    2160:	e8 55       	subi	r30, 0x58	; 88
    2162:	fc 4f       	sbci	r31, 0xFC	; 252
    2164:	30 81       	ld	r19, Z
    2166:	33 23       	and	r19, r19
    2168:	89 f4       	brne	.+34     	; 0x218c <vTaskSwitchContext+0x5a>
    216a:	21 50       	subi	r18, 0x01	; 1
    216c:	82 2f       	mov	r24, r18
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	fc 01       	movw	r30, r24
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	e8 0f       	add	r30, r24
    2180:	f9 1f       	adc	r31, r25
    2182:	e8 55       	subi	r30, 0x58	; 88
    2184:	fc 4f       	sbci	r31, 0xFC	; 252
    2186:	30 81       	ld	r19, Z
    2188:	33 23       	and	r19, r19
    218a:	79 f3       	breq	.-34     	; 0x216a <vTaskSwitchContext+0x38>
    218c:	dc 01       	movw	r26, r24
    218e:	aa 0f       	add	r26, r26
    2190:	bb 1f       	adc	r27, r27
    2192:	aa 0f       	add	r26, r26
    2194:	bb 1f       	adc	r27, r27
    2196:	aa 0f       	add	r26, r26
    2198:	bb 1f       	adc	r27, r27
    219a:	8a 0f       	add	r24, r26
    219c:	9b 1f       	adc	r25, r27
    219e:	dc 01       	movw	r26, r24
    21a0:	a8 55       	subi	r26, 0x58	; 88
    21a2:	bc 4f       	sbci	r27, 0xFC	; 252
    21a4:	11 96       	adiw	r26, 0x01	; 1
    21a6:	ed 91       	ld	r30, X+
    21a8:	fc 91       	ld	r31, X
    21aa:	12 97       	sbiw	r26, 0x02	; 2
    21ac:	02 80       	ldd	r0, Z+2	; 0x02
    21ae:	f3 81       	ldd	r31, Z+3	; 0x03
    21b0:	e0 2d       	mov	r30, r0
    21b2:	12 96       	adiw	r26, 0x02	; 2
    21b4:	fc 93       	st	X, r31
    21b6:	ee 93       	st	-X, r30
    21b8:	11 97       	sbiw	r26, 0x01	; 1
    21ba:	cd 01       	movw	r24, r26
    21bc:	03 96       	adiw	r24, 0x03	; 3
    21be:	e8 17       	cp	r30, r24
    21c0:	f9 07       	cpc	r31, r25
    21c2:	31 f4       	brne	.+12     	; 0x21d0 <vTaskSwitchContext+0x9e>
    21c4:	82 81       	ldd	r24, Z+2	; 0x02
    21c6:	93 81       	ldd	r25, Z+3	; 0x03
    21c8:	12 96       	adiw	r26, 0x02	; 2
    21ca:	9c 93       	st	X, r25
    21cc:	8e 93       	st	-X, r24
    21ce:	11 97       	sbiw	r26, 0x01	; 1
    21d0:	11 96       	adiw	r26, 0x01	; 1
    21d2:	ed 91       	ld	r30, X+
    21d4:	fc 91       	ld	r31, X
    21d6:	12 97       	sbiw	r26, 0x02	; 2
    21d8:	86 81       	ldd	r24, Z+6	; 0x06
    21da:	97 81       	ldd	r25, Z+7	; 0x07
    21dc:	90 93 96 03 	sts	0x0396, r25
    21e0:	80 93 95 03 	sts	0x0395, r24
    21e4:	20 93 9e 03 	sts	0x039E, r18
    21e8:	08 95       	ret

000021ea <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	29 f4       	brne	.+10     	; 0x2206 <vTaskSuspend+0x1c>
    21fc:	00 91 95 03 	lds	r16, 0x0395
    2200:	10 91 96 03 	lds	r17, 0x0396
    2204:	01 c0       	rjmp	.+2      	; 0x2208 <vTaskSuspend+0x1e>
    2206:	8c 01       	movw	r16, r24

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2208:	e8 01       	movw	r28, r16
    220a:	22 96       	adiw	r28, 0x02	; 2
    220c:	ce 01       	movw	r24, r28
    220e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2212:	f8 01       	movw	r30, r16
    2214:	84 89       	ldd	r24, Z+20	; 0x14
    2216:	95 89       	ldd	r25, Z+21	; 0x15
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	21 f0       	breq	.+8      	; 0x2224 <vTaskSuspend+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    221c:	c8 01       	movw	r24, r16
    221e:	0c 96       	adiw	r24, 0x0c	; 12
    2220:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    2224:	89 ef       	ldi	r24, 0xF9	; 249
    2226:	93 e0       	ldi	r25, 0x03	; 3
    2228:	be 01       	movw	r22, r28
    222a:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    222e:	0f 90       	pop	r0
    2230:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    2232:	80 91 9d 03 	lds	r24, 0x039D
    2236:	88 23       	and	r24, r24
    2238:	39 f0       	breq	.+14     	; 0x2248 <vTaskSuspend+0x5e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    2240:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    2244:	0f 90       	pop	r0
    2246:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    2248:	80 91 95 03 	lds	r24, 0x0395
    224c:	90 91 96 03 	lds	r25, 0x0396
    2250:	08 17       	cp	r16, r24
    2252:	19 07       	cpc	r17, r25
    2254:	a1 f4       	brne	.+40     	; 0x227e <vTaskSuspend+0x94>
		{
			if( xSchedulerRunning != pdFALSE )
    2256:	80 91 9d 03 	lds	r24, 0x039D
    225a:	88 23       	and	r24, r24
    225c:	19 f0       	breq	.+6      	; 0x2264 <vTaskSuspend+0x7a>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    225e:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
    2262:	0d c0       	rjmp	.+26     	; 0x227e <vTaskSuspend+0x94>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    2264:	80 91 a1 03 	lds	r24, 0x03A1
    2268:	90 91 f9 03 	lds	r25, 0x03F9
    226c:	98 17       	cp	r25, r24
    226e:	29 f4       	brne	.+10     	; 0x227a <vTaskSuspend+0x90>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    2270:	10 92 96 03 	sts	0x0396, r1
    2274:	10 92 95 03 	sts	0x0395, r1
    2278:	02 c0       	rjmp	.+4      	; 0x227e <vTaskSuspend+0x94>
				}
				else
				{
					vTaskSwitchContext();
    227a:	0e 94 99 10 	call	0x2132	; 0x2132 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	1f 91       	pop	r17
    2284:	0f 91       	pop	r16
    2286:	08 95       	ret

00002288 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	eb 01       	movw	r28, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    228e:	60 91 95 03 	lds	r22, 0x0395
    2292:	70 91 96 03 	lds	r23, 0x0396
    2296:	64 5f       	subi	r22, 0xF4	; 244
    2298:	7f 4f       	sbci	r23, 0xFF	; 255
    229a:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    229e:	ce 01       	movw	r24, r28
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <prvAddCurrentTaskToDelayedList>
}
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	ea 01       	movw	r28, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    22b2:	e0 91 95 03 	lds	r30, 0x0395
    22b6:	f0 91 96 03 	lds	r31, 0x0396
    22ba:	70 68       	ori	r23, 0x80	; 128
    22bc:	75 87       	std	Z+13, r23	; 0x0d
    22be:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    22c0:	60 91 95 03 	lds	r22, 0x0395
    22c4:	70 91 96 03 	lds	r23, 0x0396
    22c8:	64 5f       	subi	r22, 0xF4	; 244
    22ca:	7f 4f       	sbci	r23, 0xFF	; 255
    22cc:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    22d0:	ce 01       	movw	r24, r28
    22d2:	61 e0       	ldi	r22, 0x01	; 1
    22d4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <prvAddCurrentTaskToDelayedList>
}
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    22e6:	dc 01       	movw	r26, r24
    22e8:	15 96       	adiw	r26, 0x05	; 5
    22ea:	ed 91       	ld	r30, X+
    22ec:	fc 91       	ld	r31, X
    22ee:	16 97       	sbiw	r26, 0x06	; 6
    22f0:	06 81       	ldd	r16, Z+6	; 0x06
    22f2:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    22f4:	e8 01       	movw	r28, r16
    22f6:	2c 96       	adiw	r28, 0x0c	; 12
    22f8:	ce 01       	movw	r24, r28
    22fa:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    22fe:	80 91 97 03 	lds	r24, 0x0397
    2302:	88 23       	and	r24, r24
    2304:	e9 f4       	brne	.+58     	; 0x2340 <xTaskRemoveFromEventList+0x62>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    2306:	e8 01       	movw	r28, r16
    2308:	22 96       	adiw	r28, 0x02	; 2
    230a:	ce 01       	movw	r24, r28
    230c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    2310:	f8 01       	movw	r30, r16
    2312:	86 89       	ldd	r24, Z+22	; 0x16
    2314:	90 91 9e 03 	lds	r25, 0x039E
    2318:	98 17       	cp	r25, r24
    231a:	10 f4       	brcc	.+4      	; 0x2320 <xTaskRemoveFromEventList+0x42>
    231c:	80 93 9e 03 	sts	0x039E, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9c 01       	movw	r18, r24
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	22 0f       	add	r18, r18
    232e:	33 1f       	adc	r19, r19
    2330:	82 0f       	add	r24, r18
    2332:	93 1f       	adc	r25, r19
    2334:	88 55       	subi	r24, 0x58	; 88
    2336:	9c 4f       	sbci	r25, 0xFC	; 252
    2338:	be 01       	movw	r22, r28
    233a:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    233e:	05 c0       	rjmp	.+10     	; 0x234a <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2340:	87 ee       	ldi	r24, 0xE7	; 231
    2342:	93 e0       	ldi	r25, 0x03	; 3
    2344:	be 01       	movw	r22, r28
    2346:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    234a:	e0 91 95 03 	lds	r30, 0x0395
    234e:	f0 91 96 03 	lds	r31, 0x0396
    2352:	d8 01       	movw	r26, r16
    2354:	56 96       	adiw	r26, 0x16	; 22
    2356:	9c 91       	ld	r25, X
    2358:	56 97       	sbiw	r26, 0x16	; 22
    235a:	86 89       	ldd	r24, Z+22	; 0x16
    235c:	89 17       	cp	r24, r25
    235e:	20 f4       	brcc	.+8      	; 0x2368 <xTaskRemoveFromEventList+0x8a>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	80 93 9b 03 	sts	0x039B, r24
    2366:	01 c0       	rjmp	.+2      	; 0x236a <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		xReturn = pdFALSE;
    2368:	80 e0       	ldi	r24, 0x00	; 0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
    2372:	08 95       	ret

00002374 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    237c:	70 68       	ori	r23, 0x80	; 128
    237e:	fc 01       	movw	r30, r24
    2380:	71 83       	std	Z+1, r23	; 0x01
    2382:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    2384:	c6 81       	ldd	r28, Z+6	; 0x06
    2386:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    2388:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    238c:	8e 01       	movw	r16, r28
    238e:	0e 5f       	subi	r16, 0xFE	; 254
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	c8 01       	movw	r24, r16
    2394:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    2398:	8e 89       	ldd	r24, Y+22	; 0x16
    239a:	90 91 9e 03 	lds	r25, 0x039E
    239e:	98 17       	cp	r25, r24
    23a0:	10 f4       	brcc	.+4      	; 0x23a6 <xTaskRemoveFromUnorderedEventList+0x32>
    23a2:	80 93 9e 03 	sts	0x039E, r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9c 01       	movw	r18, r24
    23aa:	22 0f       	add	r18, r18
    23ac:	33 1f       	adc	r19, r19
    23ae:	22 0f       	add	r18, r18
    23b0:	33 1f       	adc	r19, r19
    23b2:	22 0f       	add	r18, r18
    23b4:	33 1f       	adc	r19, r19
    23b6:	82 0f       	add	r24, r18
    23b8:	93 1f       	adc	r25, r19
    23ba:	88 55       	subi	r24, 0x58	; 88
    23bc:	9c 4f       	sbci	r25, 0xFC	; 252
    23be:	b8 01       	movw	r22, r16
    23c0:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    23c4:	e0 91 95 03 	lds	r30, 0x0395
    23c8:	f0 91 96 03 	lds	r31, 0x0396
    23cc:	9e 89       	ldd	r25, Y+22	; 0x16
    23ce:	86 89       	ldd	r24, Z+22	; 0x16
    23d0:	89 17       	cp	r24, r25
    23d2:	20 f4       	brcc	.+8      	; 0x23dc <xTaskRemoveFromUnorderedEventList+0x68>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	80 93 9b 03 	sts	0x039B, r24
    23da:	01 c0       	rjmp	.+2      	; 0x23de <xTaskRemoveFromUnorderedEventList+0x6a>
	}
	else
	{
		xReturn = pdFALSE;
    23dc:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
}
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	08 95       	ret

000023e8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    23e8:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    23ea:	80 91 9a 03 	lds	r24, 0x039A
    23ee:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    23f0:	80 91 9f 03 	lds	r24, 0x039F
    23f4:	90 91 a0 03 	lds	r25, 0x03A0
    23f8:	92 83       	std	Z+2, r25	; 0x02
    23fa:	81 83       	std	Z+1, r24	; 0x01
}
    23fc:	08 95       	ret

000023fe <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    23fe:	fc 01       	movw	r30, r24
    2400:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2408:	60 91 9f 03 	lds	r22, 0x039F
    240c:	70 91 a0 03 	lds	r23, 0x03A0
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    2410:	4d 91       	ld	r20, X+
    2412:	5c 91       	ld	r21, X
    2414:	11 97       	sbiw	r26, 0x01	; 1
    2416:	8f ef       	ldi	r24, 0xFF	; 255
    2418:	4f 3f       	cpi	r20, 0xFF	; 255
    241a:	58 07       	cpc	r21, r24
    241c:	e9 f0       	breq	.+58     	; 0x2458 <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    241e:	80 91 9a 03 	lds	r24, 0x039A
    2422:	90 81       	ld	r25, Z
    2424:	98 17       	cp	r25, r24
    2426:	29 f0       	breq	.+10     	; 0x2432 <xTaskCheckForTimeOut+0x34>
    2428:	81 81       	ldd	r24, Z+1	; 0x01
    242a:	92 81       	ldd	r25, Z+2	; 0x02
    242c:	68 17       	cp	r22, r24
    242e:	79 07       	cpc	r23, r25
    2430:	a8 f4       	brcc	.+42     	; 0x245c <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2432:	81 81       	ldd	r24, Z+1	; 0x01
    2434:	92 81       	ldd	r25, Z+2	; 0x02
    2436:	9b 01       	movw	r18, r22
    2438:	28 1b       	sub	r18, r24
    243a:	39 0b       	sbc	r19, r25
    243c:	24 17       	cp	r18, r20
    243e:	35 07       	cpc	r19, r21
    2440:	78 f4       	brcc	.+30     	; 0x2460 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    2442:	86 1b       	sub	r24, r22
    2444:	97 0b       	sbc	r25, r23
    2446:	84 0f       	add	r24, r20
    2448:	95 1f       	adc	r25, r21
    244a:	8d 93       	st	X+, r24
    244c:	9c 93       	st	X, r25
			vTaskSetTimeOutState( pxTimeOut );
    244e:	cf 01       	movw	r24, r30
    2450:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <xTaskCheckForTimeOut+0x64>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <xTaskCheckForTimeOut+0x64>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2460:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    2462:	0f 90       	pop	r0
    2464:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    2466:	08 95       	ret

00002468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	80 93 9b 03 	sts	0x039B, r24
}
    246e:	08 95       	ret

00002470 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2470:	80 91 95 03 	lds	r24, 0x0395
    2474:	90 91 96 03 	lds	r25, 0x0396

		return xReturn;
	}
    2478:	08 95       	ret

0000247a <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	09 f4       	brne	.+2      	; 0x248a <vTaskPriorityInherit+0x10>
    2488:	51 c0       	rjmp	.+162    	; 0x252c <vTaskPriorityInherit+0xb2>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    248a:	8e 89       	ldd	r24, Y+22	; 0x16
    248c:	e0 91 95 03 	lds	r30, 0x0395
    2490:	f0 91 96 03 	lds	r31, 0x0396
    2494:	96 89       	ldd	r25, Z+22	; 0x16
    2496:	89 17       	cp	r24, r25
    2498:	08 f0       	brcs	.+2      	; 0x249c <vTaskPriorityInherit+0x22>
    249a:	48 c0       	rjmp	.+144    	; 0x252c <vTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    249c:	2c 85       	ldd	r18, Y+12	; 0x0c
    249e:	3d 85       	ldd	r19, Y+13	; 0x0d
    24a0:	33 23       	and	r19, r19
    24a2:	5c f0       	brlt	.+22     	; 0x24ba <vTaskPriorityInherit+0x40>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    24a4:	e0 91 95 03 	lds	r30, 0x0395
    24a8:	f0 91 96 03 	lds	r31, 0x0396
    24ac:	96 89       	ldd	r25, Z+22	; 0x16
    24ae:	25 e0       	ldi	r18, 0x05	; 5
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	29 1b       	sub	r18, r25
    24b4:	31 09       	sbc	r19, r1
    24b6:	3d 87       	std	Y+13, r19	; 0x0d
    24b8:	2c 87       	std	Y+12, r18	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9c 01       	movw	r18, r24
    24be:	22 0f       	add	r18, r18
    24c0:	33 1f       	adc	r19, r19
    24c2:	22 0f       	add	r18, r18
    24c4:	33 1f       	adc	r19, r19
    24c6:	22 0f       	add	r18, r18
    24c8:	33 1f       	adc	r19, r19
    24ca:	82 0f       	add	r24, r18
    24cc:	93 1f       	adc	r25, r19
    24ce:	88 55       	subi	r24, 0x58	; 88
    24d0:	9c 4f       	sbci	r25, 0xFC	; 252
    24d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    24d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    24d6:	28 17       	cp	r18, r24
    24d8:	39 07       	cpc	r19, r25
    24da:	11 f5       	brne	.+68     	; 0x2520 <vTaskPriorityInherit+0xa6>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    24dc:	8e 01       	movw	r16, r28
    24de:	0e 5f       	subi	r16, 0xFE	; 254
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	c8 01       	movw	r24, r16
    24e4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    24e8:	e0 91 95 03 	lds	r30, 0x0395
    24ec:	f0 91 96 03 	lds	r31, 0x0396
    24f0:	86 89       	ldd	r24, Z+22	; 0x16
    24f2:	8e 8b       	std	Y+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    24f4:	90 91 9e 03 	lds	r25, 0x039E
    24f8:	98 17       	cp	r25, r24
    24fa:	10 f4       	brcc	.+4      	; 0x2500 <vTaskPriorityInherit+0x86>
    24fc:	80 93 9e 03 	sts	0x039E, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	9c 01       	movw	r18, r24
    2504:	22 0f       	add	r18, r18
    2506:	33 1f       	adc	r19, r19
    2508:	22 0f       	add	r18, r18
    250a:	33 1f       	adc	r19, r19
    250c:	22 0f       	add	r18, r18
    250e:	33 1f       	adc	r19, r19
    2510:	82 0f       	add	r24, r18
    2512:	93 1f       	adc	r25, r19
    2514:	88 55       	subi	r24, 0x58	; 88
    2516:	9c 4f       	sbci	r25, 0xFC	; 252
    2518:	b8 01       	movw	r22, r16
    251a:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    251e:	06 c0       	rjmp	.+12     	; 0x252c <vTaskPriorityInherit+0xb2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2520:	e0 91 95 03 	lds	r30, 0x0395
    2524:	f0 91 96 03 	lds	r31, 0x0396
    2528:	86 89       	ldd	r24, Z+22	; 0x16
    252a:	8e 8b       	std	Y+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	08 95       	ret

00002536 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	81 f1       	breq	.+96     	; 0x25a4 <xTaskPriorityDisinherit+0x6e>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    2544:	8c a1       	lds	r24, 0x4c
    2546:	81 50       	subi	r24, 0x01	; 1
    2548:	8c a3       	lds	r24, 0x5c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    254a:	2e 89       	ldd	r18, Y+22	; 0x16
    254c:	9b a1       	lds	r25, 0x4b
    254e:	29 17       	cp	r18, r25
    2550:	59 f1       	breq	.+86     	; 0x25a8 <xTaskPriorityDisinherit+0x72>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2552:	88 23       	and	r24, r24
    2554:	59 f5       	brne	.+86     	; 0x25ac <xTaskPriorityDisinherit+0x76>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2556:	8e 01       	movw	r16, r28
    2558:	0e 5f       	subi	r16, 0xFE	; 254
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	c8 01       	movw	r24, r16
    255e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    2562:	4b a1       	lds	r20, 0x4b
    2564:	4e 8b       	std	Y+22, r20	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2566:	24 2f       	mov	r18, r20
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	85 e0       	ldi	r24, 0x05	; 5
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	82 1b       	sub	r24, r18
    2570:	93 0b       	sbc	r25, r19
    2572:	9d 87       	std	Y+13, r25	; 0x0d
    2574:	8c 87       	std	Y+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    2576:	80 91 9e 03 	lds	r24, 0x039E
    257a:	84 17       	cp	r24, r20
    257c:	10 f4       	brcc	.+4      	; 0x2582 <xTaskPriorityDisinherit+0x4c>
    257e:	40 93 9e 03 	sts	0x039E, r20
    2582:	c9 01       	movw	r24, r18
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	28 0f       	add	r18, r24
    2592:	39 1f       	adc	r19, r25
    2594:	c9 01       	movw	r24, r18
    2596:	88 55       	subi	r24, 0x58	; 88
    2598:	9c 4f       	sbci	r25, 0xFC	; 252
    259a:	b8 01       	movw	r22, r16
    259c:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	05 c0       	rjmp	.+10     	; 0x25ae <xTaskPriorityDisinherit+0x78>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	03 c0       	rjmp	.+6      	; 0x25ae <xTaskPriorityDisinherit+0x78>
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	01 c0       	rjmp	.+2      	; 0x25ae <xTaskPriorityDisinherit+0x78>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	1f 91       	pop	r17
    25b4:	0f 91       	pop	r16
    25b6:	08 95       	ret

000025b8 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    25b8:	e0 91 95 03 	lds	r30, 0x0395
    25bc:	f0 91 96 03 	lds	r31, 0x0396
    25c0:	84 85       	ldd	r24, Z+12	; 0x0c
    25c2:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25c4:	e0 91 95 03 	lds	r30, 0x0395
    25c8:	f0 91 96 03 	lds	r31, 0x0396
    25cc:	a0 91 95 03 	lds	r26, 0x0395
    25d0:	b0 91 96 03 	lds	r27, 0x0396
    25d4:	56 96       	adiw	r26, 0x16	; 22
    25d6:	4c 91       	ld	r20, X
    25d8:	56 97       	sbiw	r26, 0x16	; 22
    25da:	25 e0       	ldi	r18, 0x05	; 5
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	24 1b       	sub	r18, r20
    25e0:	31 09       	sbc	r19, r1
    25e2:	35 87       	std	Z+13, r19	; 0x0d
    25e4:	24 87       	std	Z+12, r18	; 0x0c

	return uxReturn;
}
    25e6:	08 95       	ret

000025e8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    25e8:	80 91 95 03 	lds	r24, 0x0395
    25ec:	90 91 96 03 	lds	r25, 0x0396
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	39 f0       	breq	.+14     	; 0x2602 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    25f4:	e0 91 95 03 	lds	r30, 0x0395
    25f8:	f0 91 96 03 	lds	r31, 0x0396
    25fc:	84 a1       	lds	r24, 0x44
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	84 a3       	lds	r24, 0x54
		}

		return pxCurrentTCB;
    2602:	80 91 95 03 	lds	r24, 0x0395
    2606:	90 91 96 03 	lds	r25, 0x0396
	}
    260a:	08 95       	ret

0000260c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	c8 2f       	mov	r28, r24
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    261a:	e0 91 95 03 	lds	r30, 0x0395
    261e:	f0 91 96 03 	lds	r31, 0x0396
    2622:	85 a1       	lds	r24, 0x45
    2624:	96 a1       	lds	r25, 0x46
    2626:	a7 a1       	lds	r26, 0x47
    2628:	b0 a5       	lds	r27, 0x60
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	a1 05       	cpc	r26, r1
    262e:	b1 05       	cpc	r27, r1
    2630:	79 f4       	brne	.+30     	; 0x2650 <ulTaskNotifyTake+0x44>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    2632:	e0 91 95 03 	lds	r30, 0x0395
    2636:	f0 91 96 03 	lds	r31, 0x0396
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    263e:	61 15       	cp	r22, r1
    2640:	71 05       	cpc	r23, r1
    2642:	31 f0       	breq	.+12     	; 0x2650 <ulTaskNotifyTake+0x44>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2644:	cb 01       	movw	r24, r22
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	0e 94 9b 0b 	call	0x1736	; 0x1736 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    264c:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2650:	0f 90       	pop	r0
    2652:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    265a:	e0 91 95 03 	lds	r30, 0x0395
    265e:	f0 91 96 03 	lds	r31, 0x0396
    2662:	05 a1       	lds	r16, 0x45
    2664:	16 a1       	lds	r17, 0x46
    2666:	27 a1       	lds	r18, 0x47
    2668:	30 a5       	lds	r19, 0x60

			if( ulReturn != 0UL )
    266a:	01 15       	cp	r16, r1
    266c:	11 05       	cpc	r17, r1
    266e:	21 05       	cpc	r18, r1
    2670:	31 05       	cpc	r19, r1
    2672:	c1 f0       	breq	.+48     	; 0x26a4 <ulTaskNotifyTake+0x98>
			{
				if( xClearCountOnExit != pdFALSE )
    2674:	cc 23       	and	r28, r28
    2676:	49 f0       	breq	.+18     	; 0x268a <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    2678:	e0 91 95 03 	lds	r30, 0x0395
    267c:	f0 91 96 03 	lds	r31, 0x0396
    2680:	15 a2       	lds	r17, 0x95
    2682:	16 a2       	lds	r17, 0x96
    2684:	17 a2       	lds	r17, 0x97
    2686:	10 a6       	lds	r17, 0xb0
    2688:	0d c0       	rjmp	.+26     	; 0x26a4 <ulTaskNotifyTake+0x98>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    268a:	e0 91 95 03 	lds	r30, 0x0395
    268e:	f0 91 96 03 	lds	r31, 0x0396
    2692:	d9 01       	movw	r26, r18
    2694:	c8 01       	movw	r24, r16
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	a1 09       	sbc	r26, r1
    269a:	b1 09       	sbc	r27, r1
    269c:	85 a3       	lds	r24, 0x55
    269e:	96 a3       	lds	r25, 0x56
    26a0:	a7 a3       	lds	r26, 0x57
    26a2:	b0 a7       	lds	r27, 0x70
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    26a4:	e0 91 95 03 	lds	r30, 0x0395
    26a8:	f0 91 96 03 	lds	r31, 0x0396
    26ac:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    26ae:	0f 90       	pop	r0
    26b0:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    26b2:	60 2f       	mov	r22, r16
    26b4:	71 2f       	mov	r23, r17
    26b6:	82 2f       	mov	r24, r18
    26b8:	93 2f       	mov	r25, r19
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	08 95       	ret

000026c2 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    26c2:	8f 92       	push	r8
    26c4:	9f 92       	push	r9
    26c6:	af 92       	push	r10
    26c8:	bf 92       	push	r11
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	49 01       	movw	r8, r18
    26d8:	5a 01       	movw	r10, r20
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    26e0:	e0 91 95 03 	lds	r30, 0x0395
    26e4:	f0 91 96 03 	lds	r31, 0x0396
    26e8:	21 a5       	lds	r18, 0x61
    26ea:	22 30       	cpi	r18, 0x02	; 2
    26ec:	19 f1       	breq	.+70     	; 0x2734 <xTaskNotifyWait+0x72>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    26ee:	e0 91 95 03 	lds	r30, 0x0395
    26f2:	f0 91 96 03 	lds	r31, 0x0396
    26f6:	45 a1       	lds	r20, 0x45
    26f8:	56 a1       	lds	r21, 0x46
    26fa:	67 a1       	lds	r22, 0x47
    26fc:	70 a5       	lds	r23, 0x60
    26fe:	80 95       	com	r24
    2700:	90 95       	com	r25
    2702:	a0 95       	com	r26
    2704:	b0 95       	com	r27
    2706:	84 23       	and	r24, r20
    2708:	95 23       	and	r25, r21
    270a:	a6 23       	and	r26, r22
    270c:	b7 23       	and	r27, r23
    270e:	85 a3       	lds	r24, 0x55
    2710:	96 a3       	lds	r25, 0x56
    2712:	a7 a3       	lds	r26, 0x57
    2714:	b0 a7       	lds	r27, 0x70

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    2716:	e0 91 95 03 	lds	r30, 0x0395
    271a:	f0 91 96 03 	lds	r31, 0x0396
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    2722:	e1 14       	cp	r14, r1
    2724:	f1 04       	cpc	r15, r1
    2726:	31 f0       	breq	.+12     	; 0x2734 <xTaskNotifyWait+0x72>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2728:	c7 01       	movw	r24, r14
    272a:	61 e0       	ldi	r22, 0x01	; 1
    272c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    2730:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2734:	0f 90       	pop	r0
    2736:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    273e:	01 15       	cp	r16, r1
    2740:	11 05       	cpc	r17, r1
    2742:	69 f0       	breq	.+26     	; 0x275e <xTaskNotifyWait+0x9c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    2744:	e0 91 95 03 	lds	r30, 0x0395
    2748:	f0 91 96 03 	lds	r31, 0x0396
    274c:	85 a1       	lds	r24, 0x45
    274e:	96 a1       	lds	r25, 0x46
    2750:	a7 a1       	lds	r26, 0x47
    2752:	b0 a5       	lds	r27, 0x60
    2754:	f8 01       	movw	r30, r16
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    275e:	e0 91 95 03 	lds	r30, 0x0395
    2762:	f0 91 96 03 	lds	r31, 0x0396
    2766:	81 a5       	lds	r24, 0x61
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	b1 f0       	breq	.+44     	; 0x2798 <xTaskNotifyWait+0xd6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    276c:	e0 91 95 03 	lds	r30, 0x0395
    2770:	f0 91 96 03 	lds	r31, 0x0396
    2774:	85 a1       	lds	r24, 0x45
    2776:	96 a1       	lds	r25, 0x46
    2778:	a7 a1       	lds	r26, 0x47
    277a:	b0 a5       	lds	r27, 0x60
    277c:	80 94       	com	r8
    277e:	90 94       	com	r9
    2780:	a0 94       	com	r10
    2782:	b0 94       	com	r11
    2784:	88 22       	and	r8, r24
    2786:	99 22       	and	r9, r25
    2788:	aa 22       	and	r10, r26
    278a:	bb 22       	and	r11, r27
    278c:	85 a2       	lds	r24, 0x95
    278e:	96 a2       	lds	r25, 0x96
    2790:	a7 a2       	lds	r26, 0x97
    2792:	b0 a6       	lds	r27, 0xb0
				xReturn = pdTRUE;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	01 c0       	rjmp	.+2      	; 0x279a <xTaskNotifyWait+0xd8>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    2798:	80 e0       	ldi	r24, 0x00	; 0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    279a:	e0 91 95 03 	lds	r30, 0x0395
    279e:	f0 91 96 03 	lds	r31, 0x0396
    27a2:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    27a4:	0f 90       	pop	r0
    27a6:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
    27b0:	bf 90       	pop	r11
    27b2:	af 90       	pop	r10
    27b4:	9f 90       	pop	r9
    27b6:	8f 90       	pop	r8
    27b8:	08 95       	ret

000027ba <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	ec 01       	movw	r28, r24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    27ca:	01 15       	cp	r16, r1
    27cc:	11 05       	cpc	r17, r1
    27ce:	49 f0       	breq	.+18     	; 0x27e2 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    27d0:	8d a1       	lds	r24, 0x4d
    27d2:	9e a1       	lds	r25, 0x4e
    27d4:	af a1       	lds	r26, 0x4f
    27d6:	b8 a5       	lds	r27, 0x68
    27d8:	f8 01       	movw	r30, r16
    27da:	80 83       	st	Z, r24
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	a2 83       	std	Z+2, r26	; 0x02
    27e0:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    27e2:	39 a5       	lds	r19, 0x69

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    27e4:	82 e0       	ldi	r24, 0x02	; 2
    27e6:	89 a7       	lds	r24, 0x79

			switch( eAction )
    27e8:	22 30       	cpi	r18, 0x02	; 2
    27ea:	b9 f0       	breq	.+46     	; 0x281a <xTaskGenericNotify+0x60>
    27ec:	23 30       	cpi	r18, 0x03	; 3
    27ee:	18 f4       	brcc	.+6      	; 0x27f6 <xTaskGenericNotify+0x3c>
    27f0:	21 30       	cpi	r18, 0x01	; 1
    27f2:	51 f5       	brne	.+84     	; 0x2848 <xTaskGenericNotify+0x8e>
    27f4:	05 c0       	rjmp	.+10     	; 0x2800 <xTaskGenericNotify+0x46>
    27f6:	23 30       	cpi	r18, 0x03	; 3
    27f8:	e1 f0       	breq	.+56     	; 0x2832 <xTaskGenericNotify+0x78>
    27fa:	24 30       	cpi	r18, 0x04	; 4
    27fc:	29 f5       	brne	.+74     	; 0x2848 <xTaskGenericNotify+0x8e>
    27fe:	1e c0       	rjmp	.+60     	; 0x283c <xTaskGenericNotify+0x82>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    2800:	8d a1       	lds	r24, 0x4d
    2802:	9e a1       	lds	r25, 0x4e
    2804:	af a1       	lds	r26, 0x4f
    2806:	b8 a5       	lds	r27, 0x68
    2808:	48 2b       	or	r20, r24
    280a:	59 2b       	or	r21, r25
    280c:	6a 2b       	or	r22, r26
    280e:	7b 2b       	or	r23, r27
    2810:	4d a3       	lds	r20, 0x5d
    2812:	5e a3       	lds	r21, 0x5e
    2814:	6f a3       	lds	r22, 0x5f
    2816:	78 a7       	lds	r23, 0x78
					break;
    2818:	17 c0       	rjmp	.+46     	; 0x2848 <xTaskGenericNotify+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    281a:	8d a1       	lds	r24, 0x4d
    281c:	9e a1       	lds	r25, 0x4e
    281e:	af a1       	lds	r26, 0x4f
    2820:	b8 a5       	lds	r27, 0x68
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	a1 1d       	adc	r26, r1
    2826:	b1 1d       	adc	r27, r1
    2828:	8d a3       	lds	r24, 0x5d
    282a:	9e a3       	lds	r25, 0x5e
    282c:	af a3       	lds	r26, 0x5f
    282e:	b8 a7       	lds	r27, 0x78
					break;
    2830:	0b c0       	rjmp	.+22     	; 0x2848 <xTaskGenericNotify+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    2832:	4d a3       	lds	r20, 0x5d
    2834:	5e a3       	lds	r21, 0x5e
    2836:	6f a3       	lds	r22, 0x5f
    2838:	78 a7       	lds	r23, 0x78
					break;
    283a:	06 c0       	rjmp	.+12     	; 0x2848 <xTaskGenericNotify+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    283c:	32 30       	cpi	r19, 0x02	; 2
    283e:	71 f1       	breq	.+92     	; 0x289c <xTaskGenericNotify+0xe2>
					{
						pxTCB->ulNotifiedValue = ulValue;
    2840:	4d a3       	lds	r20, 0x5d
    2842:	5e a3       	lds	r21, 0x5e
    2844:	6f a3       	lds	r22, 0x5f
    2846:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2848:	31 30       	cpi	r19, 0x01	; 1
    284a:	51 f5       	brne	.+84     	; 0x28a0 <xTaskGenericNotify+0xe6>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    284c:	8e 01       	movw	r16, r28
    284e:	0e 5f       	subi	r16, 0xFE	; 254
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	c8 01       	movw	r24, r16
    2854:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    2858:	8e 89       	ldd	r24, Y+22	; 0x16
    285a:	90 91 9e 03 	lds	r25, 0x039E
    285e:	98 17       	cp	r25, r24
    2860:	10 f4       	brcc	.+4      	; 0x2866 <xTaskGenericNotify+0xac>
    2862:	80 93 9e 03 	sts	0x039E, r24
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9c 01       	movw	r18, r24
    286a:	22 0f       	add	r18, r18
    286c:	33 1f       	adc	r19, r19
    286e:	22 0f       	add	r18, r18
    2870:	33 1f       	adc	r19, r19
    2872:	22 0f       	add	r18, r18
    2874:	33 1f       	adc	r19, r19
    2876:	82 0f       	add	r24, r18
    2878:	93 1f       	adc	r25, r19
    287a:	88 55       	subi	r24, 0x58	; 88
    287c:	9c 4f       	sbci	r25, 0xFC	; 252
    287e:	b8 01       	movw	r22, r16
    2880:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2884:	e0 91 95 03 	lds	r30, 0x0395
    2888:	f0 91 96 03 	lds	r31, 0x0396
    288c:	9e 89       	ldd	r25, Y+22	; 0x16
    288e:	86 89       	ldd	r24, Z+22	; 0x16
    2890:	89 17       	cp	r24, r25
    2892:	40 f4       	brcc	.+16     	; 0x28a4 <xTaskGenericNotify+0xea>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    2894:	0e 94 80 06 	call	0xd00	; 0xd00 <vPortYield>
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	05 c0       	rjmp	.+10     	; 0x28a6 <xTaskGenericNotify+0xec>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	03 c0       	rjmp	.+6      	; 0x28a6 <xTaskGenericNotify+0xec>

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	01 c0       	rjmp	.+2      	; 0x28a6 <xTaskGenericNotify+0xec>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    28a4:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    28a6:	0f 90       	pop	r0
    28a8:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	08 95       	ret

000028b4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    28b4:	ef 92       	push	r14
    28b6:	ff 92       	push	r15
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	ec 01       	movw	r28, r24

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
    28c2:	01 15       	cp	r16, r1
    28c4:	11 05       	cpc	r17, r1
    28c6:	49 f0       	breq	.+18     	; 0x28da <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    28c8:	8d a1       	lds	r24, 0x4d
    28ca:	9e a1       	lds	r25, 0x4e
    28cc:	af a1       	lds	r26, 0x4f
    28ce:	b8 a5       	lds	r27, 0x68
    28d0:	f8 01       	movw	r30, r16
    28d2:	80 83       	st	Z, r24
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	a2 83       	std	Z+2, r26	; 0x02
    28d8:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    28da:	39 a5       	lds	r19, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	89 a7       	lds	r24, 0x79

			switch( eAction )
    28e0:	22 30       	cpi	r18, 0x02	; 2
    28e2:	b9 f0       	breq	.+46     	; 0x2912 <xTaskGenericNotifyFromISR+0x5e>
    28e4:	23 30       	cpi	r18, 0x03	; 3
    28e6:	18 f4       	brcc	.+6      	; 0x28ee <xTaskGenericNotifyFromISR+0x3a>
    28e8:	21 30       	cpi	r18, 0x01	; 1
    28ea:	59 f5       	brne	.+86     	; 0x2942 <xTaskGenericNotifyFromISR+0x8e>
    28ec:	05 c0       	rjmp	.+10     	; 0x28f8 <xTaskGenericNotifyFromISR+0x44>
    28ee:	23 30       	cpi	r18, 0x03	; 3
    28f0:	e1 f0       	breq	.+56     	; 0x292a <xTaskGenericNotifyFromISR+0x76>
    28f2:	24 30       	cpi	r18, 0x04	; 4
    28f4:	31 f5       	brne	.+76     	; 0x2942 <xTaskGenericNotifyFromISR+0x8e>
    28f6:	1e c0       	rjmp	.+60     	; 0x2934 <xTaskGenericNotifyFromISR+0x80>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    28f8:	8d a1       	lds	r24, 0x4d
    28fa:	9e a1       	lds	r25, 0x4e
    28fc:	af a1       	lds	r26, 0x4f
    28fe:	b8 a5       	lds	r27, 0x68
    2900:	84 2b       	or	r24, r20
    2902:	95 2b       	or	r25, r21
    2904:	a6 2b       	or	r26, r22
    2906:	b7 2b       	or	r27, r23
    2908:	8d a3       	lds	r24, 0x5d
    290a:	9e a3       	lds	r25, 0x5e
    290c:	af a3       	lds	r26, 0x5f
    290e:	b8 a7       	lds	r27, 0x78
					break;
    2910:	18 c0       	rjmp	.+48     	; 0x2942 <xTaskGenericNotifyFromISR+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    2912:	8d a1       	lds	r24, 0x4d
    2914:	9e a1       	lds	r25, 0x4e
    2916:	af a1       	lds	r26, 0x4f
    2918:	b8 a5       	lds	r27, 0x68
    291a:	01 96       	adiw	r24, 0x01	; 1
    291c:	a1 1d       	adc	r26, r1
    291e:	b1 1d       	adc	r27, r1
    2920:	8d a3       	lds	r24, 0x5d
    2922:	9e a3       	lds	r25, 0x5e
    2924:	af a3       	lds	r26, 0x5f
    2926:	b8 a7       	lds	r27, 0x78
					break;
    2928:	0c c0       	rjmp	.+24     	; 0x2942 <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    292a:	4d a3       	lds	r20, 0x5d
    292c:	5e a3       	lds	r21, 0x5e
    292e:	6f a3       	lds	r22, 0x5f
    2930:	78 a7       	lds	r23, 0x78
					break;
    2932:	07 c0       	rjmp	.+14     	; 0x2942 <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    2934:	32 30       	cpi	r19, 0x02	; 2
    2936:	09 f4       	brne	.+2      	; 0x293a <xTaskGenericNotifyFromISR+0x86>
    2938:	41 c0       	rjmp	.+130    	; 0x29bc <xTaskGenericNotifyFromISR+0x108>
					{
						pxTCB->ulNotifiedValue = ulValue;
    293a:	4d a3       	lds	r20, 0x5d
    293c:	5e a3       	lds	r21, 0x5e
    293e:	6f a3       	lds	r22, 0x5f
    2940:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2942:	31 30       	cpi	r19, 0x01	; 1
    2944:	e9 f5       	brne	.+122    	; 0x29c0 <xTaskGenericNotifyFromISR+0x10c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2946:	80 91 97 03 	lds	r24, 0x0397
    294a:	88 23       	and	r24, r24
    294c:	e9 f4       	brne	.+58     	; 0x2988 <xTaskGenericNotifyFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    294e:	8e 01       	movw	r16, r28
    2950:	0e 5f       	subi	r16, 0xFE	; 254
    2952:	1f 4f       	sbci	r17, 0xFF	; 255
    2954:	c8 01       	movw	r24, r16
    2956:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    295a:	8e 89       	ldd	r24, Y+22	; 0x16
    295c:	90 91 9e 03 	lds	r25, 0x039E
    2960:	98 17       	cp	r25, r24
    2962:	10 f4       	brcc	.+4      	; 0x2968 <xTaskGenericNotifyFromISR+0xb4>
    2964:	80 93 9e 03 	sts	0x039E, r24
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9c 01       	movw	r18, r24
    296c:	22 0f       	add	r18, r18
    296e:	33 1f       	adc	r19, r19
    2970:	22 0f       	add	r18, r18
    2972:	33 1f       	adc	r19, r19
    2974:	22 0f       	add	r18, r18
    2976:	33 1f       	adc	r19, r19
    2978:	82 0f       	add	r24, r18
    297a:	93 1f       	adc	r25, r19
    297c:	88 55       	subi	r24, 0x58	; 88
    297e:	9c 4f       	sbci	r25, 0xFC	; 252
    2980:	b8 01       	movw	r22, r16
    2982:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    2986:	07 c0       	rjmp	.+14     	; 0x2996 <xTaskGenericNotifyFromISR+0xe2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2988:	be 01       	movw	r22, r28
    298a:	64 5f       	subi	r22, 0xF4	; 244
    298c:	7f 4f       	sbci	r23, 0xFF	; 255
    298e:	87 ee       	ldi	r24, 0xE7	; 231
    2990:	93 e0       	ldi	r25, 0x03	; 3
    2992:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2996:	e0 91 95 03 	lds	r30, 0x0395
    299a:	f0 91 96 03 	lds	r31, 0x0396
    299e:	9e 89       	ldd	r25, Y+22	; 0x16
    29a0:	86 89       	ldd	r24, Z+22	; 0x16
    29a2:	89 17       	cp	r24, r25
    29a4:	78 f4       	brcc	.+30     	; 0x29c4 <xTaskGenericNotifyFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    29a6:	e1 14       	cp	r14, r1
    29a8:	f1 04       	cpc	r15, r1
    29aa:	21 f0       	breq	.+8      	; 0x29b4 <xTaskGenericNotifyFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	f7 01       	movw	r30, r14
    29b0:	80 83       	st	Z, r24
    29b2:	09 c0       	rjmp	.+18     	; 0x29c6 <xTaskGenericNotifyFromISR+0x112>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	80 93 9b 03 	sts	0x039B, r24
    29ba:	05 c0       	rjmp	.+10     	; 0x29c6 <xTaskGenericNotifyFromISR+0x112>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	03 c0       	rjmp	.+6      	; 0x29c6 <xTaskGenericNotifyFromISR+0x112>

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	01 c0       	rjmp	.+2      	; 0x29c6 <xTaskGenericNotifyFromISR+0x112>
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    29c4:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	1f 91       	pop	r17
    29cc:	0f 91       	pop	r16
    29ce:	ff 90       	pop	r15
    29d0:	ef 90       	pop	r14
    29d2:	08 95       	ret

000029d4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    29d4:	ef 92       	push	r14
    29d6:	ff 92       	push	r15
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	ec 01       	movw	r28, r24
    29e2:	8b 01       	movw	r16, r22

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    29e4:	29 a5       	lds	r18, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	89 a7       	lds	r24, 0x79

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    29ea:	8d a1       	lds	r24, 0x4d
    29ec:	9e a1       	lds	r25, 0x4e
    29ee:	af a1       	lds	r26, 0x4f
    29f0:	b8 a5       	lds	r27, 0x68
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	a1 1d       	adc	r26, r1
    29f6:	b1 1d       	adc	r27, r1
    29f8:	8d a3       	lds	r24, 0x5d
    29fa:	9e a3       	lds	r25, 0x5e
    29fc:	af a3       	lds	r26, 0x5f
    29fe:	b8 a7       	lds	r27, 0x78

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2a00:	21 30       	cpi	r18, 0x01	; 1
    2a02:	e9 f5       	brne	.+122    	; 0x2a7e <vTaskNotifyGiveFromISR+0xaa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2a04:	80 91 97 03 	lds	r24, 0x0397
    2a08:	88 23       	and	r24, r24
    2a0a:	01 f5       	brne	.+64     	; 0x2a4c <vTaskNotifyGiveFromISR+0x78>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2a0c:	ee 24       	eor	r14, r14
    2a0e:	ff 24       	eor	r15, r15
    2a10:	68 94       	set
    2a12:	e1 f8       	bld	r14, 1
    2a14:	ec 0e       	add	r14, r28
    2a16:	fd 1e       	adc	r15, r29
    2a18:	c7 01       	movw	r24, r14
    2a1a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2a1e:	8e 89       	ldd	r24, Y+22	; 0x16
    2a20:	90 91 9e 03 	lds	r25, 0x039E
    2a24:	98 17       	cp	r25, r24
    2a26:	10 f4       	brcc	.+4      	; 0x2a2c <vTaskNotifyGiveFromISR+0x58>
    2a28:	80 93 9e 03 	sts	0x039E, r24
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9c 01       	movw	r18, r24
    2a30:	22 0f       	add	r18, r18
    2a32:	33 1f       	adc	r19, r19
    2a34:	22 0f       	add	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	22 0f       	add	r18, r18
    2a3a:	33 1f       	adc	r19, r19
    2a3c:	82 0f       	add	r24, r18
    2a3e:	93 1f       	adc	r25, r19
    2a40:	88 55       	subi	r24, 0x58	; 88
    2a42:	9c 4f       	sbci	r25, 0xFC	; 252
    2a44:	b7 01       	movw	r22, r14
    2a46:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    2a4a:	07 c0       	rjmp	.+14     	; 0x2a5a <vTaskNotifyGiveFromISR+0x86>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2a4c:	be 01       	movw	r22, r28
    2a4e:	64 5f       	subi	r22, 0xF4	; 244
    2a50:	7f 4f       	sbci	r23, 0xFF	; 255
    2a52:	87 ee       	ldi	r24, 0xE7	; 231
    2a54:	93 e0       	ldi	r25, 0x03	; 3
    2a56:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2a5a:	e0 91 95 03 	lds	r30, 0x0395
    2a5e:	f0 91 96 03 	lds	r31, 0x0396
    2a62:	9e 89       	ldd	r25, Y+22	; 0x16
    2a64:	86 89       	ldd	r24, Z+22	; 0x16
    2a66:	89 17       	cp	r24, r25
    2a68:	50 f4       	brcc	.+20     	; 0x2a7e <vTaskNotifyGiveFromISR+0xaa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    2a6a:	01 15       	cp	r16, r1
    2a6c:	11 05       	cpc	r17, r1
    2a6e:	21 f0       	breq	.+8      	; 0x2a78 <vTaskNotifyGiveFromISR+0xa4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	f8 01       	movw	r30, r16
    2a74:	80 83       	st	Z, r24
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <vTaskNotifyGiveFromISR+0xaa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	80 93 9b 03 	sts	0x039B, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	ff 90       	pop	r15
    2a88:	ef 90       	pop	r14
    2a8a:	08 95       	ret

00002a8c <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	29 f4       	brne	.+10     	; 0x2a9a <xTaskNotifyStateClear+0xe>
    2a90:	e0 91 95 03 	lds	r30, 0x0395
    2a94:	f0 91 96 03 	lds	r31, 0x0396
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <xTaskNotifyStateClear+0x10>
    2a9a:	fc 01       	movw	r30, r24

		taskENTER_CRITICAL();
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2aa2:	81 a5       	lds	r24, 0x61
    2aa4:	82 30       	cpi	r24, 0x02	; 2
    2aa6:	19 f4       	brne	.+6      	; 0x2aae <xTaskNotifyStateClear+0x22>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2aa8:	11 a6       	lds	r17, 0xb1
				xReturn = pdPASS;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <xTaskNotifyStateClear+0x24>
			}
			else
			{
				xReturn = pdFAIL;
    2aae:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    2ab0:	0f 90       	pop	r0
    2ab2:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    2ab4:	08 95       	ret

00002ab6 <memcpy>:
    2ab6:	fb 01       	movw	r30, r22
    2ab8:	dc 01       	movw	r26, r24
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <memcpy+0xa>
    2abc:	01 90       	ld	r0, Z+
    2abe:	0d 92       	st	X+, r0
    2ac0:	41 50       	subi	r20, 0x01	; 1
    2ac2:	50 40       	sbci	r21, 0x00	; 0
    2ac4:	d8 f7       	brcc	.-10     	; 0x2abc <memcpy+0x6>
    2ac6:	08 95       	ret

00002ac8 <_exit>:
    2ac8:	f8 94       	cli

00002aca <__stop_program>:
    2aca:	ff cf       	rjmp	.-2      	; 0x2aca <__stop_program>
